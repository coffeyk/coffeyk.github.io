{"version":3,"sources":["webpack:///./src/parser/core/modules/Suggestions/Suggestion.js","webpack:///./src/parser/core/modules/Suggestions/Component.js","webpack:///./src/parser/core/modules/Suggestions/Suggestions.js","webpack:///./src/parser/core/modules/Suggestions/index.js","webpack:///./src/parser/core/modules/Checklist/Rule.js","webpack:///./src/parser/core/modules/Checklist/Component.js","webpack:///./src/parser/core/modules/Checklist/Checklist.js","webpack:///./src/parser/core/modules/Checklist/Requirement.js","webpack:///./src/parser/core/modules/Checklist/index.js","webpack:///./src/components/ui/Rotation.tsx","webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/modules/Cooldowns.js","webpack:///./src/components/ui/TimeLineChart.js","webpack:///./src/parser/core/modules/Combos.tsx","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/mathjsCustom.js","webpack:///./src/components/ui/Rotation.module.css?31d9","webpack:///./src/parser/core/modules/Suggestions/Suggestions.module.css?3c09","webpack:///./src/parser/core/modules/Checklist/Checklist.module.css?cfc9","webpack:///./src/parser/jobs/nin/modules/Combos.js","webpack:///./src/parser/jobs/nin/modules/Cooldowns.js","webpack:///./src/parser/jobs/nin/modules/DISPLAY_ORDER.js","webpack:///./src/parser/jobs/nin/modules/Huton.js","webpack:///./src/parser/jobs/nin/modules/Kassatsu.js","webpack:///./src/parser/jobs/nin/modules/Ninjutsu.js","webpack:///./src/parser/jobs/nin/modules/Ninki.js","webpack:///./src/parser/jobs/nin/modules/TrickAttackUsage.js","webpack:///./src/parser/jobs/nin/modules/TrickAttackWindow.js","webpack:///./src/parser/jobs/nin/modules/Weaving.js","webpack:///./src/parser/jobs/nin/modules/index.js"],"names":["SEVERITY","MORBID","MAJOR","MEDIUM","MINOR","IGNORE","undefined","Suggestion","constructor","options","this","icon","content","why","severity","Object","keys","forEach","key","TieredSuggestion","super","tiers","value","matcher","matchClosestLower","SEVERITY_LABEL_PROPS","id","color","Suggestions","React","Component","arguments","onToggleShowMinor","_","data","settingsStore","context","setShowMinorSuggestions","checked","render","showMinor","showMinorSuggestions","suggestions","props","filter","suggestion","hasMinor","some","Checkbox","toggle","label","defaultChecked","onChange","className","styles","checkbox","items","map","index","item","src","alt","extra","Label","horizontal","length","contextType","StoreContext","__decorate","observer","Module","_suggestions","add","push","console","error","output","sort","a","b","handle","displayOrder","DISPLAY_ORDER","SUGGESTIONS","displayMode","DISPLAY_MODE","FULL","title","TARGET","SUCCESS","WARN","FAIL","DEFAULT_TARGET","Rule","name","description","requirements","target","DEFAULT","percent","percents","requirement","math","mean","TieredRule","RULE_STYLES","text","autoExpand","Checklist","rules","expanded","panels","rule","ruleStyles","tier","Math","min","Icon","toFixed","Progress","progress","size","Accordion","exclusive","defaultActiveIndex","styled","fluid","_rules","sortedRules","CHECKLIST","Requirement","_percent","overrideDisplay","Rotation","events","container","event","action","getDataBy","ACTIONS","ability","guid","autoAttack","linkClassName","link","ogcd","onGcd","iconSize","gcdSize","ogcdSize","Link","ITEM_ID_OFFSET","ItemLink","ActionLink","cn","showName","RotationTable","targets","notes","onGoto","headerTitle","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","i","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","negative","end","rotation","style","marginRight","formatDuration","circular","onClick","targetEntry","noteEntry","Cooldowns","_cooldownGroups","_currentAction","_cooldowns","_groups","actions","_buildGroups","cooldownOrder","addHook","by","_onBeginCast","_onCast","_onComplete","groups","order","getAction","_buildGroup","group","merge","nestedGroups","opts","ItemGroup","showNested","timeline","addGroup","cooldown","startCooldown","cooldownGroup","startCooldownGroup","finishingCast","actionId","_addToTimeline","parseInt","cd","current","history","use","shared","addItem","Item","type","timestamp","parser","fight","start_time","getCooldown","originActionId","sharedCooldown","currentFightDuration","currentTimestamp","resetCooldown","invulnTime","reduceCooldown","reduction","setInvulnTime","previousEndTimestamp","previousCooldown","isFirst","downtime","getDowntime","getCooldownRemaining","getTimeOnCooldown","considerInvulnTime","extension","reduce","time","status","getAdjustedTimeOnCooldown","duration","maximumDuration","dependencies","DEFAULT_OPTIONS","aspectRatio","scales","xAxes","displayFormats","minute","second","millisecond","tooltipFormat","TimeLineChart","PureComponent","width","height","DEFAULT_GCD","GCD_TIMEOUT_MILLIS","ISSUE_TYPENAMES","uncomboed","combobreak","failedcombo","Combos","lastGcdTime","currentComboChain","issues","init","onCast","onComplete","lastComboEvent","issue","fabricateComboEvent","combo","fabricateEvent","recordBrokenCombo","isAllowableComboBreak","recordUncomboedGcd","recordFailedCombo","checkCombo","lastAction","from","Array","isArray","includes","breaksCombo","successfulHit","addJobSpecificSuggestions","comboBreakers","uncomboedGcds","suggestionIcon","1","2","4","startTime","completeContext","startEvent","endEvent","startAction","endAction","reason","whiteSpace","show","COMBOS","dependency","__metadata","Data","prototype","Timeline","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","2.5","WEAVING_SEVERITY","5","Weaving","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","isOgcd","_saveIfBad","badWeaves","href","scrollTo","message","leadingGcdEvent","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","maxWeaves","weaveCount","isUntargetable","castTime","forEvent","closest","speedmod","get","gcdLength","gcd","getEstimate","formatTimestamp","create","meanDependencies","modeDependencies","stdDependencies","module","exports","CoreCombos","SPINNING_EDGE","CoreCooldowns","KASSATSU","TEN_CHI_JIN","TRICK_ATTACK","DREAM_WITHIN_A_DREAM","ASSASSINATE","BUNSHIN","BHAVACAKRA","MUG","MEISUI","HELLFROG_MEDIUM","SHUKUCHI","SHADE_SHIFT","HUTON","SHADOW_FANG","HUTON_MAX_DURATION_MILLIS","HUTON_START_DURATION_MILLIS","high","low","HUTON_EXTENSION_MILLIS","ARMOR_CRUSH","HAKKE_MUJINSATSU","DOWNTIME_DIFFERENCE_TOLERANCE","BOSS_ADJUSTMENTS","Huton","_currentDuration","boss","_clippedDuration","_downtime","_futileArmorCrushes","_lastEventTime","abilityId","_onHutonCast","Number","_onHutonExtension","to","_onDeath","_onRaise","_handleHutonRecast","elapsedTime","_handleHutonExtension","amount","newDuration","max","_getHutonAverages","clippedDuration","futileArmorCrushes","round","fightDuration","death","deadTime","uptime","checklist","Message","warning","Content","5000","10000","20000","Kassatsu","_kassatsuSpent","_kassatsuWastes","_kassatsuUses","FUMA_SHURIKEN","GOKA_MEKKYAKU","RAITON","HYOSHO_RANRYU","DOTON","SUITON","RABBIT_MEDIUM","_onNinjutsuCast","STATUSES","_onRemoveKassatsu","combatants","selected","hasStatus","generalBads","DOTON_TICK_TARGET","JUSTIFIABLE_DOTON_TICKS","Ninjutsu","_hyotonCount","_rabbitCount","_dotonCasts","HYOTON","HYOTON_TCJ","DOTON_TCJ","_onDotonCast","_onDotonDamage","_finishDotonWindow","tcj","ticks","hits","_appraiseDotonCasts","result","badTcjs","badAoes","badStds","cast","every","tick","accum","3","KATON","MAX_NINKI","GCD_NINKI_GAIN","GUST_SLASH","DEATH_BLOSSOM","THROWING_DAGGER","AEOLIAN_EDGE","OGCD_NINKI_GAIN","BUNSHIN_NINKI_GAIN","SPENDER_COST","NINKI_GCDS","NINKI_COMBOS","NINKI_OGCDS","NINKI_SPENDERS","Ninki","_ninki","_ninkiHistory","_wasteBySource","_erroneousFrogs","_addNinki","_onSpenderCast","_onHellfrogAoe","waste","_pushToHistory","t","y","totalWaste","values","reducer","20","50","ninkiColor","Color","JOBS","NINJA","colour","chartdata","datasets","steppedLine","backgroundColor","fade","borderColor","TA_COOLDOWN_MILLIS","OPTIMAL_GCD_COUNT","TrickAttackUsage","_taCasts","_lostTime","_gcdCount","_castHook","_onTrickAttack","TEN","TEN_KASSATSU","CHI","JIN","removeHook","taAvailable","lastCast","lostCasts","floor","distanceFromOptimal","abs","TrickAttackWindow","_dwadOutsideTa","_assassinateOutsideTa","_armorCrushInTa","_dwadCast","_onArmorCrush","fflogsEvents","damageEventName","_onDwadHit","_onAssassinate","_targetHasVuln","targetId","enemies","getEntity","TRICK_ATTACK_VULNERABILITY_UP","targetID","CoreWeaving","dreams"],"mappings":"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","file":"assets/jobs-nin.acb94847.js","sourcesContent":["import { matchClosestLower } from 'utilities';\nexport const SEVERITY = {\n    // NOTE: Don't use MORBID, It's for deaths. I _will_ block the PRs on this.\n    MORBID: 0,\n    MAJOR: 1,\n    MEDIUM: 2,\n    MINOR: 3,\n    // The matchClosest fall back to undefined, so let's use that for ignore too\n    IGNORE: undefined,\n};\nexport default class Suggestion {\n    constructor(options) {\n        this.icon = ''; // TODO: default image\n        this.content = '';\n        this.why = '';\n        this.severity = SEVERITY.MEDIUM;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n}\nexport class TieredSuggestion extends Suggestion {\n    constructor(options) {\n        super({\n            tiers: {},\n            value: 0,\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get severity() {\n        return this.matcher(this.tiers, this.value);\n    }\n    // noop setter so it doesn't die from the base class\n    set severity(value) { }\n}\n","import { __decorate } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Checkbox, Label } from 'semantic-ui-react';\n// Direct path import 'cus it'll be a dep loop otherwise\nimport { SEVERITY } from 'parser/core/modules/Suggestions/Suggestion';\nimport { SettingsStore } from 'store/settings';\nimport styles from './Suggestions.module.css';\nimport { StoreContext } from 'store';\nconst SEVERITY_LABEL_PROPS = {\n    [SEVERITY.MORBID]: { content: <Trans id=\"core.suggestions.severity.morbid\">Morbid</Trans>, color: 'black', icon: 'times' },\n    [SEVERITY.MAJOR]: { content: <Trans id=\"core.suggestions.severity.major\">Major</Trans>, color: 'red', icon: 'arrow up' },\n    [SEVERITY.MEDIUM]: { content: <Trans id=\"core.suggestions.severity.medium\">Medium</Trans>, color: 'orange' },\n    [SEVERITY.MINOR]: { content: <Trans id=\"core.suggestions.severity.minor\">Minor</Trans>, color: 'blue', icon: 'arrow down' },\n};\nlet Suggestions = class Suggestions extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onToggleShowMinor = (_, data) => {\n            const { settingsStore } = this.context;\n            settingsStore.setShowMinorSuggestions(data.checked);\n        };\n    }\n    render() {\n        const showMinor = this.context.settingsStore.showMinorSuggestions;\n        const suggestions = this.props.suggestions.filter(suggestion => showMinor || suggestion.severity !== SEVERITY.MINOR);\n        const hasMinor = this.props.suggestions.some(suggestion => suggestion.severity === SEVERITY.MINOR);\n        return <>\n\t\t\t{hasMinor && <Checkbox toggle label={<label><Trans id=\"core.suggestion.show-minor\">Show minor</Trans></label>} defaultChecked={showMinor} onChange={this.onToggleShowMinor} className={styles.checkbox}/>}\n\t\t\t<div className={styles.items}>\n\t\t\t\t{suggestions.map((suggestion, index) => <div key={index} className={styles.item}>\n\t\t\t\t\t<img src={suggestion.icon} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{suggestion.content}\n\t\t\t\t\t\t<div className={styles.extra}>\n\t\t\t\t\t\t\t<Label horizontal {...SEVERITY_LABEL_PROPS[suggestion.severity]}/>\n\t\t\t\t\t\t\t{suggestion.why}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>)}\n\t\t\t\t{suggestions.length === 0 && <div className={styles.item}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong><Trans id=\"core.suggestion.nothing\">There's nothing here!</Trans></strong><br />\n\t\t\t\t\t\t{hasMinor && <Trans id=\"core.suggestion.nothing-but-minor\">You can check over the minor suggestions by flicking the \"Show minor\" switch in the top right.</Trans>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t</>;\n    }\n};\nSuggestions.propTypes = {\n    settingsStore: PropTypes.instanceOf(SettingsStore),\n    suggestions: PropTypes.arrayOf(PropTypes.shape({\n        icon: PropTypes.string.isRequired,\n        content: PropTypes.node.isRequired,\n        why: PropTypes.node.isRequired,\n        severity: PropTypes.number.isRequired,\n    })).isRequired,\n};\nSuggestions.contextType = StoreContext;\nSuggestions = __decorate([\n    observer\n], Suggestions);\nexport default Suggestions;\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Suggestion, { SEVERITY } from './Suggestion';\nimport SuggestionsComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Suggestions extends Module {\n    constructor() {\n        super(...arguments);\n        this._suggestions = [];\n    }\n    add(suggestion) {\n        if (!(suggestion instanceof Suggestion)) {\n            console.error('TODO: Proper error message for passing a non-suggestion to the suggestion add handler');\n            return;\n        }\n        this._suggestions.push(suggestion);\n    }\n    output() {\n        // Only show the suggestions module if it's had things sent to it\n        if (this._suggestions.length === 0) {\n            return false;\n        }\n        // Sort suggestions with most important at the top, and remove ignored\n        const suggestions = this._suggestions\n            .filter(suggestion => suggestion.severity !== SEVERITY.IGNORE)\n            .sort((a, b) => a.severity - b.severity);\n        // Rendering is in a specialised component so it's got some state to work with\n        return <SuggestionsComponent suggestions={suggestions}/>;\n    }\n}\nSuggestions.handle = 'suggestions';\nSuggestions.displayOrder = DISPLAY_ORDER.SUGGESTIONS;\nSuggestions.displayMode = DISPLAY_MODE.FULL;\nSuggestions.title = t('core.suggestions.title') `Suggestions`;\n","export { default } from './Suggestions';\nexport { default as Suggestion } from './Suggestion';\nexport * from './Suggestion';\n","import math from 'mathjsCustom';\nimport { matchClosestLower } from 'utilities';\nimport { DISPLAY_ORDER } from 'parser/core/Module';\nexport const TARGET = {\n    SUCCESS: 2,\n    WARN: 1,\n    FAIL: undefined,\n};\nconst DEFAULT_TARGET = 95;\nexport default class Rule {\n    constructor(options) {\n        this.name = '';\n        this.description = null;\n        this.requirements = [];\n        this.target = DEFAULT_TARGET;\n        this.displayOrder = DISPLAY_ORDER.DEFAULT;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get tier() {\n        return matchClosestLower({ [this.target]: TARGET.SUCCESS }, this.percent);\n    }\n    get percent() {\n        // WoWA has a bunch of different modes for this stuff, I'm just going to use mean for now. Because I'm mean. Hue.\n        // TODO: different requirement modes\n        const percents = this.requirements.map(requirement => requirement.percent);\n        return percents.length ? math.mean(percents) : 0;\n    }\n}\nexport class TieredRule extends Rule {\n    constructor(options) {\n        super({\n            tiers: {},\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get tier() {\n        return this.matcher(this.tiers, this.percent);\n    }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Accordion, Icon, Progress } from 'semantic-ui-react';\nimport { TARGET } from 'parser/core/modules/Checklist/Rule';\nimport styles from './Checklist.module.css';\nconst RULE_STYLES = {\n    [TARGET.SUCCESS]: { text: 'text-success', color: 'green', icon: 'checkmark', autoExpand: false },\n    [TARGET.WARN]: { text: 'text-warning', color: 'yellow', icon: 'warning sign', autoExpand: true },\n    [TARGET.FAIL]: { text: 'text-error', color: 'red', icon: 'remove', autoExpand: true },\n};\nclass Checklist extends Component {\n    render() {\n        const { rules } = this.props;\n        // If there's no rules, just stop now\n        if (!rules.length) {\n            return false;\n        }\n        const expanded = [];\n        const panels = rules.map((rule, index) => {\n            const ruleStyles = RULE_STYLES[rule.tier];\n            // We cap the percent @ 100 in production mode - calculations can always be a bit janky\n            let percent = rule.percent;\n            if (process.env.NODE_ENV === 'production') {\n                percent = Math.min(percent, 100);\n            }\n            if (ruleStyles.autoExpand) {\n                expanded.push(index);\n            }\n            return {\n                // This should be a handle of some sort\n                key: index,\n                title: {\n                    className: styles.title,\n                    content: <>\n\t\t\t\t\t\t<Icon name={ruleStyles.icon} className={ruleStyles.text}/>\n\t\t\t\t\t\t{rule.name}\n\t\t\t\t\t\t<div className={styles.percent + ' ' + ruleStyles.text}>\n\t\t\t\t\t\t\t{percent.toFixed(1)}%\n\t\t\t\t\t\t\t<Progress percent={percent} className={styles.progress} size=\"small\" color={ruleStyles.color}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>,\n                },\n                content: {\n                    content: <>\n\t\t\t\t\t\t{rule.description && <div className={styles.description}>\n\t\t\t\t\t\t\t<Icon name=\"info\" size=\"large\"/>\n\t\t\t\t\t\t\t<p>{rule.description}</p>\n\t\t\t\t\t\t</div>}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{rule.requirements.map((requirement, index) => <li key={index}>\n\t\t\t\t\t\t\t\t\t{requirement.name}: {requirement.content}\n\t\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>,\n                },\n            };\n        });\n        return <Accordion exclusive={false} panels={panels} defaultActiveIndex={expanded} styled fluid/>;\n    }\n}\nChecklist.propTypes = {\n    rules: PropTypes.arrayOf(PropTypes.shape({\n        percent: PropTypes.number.isRequired,\n        tier: PropTypes.oneOf(Object.values(TARGET)),\n        name: PropTypes.node.isRequired,\n        requirements: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.node.isRequired,\n            content: PropTypes.string.isRequired,\n        })),\n    })),\n};\nexport default (Checklist);\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Rule from './Rule';\nimport ChecklistComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Checklist extends Module {\n    constructor() {\n        super(...arguments);\n        this._rules = [];\n    }\n    add(rule) {\n        if (!(rule instanceof Rule)) {\n            console.error('TODO: This error message');\n            return;\n        }\n        this._rules.push(rule);\n    }\n    output() {\n        const sortedRules = [...this._rules];\n        sortedRules.sort((a, b) => a.displayOrder - b.displayOrder);\n        return <ChecklistComponent rules={sortedRules}/>;\n    }\n}\nChecklist.handle = 'checklist';\nChecklist.title = t('core.checklist.title') `Checklist`;\nChecklist.displayOrder = DISPLAY_ORDER.CHECKLIST;\nChecklist.displayMode = DISPLAY_MODE.FULL;\n","export default class Requirement {\n    constructor(options) {\n        this.name = '';\n        this._percent = null;\n        this.value = null;\n        this.target = 100;\n        this.overrideDisplay = null;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get content() {\n        if (this.overrideDisplay !== null) {\n            return this.overrideDisplay;\n        }\n        if (this._percent !== null || this.value === null) {\n            return `${this.percent.toFixed(2)}%`;\n        }\n        return `${this.value.toFixed(0)}/${this.target.toFixed(0)}`; //avoid weird floating point shit\n    }\n    get percent() {\n        if (this._percent === null) {\n            if (this.value === null) {\n                return 0;\n            }\n            return 100 * (((typeof this.value === 'function') ? this.value() : this.value) || 0) / this.target;\n        }\n        return ((typeof this._percent === 'function') ? this._percent() : this._percent) || 0;\n    }\n    set percent(value) {\n        this._percent = value;\n    }\n}\n","export { default } from './Checklist';\nexport { default as Rule, TieredRule, TARGET } from './Rule';\nexport { default as Requirement } from './Requirement';\n","import cn from 'classnames';\nimport { ActionLink, ItemLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS, { ITEM_ID_OFFSET } from 'data/ACTIONS';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport styles from './Rotation.module.css';\nexport default class Rotation extends Component {\n    render() {\n        const { events } = this.props;\n        return <div className={styles.container}>\n\t\t\t{events.map((event, index) => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            // Don't bother showing the icon for autos\n            if (!action || action.autoAttack) {\n                return;\n            }\n            // Stuff like the duty action doesn't have an icon mapping yet.\n            // TODO: Sort this out if it's a problem\n            if (!action.icon) {\n                console.error(event, 'event ability has no icon');\n                return false;\n            }\n            const linkClassName = [\n                styles.link,\n                { [styles.ogcd]: !action.onGcd },\n            ];\n            const iconSize = action.onGcd ? styles.gcdSize : styles.ogcdSize;\n            const isItem = action.id >= ITEM_ID_OFFSET;\n            const Link = isItem ? ItemLink : ActionLink;\n            return <div key={index} className={cn(...linkClassName)}>\n\t\t\t\t\t<Link showName={false} iconSize={iconSize} {...action}/>\n\t\t\t\t</div>;\n        })}\n\t\t</div>;\n    }\n}\nRotation.propTypes = {\n    events: PropTypes.arrayOf(PropTypes.shape({\n        ability: PropTypes.shape({\n            guid: PropTypes.number.isRequired,\n        }).isRequired,\n    })).isRequired,\n};\n","import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import _ from 'lodash';\nimport Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\n// Track the cooldowns on actions and shit\nexport default class Cooldowns extends Module {\n    constructor(...args) {\n        super(...args);\n        this._cooldownGroups = {};\n        this._currentAction = null;\n        this._cooldowns = {};\n        this._groups = {};\n        this._cooldownGroups = _.groupBy(this.data.actions, 'cooldownGroup');\n        // Pre-build groups for actions explicitly set by subclasses\n        this._buildGroups(this.constructor.cooldownOrder);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _buildGroups(groups) {\n        // If there's no groups, noop\n        if (!groups) {\n            return;\n        }\n        const ids = groups.map((data, i) => {\n            const order = -(groups.length - i);\n            // If it's just an action id, build a group for it and stop\n            if (typeof data === 'number') {\n                const action = this.data.getAction(data);\n                this._buildGroup({\n                    id: data,\n                    content: action && action.name,\n                    order,\n                });\n                return data;\n            }\n            // Build the base group\n            const group = this._buildGroup({\n                id: data.name,\n                content: data.name,\n                order,\n            });\n            if (data.merge) {\n                // If it's a merge group, we only need to register our group for each of the IDs\n                data.actions.forEach(id => {\n                    this._groups[id] = group;\n                });\n            }\n            else {\n                // Otherwise, build nested groups for each action\n                group.nestedGroups = this._buildGroups(data.actions);\n            }\n            return data.name;\n        });\n        return ids;\n    }\n    _buildGroup(opts) {\n        const group = new ItemGroup({ showNested: false, ...opts });\n        this.timeline.addGroup(group);\n        this._groups[opts.id] = group;\n        return group;\n    }\n    // cooldown starts at the beginning of the casttime\n    // (though 99% of CD based abilities have no cast time)\n    // TODO: Should I be tracking pet CDs too? I mean, contagion/radiant are a thing.\n    _onBeginCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        this._currentAction = action;\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        const finishingCast = this._currentAction && this._currentAction.id === action.id;\n        this._currentAction = null;\n        if (finishingCast) {\n            return;\n        }\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onComplete() {\n        Object.keys(this._cooldowns).forEach(actionId => {\n            this._addToTimeline(parseInt(actionId, 10));\n        });\n    }\n    _addToTimeline(actionId) {\n        const cd = this._cooldowns[actionId];\n        if (!cd) {\n            return false;\n        }\n        // Clean out any 'current' cooldowns into the history\n        if (cd.current) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        const action = this.data.getAction(actionId);\n        // If the action is on the GCD, GlobalCooldown will be managing its own group\n        if (!action || action.onGcd) {\n            return false;\n        }\n        // Ensure we've got a group for this item\n        if (!this._groups[actionId]) {\n            this._buildGroup({\n                id: actionId,\n                content: action.name,\n                order: actionId,\n            });\n        }\n        // Add CD info to the timeline\n        cd.history\n            .forEach(use => {\n            if (!use.shared) {\n                this._groups[actionId].addItem(new Item({\n                    type: 'background',\n                    start: use.timestamp - this.parser.fight.start_time,\n                    length: use.length,\n                    content: <img src={action.icon} alt={action.name}/>,\n                }));\n            }\n        });\n        return true;\n    }\n    getCooldown(actionId) {\n        return this._cooldowns[actionId] || {\n            current: null,\n            history: [],\n        };\n    }\n    startCooldownGroup(originActionId, cooldownGroup) {\n        const sharedCooldownActions = _.get(this._cooldownGroups, cooldownGroup, []);\n        sharedCooldownActions\n            .map(action => action.id)\n            .filter(id => id !== originActionId)\n            .forEach(id => this.startCooldown(id, true));\n    }\n    startCooldown(actionId, sharedCooldown = false) {\n        // TODO: handle shared CDs\n        const action = this.data.getAction(actionId);\n        if (!action) {\n            return;\n        }\n        // Get the current cooldown status, falling back to a new cooldown\n        const cd = this.getCooldown(actionId);\n        // If there's a current object, move it into the history\n        // TODO: handle errors on CD overlap\n        if (cd.current) {\n            const currentFightDuration = this.parser.currentTimestamp - this.parser.fight.start_time;\n            if (cd.current.timestamp < this.parser.fight.start_time && cd.current.length > currentFightDuration) {\n                // Pre-pull usage, reset the cooldown to prevent overlap on timeline since we don't know exactly when cooldown was used pre-pull\n                this.resetCooldown(actionId);\n            }\n            else {\n                cd.history.push(cd.current);\n            }\n        }\n        cd.current = {\n            timestamp: this.parser.currentTimestamp,\n            length: action.cooldown * 1000,\n            shared: sharedCooldown,\n            invulnTime: 0,\n        };\n        // Save the info back out (to ensure propagation if we've got a new info)\n        this._cooldowns[actionId] = cd;\n    }\n    reduceCooldown(actionId, reduction) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        // Check if current isn't current\n        if (cd.current && cd.current.timestamp + cd.current.length < currentTimestamp) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        // TODO: Do I need to warn if they're reducing cooldown on something _with_ no cooldown?\n        if (cd.current === null) {\n            return;\n        }\n        // Reduce the CD\n        cd.current.length -= reduction * 1000;\n        // If the reduction would have made it come off CD earlier than now, reset it - the extra time reduction should be lost.\n        if (cd.current.timestamp + cd.current.length < currentTimestamp) {\n            this.resetCooldown(actionId);\n        }\n    }\n    setInvulnTime(actionId) {\n        const cd = this.getCooldown(actionId);\n        let previousEndTimestamp = this.parser.fight.start_time;\n        let previousCooldown = {};\n        let isFirst = true;\n        for (const cooldown of cd.history) {\n            if (isFirst) {\n                previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n                isFirst = false;\n                previousCooldown = cooldown;\n            }\n            //We invuln time is the time the boss was invuln from when the CD came off CD and when it was next executed\n            previousCooldown.invulnTime = this.downtime.getDowntime(previousEndTimestamp, cooldown.timestamp);\n            previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n            previousCooldown = cooldown;\n        }\n    }\n    resetCooldown(actionId) {\n        const cd = this.getCooldown(actionId);\n        // If there's nothing running, we can just stop\n        // TODO: need to warn?\n        if (cd.current === null) {\n            return;\n        }\n        // Fix up the length\n        cd.current.length = this.parser.currentTimestamp - cd.current.timestamp;\n        // Move the CD into the history\n        cd.history.push(cd.current);\n        cd.current = null;\n    }\n    getCooldownRemaining(actionId) {\n        const current = this.getCooldown(actionId).current;\n        if (!current) {\n            return 0;\n        }\n        return current.length - (this.parser.currentTimestamp - current.timestamp);\n    }\n    // TODO: Should this be here?\n    getTimeOnCooldown(actionId, considerInvulnTime = false, extension = 0) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        if (considerInvulnTime) {\n            this.setInvulnTime(actionId);\n        }\n        else {\n            cd.history.map(cooldown => {\n                cooldown.invulnTime = 0;\n            });\n        }\n        return cd.history.reduce((time, status) => time + this.getAdjustedTimeOnCooldown(status, currentTimestamp, extension), cd.current ? this.getAdjustedTimeOnCooldown(cd.current, currentTimestamp, extension) : 0);\n    }\n    getAdjustedTimeOnCooldown(cooldown, currentTimestamp, extension) {\n        // Doesn't count time on CD outside the bounds of the current fight, it'll throw calcs off\n        // Add to the length of the cooldown any invuln time for the boss\n        // Additionally account for any extension the caller allowed to the CD Length\n        const duration = currentTimestamp - cooldown.timestamp;\n        const maximumDuration = cooldown.length + cooldown.invulnTime + extension;\n        return _.clamp(duration, 0, maximumDuration);\n    }\n    get used() {\n        return Object.keys(this._cooldowns);\n    }\n}\nCooldowns.handle = 'cooldowns';\nCooldowns.dependencies = [\n    'data',\n    'downtime',\n    'timeline',\n];\n// Array used to sort cooldowns in the timeline. Elements should be either IDs for\n// top-level groups, or objects of the format {name: string, actions: array} for\n// nested groups. Actions not specified here will be sorted by their ID below.\n// Check the NIN and SMN modules for examples.\nCooldowns.cooldownOrder = [];\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Line } from 'react-chartjs-2';\nconst DEFAULT_OPTIONS = {\n    aspectRatio: 3,\n    scales: {\n        xAxes: [{\n                type: 'time',\n                time: {\n                    displayFormats: {\n                        minute: 'm:ss',\n                        second: 'm:ss',\n                        millisecond: 'm:ss.SS',\n                    },\n                    // This tooltip format displays similar to a \"relative\" timestamp,\n                    // since react assumes UNIX epoch timestamps for the data.\n                    tooltipFormat: 'mm:ss.SSS',\n                },\n            }],\n    },\n};\nexport default class TimeLineChart extends PureComponent {\n    render() {\n        const options = _.merge({}, DEFAULT_OPTIONS, this.props.options || {});\n        return <Line data={this.props.data} options={options} \n        // Using this trash 'cus aspectRatio doesn't work with the react wrapper\n        width={options.aspectRatio} height={1}/>;\n    }\n}\nTimeLineChart.propTypes = {\n    data: PropTypes.object.isRequired,\n    options: PropTypes.object,\n};\n","// If you can make it through this entire file without hitting semantic saturation of the word \"combo\", hats off to you. IT DOESN'T LOOK REAL ANYMORE.\nimport { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nconst DEFAULT_GCD = 2.5;\nconst GCD_TIMEOUT_MILLIS = 15000;\nconst ISSUE_TYPENAMES = {\n    uncomboed: <Trans id=\"core.combos.issuetypenames.uncomboed\">Uncomboed</Trans>,\n    combobreak: <Trans id=\"core.combos.issuetypenames.combobreak\">Broken Combo</Trans>,\n    failedcombo: <Trans id=\"core.combos.issuetypenames.failed\">Missed or Invulnerable</Trans>,\n};\nexport default class Combos extends Module {\n    constructor() {\n        super(...arguments);\n        this.lastGcdTime = this.parser.fight.start_time;\n        this.currentComboChain = [];\n        this.issues = [];\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    get lastComboEvent() {\n        return _.last(this.currentComboChain) || null;\n    }\n    get lastAction() {\n        const lastComboEvent = this.lastComboEvent;\n        if (!lastComboEvent) {\n            return null;\n        }\n        return lastComboEvent.ability.guid;\n    }\n    get comboBreakers() {\n        return this.issues\n            .filter(issue => issue.type === 'combobreak')\n            .map(issue => issue.event);\n    }\n    get uncomboedGcds() {\n        return this.issues\n            .filter(issue => issue.type === 'uncomboed')\n            .map(issue => issue.event);\n    }\n    fabricateComboEvent(event) {\n        const combo = {\n            ...event,\n            type: 'combo',\n        };\n        delete combo.timestamp; // Since fabricateEvent adds that in anyway\n        this.parser.fabricateEvent(combo);\n    }\n    recordBrokenCombo(event, context) {\n        if (!this.isAllowableComboBreak(event, context)) {\n            this.issues.push({\n                type: 'combobreak',\n                event,\n                context,\n            });\n        }\n        this.currentComboChain = [];\n    }\n    recordUncomboedGcd(event) {\n        this.issues.push({\n            type: 'uncomboed',\n            event,\n            context: [],\n        });\n        this.currentComboChain = [];\n    }\n    recordFailedCombo(event, context) {\n        this.issues.push({\n            type: 'failedcombo',\n            event,\n            context,\n        });\n        this.currentComboChain = [];\n    }\n    /**\n     *\n     * @param combo\n     * @param event\n     * @return true if combo, false otherwise\n     */\n    checkCombo(combo /* Should be an Action type */, event) {\n        // Not in a combo\n        if (this.lastAction == null) {\n            // Combo starter, we good\n            if (combo.start) {\n                this.fabricateComboEvent(event);\n                return true;\n            }\n            // Combo action that isn't a starter, that's a paddlin'\n            if (combo.from) {\n                this.recordUncomboedGcd(event);\n                return false;\n            }\n        }\n        if (combo.start) {\n            // Broken combo - starting a new combo while in a current combo\n            this.recordBrokenCombo(event, this.currentComboChain);\n            return true; // Start a new combo\n        }\n        // Check if action continues existing combo\n        if (combo.from) {\n            const fromOptions = Array.isArray(combo.from) ? combo.from : [combo.from];\n            if (fromOptions.includes(this.lastAction)) {\n                // Combo continued correctly\n                this.fabricateComboEvent(event);\n                // If it's a finisher, reset the combo\n                return !combo.end;\n            }\n        }\n        // Action did not continue combo correctly and is not a new combo starter\n        this.recordBrokenCombo(event, this.currentComboChain);\n        return false;\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action) {\n            return;\n        }\n        // Only track GCDs that either progress or break combos so actions like Drill and Shadow Fang don't falsely extend the simulated combo timer\n        if (action.onGcd && (action.combo || action.breaksCombo)) {\n            if (event.timestamp - this.lastGcdTime > GCD_TIMEOUT_MILLIS) {\n                // If we've had enough downtime between GCDs to let the combo expire, reset the state so we don't count erroneous combo breaks\n                this.currentComboChain = [];\n            }\n            this.lastGcdTime = event.timestamp;\n        }\n        // If it's a combo action, run it through the combo checking logic\n        if (action.combo) {\n            if (!event.successfulHit) {\n                // Failed attacks break combo\n                this.recordFailedCombo(event, this.currentComboChain);\n                return;\n            }\n            const continueCombo = this.checkCombo(action.combo, event);\n            if (continueCombo) {\n                this.currentComboChain.push(event);\n            }\n            else {\n                this.currentComboChain = [];\n            }\n        }\n        if (action.breaksCombo && this.lastAction !== null) {\n            // Combo breaking action, that's a paddlin'\n            this.recordBrokenCombo(event, this.currentComboChain);\n        }\n    }\n    onComplete() {\n        if (this.addJobSpecificSuggestions(this.comboBreakers, this.uncomboedGcds)) {\n            return;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.constructor.suggestionIcon,\n            content: <Trans id=\"core.combos.content\">\n\t\t\t\t<p>Avoid breaking combos, as failing to complete combos costs you a significant amount of DPS and important secondary effects.</p>\n\t\t\t\t<p>Using a combo GCD at the wrong combo step, using non-combo GCDs while inside a combo, missing, or attacking a target that is invulnerable will cause your combo to break.</p>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.issues.length,\n            why: <Plural id=\"core.combos.why\" value={this.issues.length} one=\"You misused # combo action.\" other=\"You misused # combo actions.\"/>,\n        }));\n    }\n    /**\n     * To be overridden by subclasses. This is called in _onComplete() and passed two arrays of event objects - one for events that\n     * broke combos, and one for combo GCDs used outside of combos. Subclassing modules can add job-specific suggestions based on\n     * what particular actions were misused and when in the fight.\n     * The overriding module should return true if the default suggestion is not wanted\n     */\n    addJobSpecificSuggestions(comboBreakers, uncomboedGcds) {\n        return false;\n    }\n    /**\n     * To be overridden by subclasses. This is called in recordBrokenCombo, and receives the event triggering the broken combo,\n     * and the context information for that break. Jobs can override this to indicate whether this broken combo is allowed. If so,\n     * the event and context will not be recorded, and the current combo will be cleared with no other side effects.\n     * Returning false will allow the break to be recorded, and displayed to the user\n     */\n    isAllowableComboBreak(event, context) {\n        return false;\n    }\n    output() {\n        if (this.issues.length <= 0) {\n            return false;\n        }\n        // Access Alias\n        const startTime = this.parser.fight.start_time;\n        const data = this.issues\n            .sort((a, b) => a.event.timestamp - b.event.timestamp)\n            .map(issue => {\n            const completeContext = [...(issue.context || []), issue.event];\n            const startEvent = _.first(completeContext);\n            const endEvent = _.last(completeContext);\n            const startAction = this.data.getAction(startEvent.ability.guid);\n            const endAction = this.data.getAction(endEvent.ability.guid);\n            return ({\n                start: startEvent.timestamp - startTime + (startAction?.cooldown ?? DEFAULT_GCD),\n                end: endEvent.timestamp - startTime + (endAction?.cooldown ?? DEFAULT_GCD),\n                rotation: completeContext,\n                notesMap: {\n                    reason: <span style={{ whiteSpace: 'nowrap' }}>{ISSUE_TYPENAMES[issue.type]}</span>,\n                },\n            });\n        });\n        return <RotationTable notes={[\n            {\n                header: <Trans id=\"core.combos.rotationtable.header.reason\">Reason</Trans>,\n                accessor: 'reason',\n            },\n        ]} data={data} onGoto={this.timeline.show}/>;\n    }\n}\nCombos.handle = 'combos';\nCombos.title = t('core.combos.title') `Combo Issues`;\nCombos.displayOrder = DISPLAY_ORDER.COMBOS;\n// This should be redefined by subclassing modules; the default is the basic 'Attack' icon\nCombos.suggestionIcon = 'https://xivapi.com/i/000000/000405.png';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], Combos.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Combos.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Combos.prototype, \"timeline\", void 0);\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import { create, meanDependencies, modeDependencies, stdDependencies, } from 'mathjs/number';\nexport default create({\n    meanDependencies,\n    modeDependencies,\n    stdDependencies,\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gcdSize\":\"40px\",\"ogcdSize\":\"30px\",\"container\":\"Rotation-module_container__32KS2\",\"link\":\"Rotation-module_link__2T3fu\",\"ogcd\":\"Rotation-module_ogcd__3oBO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gutter\":\"20px\",\"checkbox\":\"Suggestions-module_checkbox__1Z22N\",\"items\":\"Suggestions-module_items__3sCkP\",\"item\":\"Suggestions-module_item__1yy1-\",\"extra\":\"Suggestions-module_extra__3WN2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lg\":\"(min-width: 992px)\",\"title\":\"Checklist-module_title__2ro7x\",\"percent\":\"Checklist-module_percent__EKBdj\",\"progress\":\"Checklist-module_progress__28lgp\",\"description\":\"Checklist-module_description__3Bf5O\"};","import CoreCombos from 'parser/core/modules/Combos';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Combos extends CoreCombos {\n}\n// Overrides\nCombos.suggestionIcon = ACTIONS.SPINNING_EDGE.icon;\n","import CoreCooldowns from 'parser/core/modules/Cooldowns';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    ACTIONS.KASSATSU.id,\n    ACTIONS.TEN_CHI_JIN.id,\n    ACTIONS.TRICK_ATTACK.id,\n    ACTIONS.DREAM_WITHIN_A_DREAM.id,\n    ACTIONS.ASSASSINATE.id,\n    ACTIONS.BUNSHIN.id,\n    ACTIONS.BHAVACAKRA.id,\n    ACTIONS.MUG.id,\n    ACTIONS.MEISUI.id,\n    ACTIONS.HELLFROG_MEDIUM.id,\n    ACTIONS.SHUKUCHI.id,\n    ACTIONS.SHADE_SHIFT.id,\n];\n","export default {\n    HUTON: 1,\n    SHADOW_FANG: 2,\n};\n","import { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\nimport { getDataBy } from 'data';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst HUTON_MAX_DURATION_MILLIS = 70000; // Not in STATUSES/NIN.js because lolgauges\nconst HUTON_START_DURATION_MILLIS = {\n    // TODO - Revisit how this sim works in the first place because it's fucky\n    high: 65000,\n    low: 59000,\n};\nconst HUTON_EXTENSION_MILLIS = {\n    [ACTIONS.ARMOR_CRUSH.id]: 30000,\n    [ACTIONS.HAKKE_MUJINSATSU.id]: 10000,\n};\nconst DOWNTIME_DIFFERENCE_TOLERANCE = 10000; // If the downtime estimates are off by more than this, we can probably toss the low estimate\n// Some bosses *coughChadarnookcough* require fucky pulls that result in your Huton timer being lower than normal when the fight starts\nconst BOSS_ADJUSTMENTS = {\n// [BOSSES.DEMON_CHADARNOOK.logId]: 15000,\n};\nexport default class Huton extends Module {\n    constructor(...args) {\n        super(...args);\n        this._currentDuration = {\n            high: HUTON_START_DURATION_MILLIS.high - (BOSS_ADJUSTMENTS[this.parser.fight.boss] || 0),\n            low: HUTON_START_DURATION_MILLIS.low - (BOSS_ADJUSTMENTS[this.parser.fight.boss] || 0),\n        };\n        this._clippedDuration = {\n            high: 0,\n            low: 0,\n        };\n        this._downtime = {\n            high: 0,\n            low: 0,\n        };\n        this._futileArmorCrushes = {\n            high: 0,\n            low: 0,\n        };\n        this._lastEventTime = this.parser.fight.start_time; // This one is shared\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.HUTON.id }, this._onHutonCast);\n        this.addHook('combo', { by: 'player', abilityId: Object.keys(HUTON_EXTENSION_MILLIS).map(Number) }, this._onHutonExtension);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('raise', { to: 'player' }, this._onRaise);\n        this.addHook('complete', this._onComplete);\n    }\n    _handleHutonRecast(key, elapsedTime) {\n        if (this._currentDuration[key] === 0) {\n            this._downtime[key] += elapsedTime;\n        }\n        this._currentDuration[key] = HUTON_MAX_DURATION_MILLIS;\n    }\n    _onHutonCast(event) {\n        const elapsedTime = (event.timestamp - this._lastEventTime);\n        this._handleHutonRecast('high', elapsedTime);\n        this._handleHutonRecast('low', elapsedTime);\n        this._lastEventTime = event.timestamp;\n    }\n    _handleHutonExtension(key, amount, elapsedTime) {\n        let newDuration = this._currentDuration[key] - elapsedTime;\n        if (newDuration <= 0) {\n            this._currentDuration[key] = 0;\n            this._downtime[key] -= newDuration; // Since it's negative, this is basically addition\n            this._futileArmorCrushes[key]++;\n        }\n        else {\n            newDuration += amount;\n            this._clippedDuration[key] += Math.max(newDuration - HUTON_MAX_DURATION_MILLIS, 0);\n            this._currentDuration[key] = Math.min(newDuration, HUTON_MAX_DURATION_MILLIS);\n        }\n    }\n    _onHutonExtension(event) {\n        const elapsedTime = (event.timestamp - this._lastEventTime);\n        const extension = HUTON_EXTENSION_MILLIS[getDataBy(ACTIONS, 'id', event.ability.guid)];\n        this._handleHutonExtension('high', extension, elapsedTime);\n        this._handleHutonExtension('low', extension, elapsedTime);\n        this._lastEventTime = event.timestamp;\n    }\n    _onDeath() {\n        // RIP\n        this._currentDuration.high = 0;\n        this._currentDuration.low = 0;\n    }\n    _onRaise(event) {\n        // So floor time doesn't count against Huton uptime\n        this._lastEventTime = event.timestamp;\n    }\n    _getHutonAverages() {\n        if (this._downtime.low - this._downtime.high > DOWNTIME_DIFFERENCE_TOLERANCE) {\n            // If the estimates are too far apart, the low one was probably bad, so we can just return the high one as-is\n            return {\n                clippedDuration: this._clippedDuration.high,\n                downtime: this._downtime.high,\n                futileArmorCrushes: this._futileArmorCrushes.high,\n            };\n        }\n        // Otherwise, average the results\n        return {\n            clippedDuration: Math.round((this._clippedDuration.high + this._clippedDuration.low) / 2),\n            downtime: Math.round((this._downtime.high + this._downtime.low) / 2),\n            futileArmorCrushes: Math.round((this._futileArmorCrushes.high + this._futileArmorCrushes.low) / 2),\n        };\n    }\n    _onComplete() {\n        const { clippedDuration, downtime, futileArmorCrushes } = this._getHutonAverages();\n        const duration = this.parser.fightDuration - this.death.deadTime;\n        const uptime = ((duration - downtime) / duration) * 100;\n        this.checklist.add(new Rule({\n            name: <Trans id=\"nin.huton.checklist.name\">Keep Huton up</Trans>,\n            description: <Fragment>\n\t\t\t\t<Trans id=\"nin.huton.checklist.description\"><ActionLink {...ACTIONS.HUTON}/> provides you with a 15% attack speed increase and as such is a <em>huge</em> part of a NIN's personal DPS. Do your best not to let it drop, and recover it as quickly as possible if it does.</Trans>\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name=\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<Trans id=\"nin.huton.checklist.description.warning\">As Huton is now a gauge instead of a buff, please bear in mind that this is an estimate, not an exact value. This also applies to any Huton-related suggestions below.</Trans>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t</Fragment>,\n            displayOrder: DISPLAY_ORDER.HUTON,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"nin.huton.checklist.requirement.name\"><ActionLink {...ACTIONS.HUTON}/> uptime</Trans>,\n                    percent: () => uptime,\n                }),\n            ],\n            target: 99,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.HUTON.icon,\n            content: <Trans id=\"nin.huton.suggestions.clipping.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.ARMOR_CRUSH}/> when <ActionLink {...ACTIONS.HUTON}/> has more than 40 seconds left on its duration. The excess time is wasted, so your other two combo finishers are typically better options.\n\t\t\t</Trans>,\n            tiers: {\n                5000: SEVERITY.MINOR,\n                10000: SEVERITY.MEDIUM,\n                20000: SEVERITY.MAJOR,\n            },\n            value: clippedDuration,\n            why: <Trans id=\"nin.huton.suggestions.clipping.why\">\n\t\t\t\tYou clipped {this.parser.formatDuration(clippedDuration)} of Huton with early Armor Crushes.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.ARMOR_CRUSH.icon,\n            content: <Trans id=\"nin.huton.suggestions.futile-ac.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.ARMOR_CRUSH}/> when <ActionLink {...ACTIONS.HUTON}/> is down, as it provides no benefit and does less DPS than your other combo finishers.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n            },\n            value: futileArmorCrushes,\n            why: <Trans id=\"nin.huton.suggestions.futile-ac.why\">\n\t\t\t\tYou used Armor Crush <Plural value={futileArmorCrushes} one=\"# time\" other=\"# times\"/> when Huton was down.\n\t\t\t</Trans>,\n        }));\n    }\n}\nHuton.handle = 'huton';\nHuton.dependencies = [\n    'checklist',\n    'death',\n    'suggestions',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nexport default class Kassatsu extends Module {\n    constructor(...args) {\n        super(...args);\n        this._kassatsuSpent = false;\n        this._kassatsuWastes = 0;\n        this._kassatsuUses = {\n            [ACTIONS.FUMA_SHURIKEN.id]: 0,\n            [ACTIONS.GOKA_MEKKYAKU.id]: 0,\n            [ACTIONS.RAITON.id]: 0,\n            [ACTIONS.HYOSHO_RANRYU.id]: 0,\n            [ACTIONS.HUTON.id]: 0,\n            [ACTIONS.DOTON.id]: 0,\n            [ACTIONS.SUITON.id]: 0,\n            [ACTIONS.RABBIT_MEDIUM.id]: 0,\n        };\n        this.addHook('cast', { by: 'player', abilityId: Object.keys(this._kassatsuUses).map(Number) }, this._onNinjutsuCast);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.KASSATSU.id }, this._onRemoveKassatsu);\n        this.addHook('complete', this._onComplete);\n    }\n    _onNinjutsuCast(event) {\n        const abilityId = event.ability.guid;\n        if (this.combatants.selected.hasStatus(STATUSES.KASSATSU.id)) {\n            this._kassatsuUses[abilityId]++;\n            this._kassatsuSpent = true;\n        }\n    }\n    _onRemoveKassatsu() {\n        if (!this._kassatsuSpent) {\n            this._kassatsuWastes++;\n        }\n        // Reset the flag for the next time it's cast\n        this._kassatsuSpent = false;\n    }\n    _onComplete() {\n        if (this._kassatsuWastes > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.KASSATSU.icon,\n                content: <Trans id=\"nin.kassatsu.suggestions.waste.content\">\n\t\t\t\t\tBe careful not to let <ActionLink {...ACTIONS.KASSATSU}/> fall off, as it wastes a 30% potency buff and means that you're delaying your Ninjutsu casts significantly.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"nin.kassatsu.suggestions.waste.why\">\n\t\t\t\t\tYou allowed Kassatsu to fall off <Plural value={this._kassatsuWastes} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._kassatsuUses[ACTIONS.HUTON.id] > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.HUTON.icon,\n                content: <Trans id=\"nin.kassatsu.suggestions.huton.content\">\n\t\t\t\t\tAvoid using <ActionLink {...ACTIONS.HUTON}/> under <ActionLink {...ACTIONS.KASSATSU}/>, as it does no damage and completely wastes the 30% potency buff Kassatsu provides.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"nin.kassatsu.suggestions.huton.why\">\n\t\t\t\t\tYou cast Huton <Plural value={this._kassatsuUses[ACTIONS.HUTON.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n            }));\n        }\n        const generalBads = this._kassatsuUses[ACTIONS.FUMA_SHURIKEN.id] + this._kassatsuUses[ACTIONS.RAITON.id] + this._kassatsuUses[ACTIONS.DOTON.id];\n        if (generalBads > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FUMA_SHURIKEN.icon,\n                content: <Trans id=\"nin.kassatsu.suggestions.generalbads.content\">\n\t\t\t\t\tAvoid using <ActionLink {...ACTIONS.FUMA_SHURIKEN}/>, <ActionLink {...ACTIONS.RAITON}/>, and <ActionLink {...ACTIONS.DOTON}/> under <ActionLink {...ACTIONS.KASSATSU}/>. For raw damage, <ActionLink {...ACTIONS.HYOSHO_RANRYU}/> and <ActionLink {...ACTIONS.GOKA_MEKKYAKU}/> should always be used in single-target and AoE situations respectively.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"nin.kassatsu.suggestions.generalbads.why\">\n\t\t\t\t\tYou cast standard damaging Ninjutsu <Plural value={generalBads} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._kassatsuUses[ACTIONS.SUITON.id] > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.SUITON.icon,\n                content: <Trans id=\"nin.kassatsu.suggestions.suiton.content\">\n\t\t\t\t\tAvoid using <ActionLink {...ACTIONS.SUITON}/> under <ActionLink {...ACTIONS.KASSATSU}/> unless using it to set up for a critically important <ActionLink {...ACTIONS.TRICK_ATTACK}/>. It's generally best to use it on <ActionLink {...ACTIONS.HYOSHO_RANRYU}/> while Trick Attack is up, as its cooldown should align it with every window.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"nin.kassatsu.suggestions.suiton.why\">\n\t\t\t\t\tYou cast Suiton <Plural value={this._kassatsuUses[ACTIONS.SUITON.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._kassatsuUses[ACTIONS.RABBIT_MEDIUM.id] > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.RABBIT_MEDIUM.icon,\n                content: <Trans id=\"nin.kassatsu.suggestions.rabbit.content\">\n\t\t\t\t\tBe especially careful not to flub your mudras under <ActionLink {...ACTIONS.KASSATSU}/>, as <ActionLink {...ACTIONS.RABBIT_MEDIUM}/> does no damage and completely wastes the 30% potency buff Kassatsu provides.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"nin.kassatsu.suggestions.rabbit.why\">\n\t\t\t\t\tYou cast Rabbit Medium <Plural value={this._kassatsuUses[ACTIONS.RABBIT_MEDIUM.id]} one=\"# time\" other=\"# times\"/> under Kassatsu.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nKassatsu.handle = 'kassatsu';\nKassatsu.dependencies = [\n    'combatants',\n    'suggestions',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nconst DOTON_TICK_TARGET = 6;\nconst JUSTIFIABLE_DOTON_TICKS = 10;\nexport default class Ninjutsu extends Module {\n    constructor(...args) {\n        super(...args);\n        this._hyotonCount = 0;\n        this._rabbitCount = 0;\n        this._dotonCasts = {\n            current: null,\n            history: [],\n        };\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.HYOTON.id, ACTIONS.HYOTON_TCJ.id] }, () => { this._hyotonCount++; });\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.RABBIT_MEDIUM.id }, () => { this._rabbitCount++; });\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.DOTON.id, ACTIONS.DOTON_TCJ.id] }, this._onDotonCast);\n        this.addHook('aoedamage', { by: 'player', abilityId: STATUSES.DOTON.id }, this._onDotonDamage);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.DOTON.id }, this._finishDotonWindow);\n        this.addHook('complete', this._onComplete);\n    }\n    _onDotonCast() {\n        this._finishDotonWindow();\n        this._dotonCasts.current = {\n            tcj: this.combatants.selected.hasStatus(STATUSES.TEN_CHI_JIN.id),\n            ticks: [],\n        };\n    }\n    _onDotonDamage(event) {\n        // If there are no casts at all, use the damage event to fabricate one\n        if (!this._dotonCasts.current) {\n            this._onDotonCast();\n        }\n        this._dotonCasts.current.ticks.push(event.hits.length); // Track the number of enemies hit per tick\n    }\n    _finishDotonWindow() {\n        if (!this._dotonCasts.current) {\n            return;\n        }\n        this._dotonCasts.history.push(this._dotonCasts.current);\n        this._dotonCasts.current = null;\n    }\n    _appraiseDotonCasts() {\n        const result = {\n            badTcjs: 0,\n            badAoes: 0,\n            badStds: 0,\n        };\n        this._dotonCasts.history.forEach(cast => {\n            if (cast.tcj && cast.ticks.every(tick => tick === 1)) {\n                // If it's a fully single-target TCJ, flag it\n                result.badTcjs++;\n            }\n            else if (cast.ticks.every(tick => tick > 1)) {\n                // If it's a fully multi-target Doton that misses at least 2 ticks, flag it\n                if (cast.ticks.length < DOTON_TICK_TARGET) {\n                    result.badAoes++;\n                }\n            }\n            else if (cast.ticks.reduce((accum, value) => accum + value, 0) < JUSTIFIABLE_DOTON_TICKS) {\n                // If it's a partial or entirely single-target and it doesn't reach the hit threshold for a good Doton, flag it\n                // Note: Fully single-target Dotons will never reach this threshold\n                result.badStds++;\n            }\n        });\n        return result;\n    }\n    _onComplete() {\n        this._finishDotonWindow();\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.HYOTON.icon,\n            content: <Trans id=\"nin.ninjutsu.suggestions.hyoton.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.HYOTON}/>, as it's the weakest of the mudra combinations and should typically never be used in raid content.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n            },\n            value: this._hyotonCount,\n            why: <Trans id=\"nin.ninjutsu.suggestions.hyoton.why\">\n\t\t\t\tYou cast Hyoton <Plural value={this._hyotonCount} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.RABBIT_MEDIUM.icon,\n            content: <Trans id=\"nin.ninjutsu.suggestions.rabbit.content\">\n\t\t\t\tBe careful not to flub your mudras, as using <ActionLink {...ACTIONS.RABBIT_MEDIUM}/> can cost you personal DPS at best and raid DPS at worst by reducing the number of <ActionLink {...ACTIONS.TRICK_ATTACK}/>s you can do during the fight.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: this._rabbitCount,\n            why: <Trans id=\"nin.ninjutsu.suggestions.rabbit.why\">\n\t\t\t\tYou cast Rabbit Medium <Plural value={this._rabbitCount} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n        const { badTcjs, badAoes, badStds } = this._appraiseDotonCasts();\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DOTON.icon,\n            content: <Trans id=\"nin.ninjutsu.suggestions.tcj-doton.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.DOTON}/> under <ActionLink {...ACTIONS.TEN_CHI_JIN}/> unless you're up against multiple targets. On a single target, using the <ActionLink {...ACTIONS.SUITON}/> combo will do equivalent or better damage and keep it aligned with <ActionLink {...ACTIONS.MEISUI}/>.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                2: SEVERITY.MAJOR,\n            },\n            value: badTcjs,\n            why: <Trans id=\"nin.ninjutsu.suggestions.tcj-doton.why\">\n\t\t\t\tYou cast a single-target Doton under Ten Chi Jin <Plural value={badTcjs} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n        if (badAoes > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.DOTON.icon,\n                content: <Trans id=\"nin.ninjutsu.suggestions.aoe-doton.content\">\n\t\t\t\t\t<ActionLink {...ACTIONS.DOTON}/> requires at least {DOTON_TICK_TARGET} ticks to be worthwhile in an AoE setting. Use <ActionLink {...ACTIONS.KATON}/> instead against adds that will die quickly.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MINOR,\n                why: <Trans id=\"nin.ninjutsu.suggestions.aoe-doton.why\">\n\t\t\t\t\tYou cast an unoptimized Doton cast <Plural value={badAoes} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DOTON.icon,\n            content: <Trans id=\"nin.ninjutsu.suggestions.st-doton.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.DOTON}/> on single targets, as it does less damage than <ActionLink {...ACTIONS.RAITON}/> if any ticks miss and uses more mudras, resulting in more GCD delay for no gain.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: badStds,\n            why: <Trans id=\"nin.ninjutsu.suggestions.st-doton.why\">\n\t\t\t\tYou cast a single-target Doton <Plural value={badStds} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n    }\n}\nNinjutsu.handle = 'ninjutsu';\nNinjutsu.dependencies = [\n    'combatants',\n    'suggestions',\n];\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport Color from 'color';\nimport JOBS from 'data/JOBS';\nimport TimeLineChart from 'components/ui/TimeLineChart';\n// Constants\nconst MAX_NINKI = 100;\nconst GCD_NINKI_GAIN = {\n    [ACTIONS.SPINNING_EDGE.id]: 5,\n    [ACTIONS.GUST_SLASH.id]: 5,\n    [ACTIONS.DEATH_BLOSSOM.id]: 5,\n    [ACTIONS.HAKKE_MUJINSATSU.id]: 5,\n    [ACTIONS.THROWING_DAGGER.id]: 5,\n    [ACTIONS.AEOLIAN_EDGE.id]: 10,\n    [ACTIONS.ARMOR_CRUSH.id]: 10,\n    [ACTIONS.SHADOW_FANG.id]: 10,\n};\nconst OGCD_NINKI_GAIN = {\n    [ACTIONS.MUG.id]: 40,\n    [ACTIONS.MEISUI.id]: 50,\n};\nconst BUNSHIN_NINKI_GAIN = 5;\nconst SPENDER_COST = 50;\nconst NINKI_GCDS = [\n    ACTIONS.SPINNING_EDGE.id,\n    ACTIONS.DEATH_BLOSSOM.id,\n    ACTIONS.THROWING_DAGGER.id,\n    ACTIONS.SHADOW_FANG.id,\n];\nconst NINKI_COMBOS = [\n    ACTIONS.GUST_SLASH.id,\n    ACTIONS.AEOLIAN_EDGE.id,\n    ACTIONS.ARMOR_CRUSH.id,\n    ACTIONS.HAKKE_MUJINSATSU.id,\n];\nconst NINKI_OGCDS = [\n    ACTIONS.MUG.id,\n    ACTIONS.MEISUI.id,\n];\nconst NINKI_SPENDERS = [\n    ACTIONS.HELLFROG_MEDIUM.id,\n    ACTIONS.BHAVACAKRA.id,\n    ACTIONS.BUNSHIN.id,\n];\nexport default class Ninki extends Module {\n    constructor(...args) {\n        super(...args);\n        this._ninki = 0;\n        this._ninkiHistory = [];\n        this._wasteBySource = {\n            [ACTIONS.MUG.id]: 0,\n            [ACTIONS.MEISUI.id]: 0,\n            [ACTIONS.SPINNING_EDGE.id]: 0,\n            [ACTIONS.GUST_SLASH.id]: 0,\n            [ACTIONS.AEOLIAN_EDGE.id]: 0,\n            [ACTIONS.SHADOW_FANG.id]: 0,\n            [ACTIONS.ARMOR_CRUSH.id]: 0,\n            [ACTIONS.DEATH_BLOSSOM.id]: 0,\n            [ACTIONS.HAKKE_MUJINSATSU.id]: 0,\n            [ACTIONS.THROWING_DAGGER.id]: 0,\n        };\n        this._erroneousFrogs = 0; // This is my new band name\n        this.addHook('cast', { by: 'player', abilityId: NINKI_GCDS }, event => this._addNinki(event, GCD_NINKI_GAIN[event.ability.guid]));\n        this.addHook('combo', { by: 'player', abilityId: NINKI_COMBOS }, event => this._addNinki(event, GCD_NINKI_GAIN[event.ability.guid]));\n        this.addHook('cast', { by: 'player', abilityId: NINKI_OGCDS }, event => this._addNinki(event, OGCD_NINKI_GAIN[event.ability.guid]));\n        this.addHook('cast', { by: 'pet' }, event => this._addNinki(event, BUNSHIN_NINKI_GAIN));\n        this.addHook('cast', { by: 'player', abilityId: NINKI_SPENDERS }, this._onSpenderCast);\n        this.addHook('aoedamage', { by: 'player', abilityId: ACTIONS.HELLFROG_MEDIUM.id }, this._onHellfrogAoe);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    _addNinki(event, amount) {\n        const abilityId = event.ability.guid;\n        this._ninki += amount;\n        if (this._ninki > MAX_NINKI) {\n            const waste = this._ninki - MAX_NINKI;\n            this._wasteBySource[abilityId] += waste;\n            this._ninki = MAX_NINKI;\n        }\n        this._pushToHistory();\n    }\n    _onSpenderCast() {\n        this._ninki = Math.max(this._ninki - SPENDER_COST, 0);\n        this._pushToHistory();\n    }\n    _onHellfrogAoe(event) {\n        if (event.hits.length === 1) {\n            // If we have a Hellfrog AoE event with only one target, it should've been a Bhava instead\n            this._erroneousFrogs++;\n        }\n    }\n    _onDeath() {\n        // YOU DONE FUCKED UP NOW\n        this._ninki = 0;\n        this._pushToHistory();\n    }\n    _pushToHistory() {\n        const timestamp = this.parser.currentTimestamp - this.parser.fight.start_time;\n        this._ninkiHistory.push({ t: timestamp, y: this._ninki });\n    }\n    _onComplete() {\n        const totalWaste = Object.values(this._wasteBySource).reduce((reducer, value) => reducer + value);\n        this.suggestions.add(new TieredSuggestion({\n            icon: 'https://xivapi.com/i/005000/005411.png',\n            content: <Trans id=\"nin.ninki.suggestions.waste.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.MUG}/> and <ActionLink {...ACTIONS.MEISUI}/> when above 40 Ninki and holding your Ninki spenders when near or at cap (with a few small exceptions) in order to maximize the number of spenders you can use over the course of a fight.\n\t\t\t</Trans>,\n            tiers: {\n                20: SEVERITY.MINOR,\n                50: SEVERITY.MAJOR,\n            },\n            value: totalWaste,\n            why: <Trans id=\"nin.ninki.suggestions.waste.why\">\n\t\t\t\tOvercapping caused you to lose {totalWaste} Ninki over the fight.\n\t\t\t</Trans>,\n        }));\n        if (this._erroneousFrogs > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.HELLFROG_MEDIUM.icon,\n                content: <Trans id=\"nin.ninki.suggestions.frog.content\">\n\t\t\t\t\tAvoid using <ActionLink {...ACTIONS.HELLFROG_MEDIUM}/> when you only have one target, as <ActionLink {...ACTIONS.BHAVACAKRA}/> has higher potency and can be used freely.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"nin.ninki.suggestions.frog.why\">\n\t\t\t\t\tYou used Hellfrog Medium <Plural value={this._erroneousFrogs} one=\"# time\" other=\"# times\"/> when other spenders were available.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n    output() {\n        const ninkiColor = Color(JOBS.NINJA.colour);\n        /* eslint-disable no-magic-numbers */\n        const chartdata = {\n            datasets: [\n                {\n                    label: 'Ninki',\n                    steppedLine: true,\n                    data: this._ninkiHistory,\n                    backgroundColor: ninkiColor.fade(0.8),\n                    borderColor: ninkiColor.fade(0.5),\n                },\n            ],\n        };\n        /* eslint-enable no-magic-numbers */\n        return <Fragment>\n\t\t\t<TimeLineChart data={chartdata}/>\n\t\t</Fragment>;\n    }\n}\nNinki.handle = 'ninki';\nNinki.title = t('nin.ninki.title') `Ninki Timeline`;\nNinki.displayMode = DISPLAY_MODE.FULL;\nNinki.dependencies = [\n    'suggestions',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nconst TA_COOLDOWN_MILLIS = ACTIONS.TRICK_ATTACK.cooldown * 1000;\nconst OPTIMAL_GCD_COUNT = 5; // Opener should be Suiton > AE combo > SE before Trick\nexport default class TrickAttackUsage extends Module {\n    constructor(...args) {\n        super(...args);\n        this._taCasts = [];\n        this._lostTime = 0;\n        this._gcdCount = 0;\n        this._castHook = null;\n        this._castHook = this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.TRICK_ATTACK.id }, this._onTrickAttack);\n        this.addHook('complete', this._onComplete);\n    }\n    _onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (action && action.onGcd && !(action.id === ACTIONS.TEN.id || action.id === ACTIONS.TEN_KASSATSU.id || action.id === ACTIONS.CHI.id || action.id === ACTIONS.JIN.id)) {\n            // Don't count the individual mudras as GCDs for this - they'll make the count screw if Suiton wasn't set up pre-pull\n            this._gcdCount++;\n        }\n    }\n    _onTrickAttack(event) {\n        if (this._castHook !== null) {\n            this.removeHook(this._castHook);\n            this._castHook = null;\n        }\n        if (this._taCasts.length > 0) {\n            const lastCast = this._taCasts[this._taCasts.length - 1];\n            const taAvailable = lastCast + TA_COOLDOWN_MILLIS;\n            const downtime = this.downtime.getDowntime(taAvailable, event.timestamp);\n            this._lostTime += Math.max((event.timestamp - taAvailable) - downtime, 0);\n        }\n        this._taCasts.push(event.timestamp);\n    }\n    _onComplete() {\n        if (this._taCasts.length > 0) {\n            const lastCast = this._taCasts[this._taCasts.length - 1];\n            // _lostTime is only the time they were actually holding it off CD, but we want to add in the CD time of the final cast for\n            // calculating how many theoretical casts were lost. For example, 20s of holding + last cast 40s before the end of the fight\n            // would mean that they could've squeezed in an extra cast with perfect timing.\n            const lostCasts = Math.floor((this._lostTime + (this.parser.currentTimestamp - lastCast)) / TA_COOLDOWN_MILLIS);\n            this.suggestions.add(new TieredSuggestion({\n                icon: ACTIONS.TRICK_ATTACK.icon,\n                content: <Trans id=\"nin.ta-usage.suggestions.missed.content\">\n\t\t\t\t\tAvoid holding <ActionLink {...ACTIONS.TRICK_ATTACK}/> for extended periods of time. It's typically ideal to use it as close to on cooldown as possible in order to keep it aligned with all the other raid buffs and personal burst windows, as well as maximizing the number of uses per fight.\n\t\t\t\t</Trans>,\n                value: lostCasts,\n                tiers: {\n                    1: SEVERITY.MEDIUM,\n                    2: SEVERITY.MAJOR,\n                },\n                why: <Trans id=\"nin.ta-usage.suggestions.missed.why\">\n\t\t\t\t\tYou delayed Trick Attack for a cumulative {this.parser.formatDuration(this._lostTime)}, costing you <Plural value={lostCasts} one=\"# potential use\" other=\"# potential uses\"/>.\n\t\t\t\t</Trans>,\n            }));\n            const distanceFromOptimal = Math.abs(OPTIMAL_GCD_COUNT - this._gcdCount);\n            this.suggestions.add(new TieredSuggestion({\n                icon: ACTIONS.TRICK_ATTACK.icon,\n                content: <Trans id=\"nin.ta-usage.suggestions.opener.content\">\n\t\t\t\t\tAvoid unconventional timings for your first <ActionLink {...ACTIONS.TRICK_ATTACK}/> of the fight in order to line it up with all the other raid and personal buffs. In most openers, Trick Attack should be weaved in approximately 8-9 seconds into the fight.\n\t\t\t\t</Trans>,\n                value: distanceFromOptimal,\n                tiers: {\n                    1: SEVERITY.MEDIUM,\n                    2: SEVERITY.MAJOR,\n                },\n                why: <Trans id=\"nin.ta-usage.suggestions.opener.why\">\n\t\t\t\t\tYour first Trick Attack was <Plural value={this._gcdCount} one=\"# GCD\" other=\"# GCDs\"/> into your opener.\n\t\t\t\t</Trans>,\n            }));\n        }\n        else {\n            // WHY ARE YOU EVEN PLAYING THIS JOB\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.TRICK_ATTACK.icon,\n                content: <Trans id=\"nin.ta-usage.suggestions.none.content\">\n\t\t\t\t\t<ActionLink {...ACTIONS.TRICK_ATTACK}/> is the single most powerful raid buff in your kit and should be used on cooldown, or as close to it as possible depending on the flow of the fight.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"nin.ta-usage.suggestions.none.why\">\n\t\t\t\t\tYou didn't use Trick Attack once the entire fight.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nTrickAttackUsage.handle = 'taUsage';\nTrickAttackUsage.dependencies = [\n    'downtime',\n    'suggestions',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nexport default class TrickAttackWindow extends Module {\n    constructor(...args) {\n        super(...args);\n        this._dwadOutsideTa = 0;\n        this._assassinateOutsideTa = 0;\n        this._armorCrushInTa = 0;\n        this._dwadCast = false;\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.DREAM_WITHIN_A_DREAM.id }, () => this._dwadCast = true);\n        this.addHook('combo', { by: 'player', abilityId: ACTIONS.ARMOR_CRUSH.id }, this._onArmorCrush);\n        this.addHook('complete', this._onComplete);\n        this.addHook('init', () => {\n            this.addHook(this.fflogsEvents.damageEventName, { by: 'player', abilityId: ACTIONS.DREAM_WITHIN_A_DREAM.id }, this._onDwadHit);\n            this.addHook(this.fflogsEvents.damageEventName, { by: 'player', abilityId: ACTIONS.ASSASSINATE.id }, this._onAssassinate);\n        });\n    }\n    _targetHasVuln(targetId) {\n        const target = this.enemies.getEntity(targetId);\n        return target && target.hasStatus(STATUSES.TRICK_ATTACK_VULNERABILITY_UP.id);\n    }\n    _onArmorCrush(event) {\n        if (this._targetHasVuln(event.targetID)) {\n            this._armorCrushInTa++;\n        }\n    }\n    _onDwadHit(event) {\n        if (this._dwadCast) {\n            // Reset the flag so we only check the first hit\n            this._dwadCast = false;\n            if (!this._targetHasVuln(event.targetID)) {\n                this._dwadOutsideTa++;\n            }\n        }\n    }\n    _onAssassinate(event) {\n        if (!this._targetHasVuln(event.targetID)) {\n            this._assassinateOutsideTa++;\n        }\n    }\n    _onComplete() {\n        if (this._dwadOutsideTa > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.DREAM_WITHIN_A_DREAM.icon,\n                content: <Trans id=\"nin.ta-window.suggestions.dream.content\">\n\t\t\t\t\tAvoid using <ActionLink {...ACTIONS.DREAM_WITHIN_A_DREAM}/> outside of Trick Attack windows. Since they're both on 60 second cooldowns, they should always be paired to maximize DPS.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"nin.ta-window.suggestions.dream.why\">\n\t\t\t\t\tYou used Dream Within A Dream <Plural value={this._dwadOutsideTa} one=\"# time\" other=\"# times\"/> outside of Trick Attack.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._assassinateOutsideTa > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.ASSASSINATE.icon,\n                content: <Trans id=\"nin.ta-window.suggestions.assassinate.content\">\n\t\t\t\t\tTry to fit your <ActionLink {...ACTIONS.ASSASSINATE}/> casts inside your Trick Attack windows. Since it chains off of <ActionLink {...ACTIONS.DREAM_WITHIN_A_DREAM}/>, you should be able to use them both in every window.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"nin.ta-window.suggestions.assassinate.why\">\n\t\t\t\t\tYou used Assassinate <Plural value={this._assassinateOutsideTa} one=\"# time\" other=\"# times\"/> outside of Trick Attack.\n\t\t\t\t</Trans>,\n            }));\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.ARMOR_CRUSH.icon,\n            content: <Trans id=\"nin.ta-window.suggestions.armor-crush.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.ARMOR_CRUSH}/> during Trick Attack windows. Unless Huton would otherwise fall off, <ActionLink {...ACTIONS.AEOLIAN_EDGE}/> or <ActionLink {...ACTIONS.SHADOW_FANG}/> are always preferable for the additional damage.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n            },\n            value: this._armorCrushInTa,\n            why: <Trans id=\"nin.ta-window.suggestions.armor-crush.why\">\n\t\t\t\tYou used Armor Crush <Plural value={this._armorCrushInTa} one=\"# time\" other=\"# times\"/> during Trick Attack.\n\t\t\t</Trans>,\n        }));\n    }\n}\nTrickAttackWindow.handle = 'taWindow';\nTrickAttackWindow.dependencies = [\n    'enemies',\n    'fflogsEvents',\n    'suggestions',\n];\n","import CoreWeaving from 'parser/core/modules/Weaving';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Weaving extends CoreWeaving {\n    isBadWeave(weave /*, maxWeaves*/) {\n        let dreams = 0;\n        for (let i = 0; i < weave.weaves.length; i++) {\n            if (weave.weaves[i].ability.guid === ACTIONS.DREAM_WITHIN_A_DREAM.id) {\n                dreams++;\n            }\n        }\n        if (dreams > 1) {\n            // We had duplicate DWaD events; only one is actually valid, so remove dreams - 1 from the count to dedupe and test that\n            return (weave.weaves.length - (dreams - 1)) > 2;\n        }\n        return super.isBadWeave(weave, 2);\n    }\n}\n","import Combos from './Combos';\nimport Cooldowns from './Cooldowns';\nimport Huton from './Huton';\nimport Kassatsu from './Kassatsu';\nimport Ninjutsu from './Ninjutsu';\nimport Ninki from './Ninki';\n//import ShadowFang from './ShadowFang' // Leaving a placeholder since this module will be revived shortly\nimport TrickAttackUsage from './TrickAttackUsage';\nimport TrickAttackWindow from './TrickAttackWindow';\nimport Weaving from './Weaving';\nexport default [\n    Combos,\n    Cooldowns,\n    Huton,\n    Kassatsu,\n    Ninjutsu,\n    Ninki,\n    //ShadowFang,\n    TrickAttackUsage,\n    TrickAttackWindow,\n    Weaving,\n];\n"],"sourceRoot":""}
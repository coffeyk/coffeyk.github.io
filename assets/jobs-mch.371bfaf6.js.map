{"version":3,"sources":["webpack:///./src/parser/core/modules/Suggestions/Suggestion.js","webpack:///./src/parser/core/modules/Suggestions/Component.js","webpack:///./src/parser/core/modules/Suggestions/Suggestions.js","webpack:///./src/parser/core/modules/Suggestions/index.js","webpack:///./src/components/ui/Rotation.tsx","webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/modules/Cooldowns.js","webpack:///./src/components/ui/TimeLineChart.js","webpack:///./src/parser/core/modules/Combos.tsx","webpack:///./src/components/ui/Rotation.module.css?31d9","webpack:///./src/parser/core/modules/Suggestions/Suggestions.module.css?3c09","webpack:///./src/parser/jobs/mch/modules/Combos.js","webpack:///./src/parser/jobs/mch/modules/Cooldowns.js","webpack:///./src/parser/jobs/mch/modules/Gauge.js","webpack:///./src/parser/jobs/mch/modules/Heat.js","webpack:///./src/parser/jobs/mch/modules/YassQueen.js","webpack:///./src/parser/jobs/mch/modules/Reassemble.js","webpack:///./src/parser/jobs/mch/modules/Wildfire.js","webpack:///./src/parser/jobs/mch/modules/index.js"],"names":["SEVERITY","MORBID","MAJOR","MEDIUM","MINOR","IGNORE","undefined","Suggestion","constructor","options","this","icon","content","why","severity","Object","keys","forEach","key","TieredSuggestion","super","tiers","value","matcher","matchClosestLower","SEVERITY_LABEL_PROPS","id","color","Suggestions","React","Component","arguments","onToggleShowMinor","_","data","settingsStore","context","setShowMinorSuggestions","checked","render","showMinor","showMinorSuggestions","suggestions","props","filter","suggestion","hasMinor","some","Checkbox","toggle","label","defaultChecked","onChange","className","styles","checkbox","items","map","index","item","src","alt","extra","Label","horizontal","length","contextType","StoreContext","__decorate","observer","Module","_suggestions","add","push","console","error","output","sort","a","b","handle","displayOrder","DISPLAY_ORDER","SUGGESTIONS","displayMode","DISPLAY_MODE","FULL","title","Rotation","events","container","event","action","getDataBy","ACTIONS","ability","guid","autoAttack","linkClassName","link","ogcd","onGcd","iconSize","gcdSize","ogcdSize","Link","ITEM_ID_OFFSET","ItemLink","ActionLink","cn","showName","RotationTable","targets","notes","onGoto","headerTitle","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","target","i","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","negative","end","rotation","style","marginRight","formatDuration","circular","size","onClick","targetEntry","noteEntry","Cooldowns","_cooldownGroups","_currentAction","_cooldowns","_groups","actions","_buildGroups","cooldownOrder","addHook","by","_onBeginCast","_onCast","_onComplete","groups","order","getAction","_buildGroup","name","group","merge","nestedGroups","opts","ItemGroup","showNested","timeline","addGroup","cooldown","startCooldown","cooldownGroup","startCooldownGroup","finishingCast","actionId","_addToTimeline","parseInt","cd","current","history","use","shared","addItem","Item","type","timestamp","parser","fight","start_time","getCooldown","originActionId","sharedCooldown","currentFightDuration","currentTimestamp","resetCooldown","invulnTime","reduceCooldown","reduction","setInvulnTime","previousEndTimestamp","previousCooldown","isFirst","downtime","getDowntime","getCooldownRemaining","getTimeOnCooldown","considerInvulnTime","extension","reduce","time","status","getAdjustedTimeOnCooldown","duration","maximumDuration","dependencies","DEFAULT_OPTIONS","aspectRatio","scales","xAxes","displayFormats","minute","second","millisecond","tooltipFormat","TimeLineChart","PureComponent","width","height","DEFAULT_GCD","GCD_TIMEOUT_MILLIS","ISSUE_TYPENAMES","uncomboed","combobreak","failedcombo","Combos","lastGcdTime","currentComboChain","issues","init","onCast","onComplete","lastComboEvent","issue","fabricateComboEvent","combo","fabricateEvent","recordBrokenCombo","isAllowableComboBreak","recordUncomboedGcd","recordFailedCombo","checkCombo","lastAction","from","Array","isArray","includes","breaksCombo","successfulHit","addJobSpecificSuggestions","comboBreakers","uncomboedGcds","suggestionIcon","1","2","4","startTime","completeContext","startEvent","endEvent","startAction","endAction","reason","whiteSpace","show","COMBOS","dependency","__metadata","Data","prototype","Timeline","module","exports","CoreCombos","HEATED_SPLIT_SHOT","CoreCooldowns","WILDFIRE","GAUSS_ROUND","RICOCHET","HYPERCHARGE","BARREL_STABILIZER","REASSEMBLE","AUTOMATON_QUEEN","QUEEN_OVERDRIVE","TACTICIAN","FLAMETHROWER","MAX_GAUGE","GCD_HEAT_GAIN","BARREL_STABILIZER_HEAT_GAIN","HYPERCHARGE_HEAT_COST","CLEAN_SHOT_BATTERY_GAIN","AIR_ANCHOR_BATTERY_GAIN","Gauge","_gauge","heat","waste","battery","_lastQueenCost","abilityId","SLUG_SHOT","CLEAN_SHOT","HEATED_SLUG_SHOT","HEATED_CLEAN_SHOT","_addGauge","SPLIT_SHOT","SPREAD_SHOT","_onOverheat","_onCleanShot","HOT_SHOT","AIR_ANCHOR","_onAirAnchor","ROOK_AUTOTURRET","_onQueen","to","_onDeath","_pushToHistory","t","y","amount","gauge","brokenLog","trigger","Math","max","5","30","75","10","50","heatColor","Color","batteryColor","chartdata","datasets","steppedLine","backgroundColor","fade","borderColor","yAxes","ticks","beginAtZero","min","lastQueenCost","OVERHEAT_DURATION_MILLIS","OVERHEAT_GCD_TARGET","OVERHEAT_GCD_WARNING","OVERHEAT_GCD_ERROR","Heat","_overheatWindows","_finishOverheatWindow","gcdCount","casts","cast","_formatGcdCount","count","panels","overheat","formatTimestamp","Message","HEAT_BLAST","Accordion","exclusive","styled","fluid","QUEEN_ATTACKS","ROLLER_DASH","ARM_PUNCH","PILE_BUNKER","BATTERY_TO_MILLIS_FACTOR","YassQueen","_queens","_onQueenCast","_onQueenAttack","_finishQueenWindow","cost","damage","missingBunkers","queen","3","REASSEMBLE_GCDS","AUTO_CROSSBOW","DRILL","BIOBLASTER","Reassemble","_badReassembles","_droppedReassembles","_lastConsumption","Number","STATUSES","REASSEMBLED","_onRemoveReassemble","combatants","selected","hasStatus","DEBUFF_APPLICATION_BUFFER","WILDFIRE_GCD_TARGET","WILDFIRE_GCD_WARNING","WILDFIRE_GCD_ERROR","Wildfire","_wildfireWindows","_onDamage","_onWildfireDamage","_onWildfireApplied","enemies","getEntity","targetID","targetId","_closeWildfireWindow","spoofed","badWildfires","wildfire","fizzledWildfires","_formatDamage"],"mappings":"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","file":"assets/jobs-mch.371bfaf6.js","sourcesContent":["import { matchClosestLower } from 'utilities';\nexport const SEVERITY = {\n    // NOTE: Don't use MORBID, It's for deaths. I _will_ block the PRs on this.\n    MORBID: 0,\n    MAJOR: 1,\n    MEDIUM: 2,\n    MINOR: 3,\n    // The matchClosest fall back to undefined, so let's use that for ignore too\n    IGNORE: undefined,\n};\nexport default class Suggestion {\n    constructor(options) {\n        this.icon = ''; // TODO: default image\n        this.content = '';\n        this.why = '';\n        this.severity = SEVERITY.MEDIUM;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n}\nexport class TieredSuggestion extends Suggestion {\n    constructor(options) {\n        super({\n            tiers: {},\n            value: 0,\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get severity() {\n        return this.matcher(this.tiers, this.value);\n    }\n    // noop setter so it doesn't die from the base class\n    set severity(value) { }\n}\n","import { __decorate } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Checkbox, Label } from 'semantic-ui-react';\n// Direct path import 'cus it'll be a dep loop otherwise\nimport { SEVERITY } from 'parser/core/modules/Suggestions/Suggestion';\nimport { SettingsStore } from 'store/settings';\nimport styles from './Suggestions.module.css';\nimport { StoreContext } from 'store';\nconst SEVERITY_LABEL_PROPS = {\n    [SEVERITY.MORBID]: { content: <Trans id=\"core.suggestions.severity.morbid\">Morbid</Trans>, color: 'black', icon: 'times' },\n    [SEVERITY.MAJOR]: { content: <Trans id=\"core.suggestions.severity.major\">Major</Trans>, color: 'red', icon: 'arrow up' },\n    [SEVERITY.MEDIUM]: { content: <Trans id=\"core.suggestions.severity.medium\">Medium</Trans>, color: 'orange' },\n    [SEVERITY.MINOR]: { content: <Trans id=\"core.suggestions.severity.minor\">Minor</Trans>, color: 'blue', icon: 'arrow down' },\n};\nlet Suggestions = class Suggestions extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onToggleShowMinor = (_, data) => {\n            const { settingsStore } = this.context;\n            settingsStore.setShowMinorSuggestions(data.checked);\n        };\n    }\n    render() {\n        const showMinor = this.context.settingsStore.showMinorSuggestions;\n        const suggestions = this.props.suggestions.filter(suggestion => showMinor || suggestion.severity !== SEVERITY.MINOR);\n        const hasMinor = this.props.suggestions.some(suggestion => suggestion.severity === SEVERITY.MINOR);\n        return <>\n\t\t\t{hasMinor && <Checkbox toggle label={<label><Trans id=\"core.suggestion.show-minor\">Show minor</Trans></label>} defaultChecked={showMinor} onChange={this.onToggleShowMinor} className={styles.checkbox}/>}\n\t\t\t<div className={styles.items}>\n\t\t\t\t{suggestions.map((suggestion, index) => <div key={index} className={styles.item}>\n\t\t\t\t\t<img src={suggestion.icon} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{suggestion.content}\n\t\t\t\t\t\t<div className={styles.extra}>\n\t\t\t\t\t\t\t<Label horizontal {...SEVERITY_LABEL_PROPS[suggestion.severity]}/>\n\t\t\t\t\t\t\t{suggestion.why}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>)}\n\t\t\t\t{suggestions.length === 0 && <div className={styles.item}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong><Trans id=\"core.suggestion.nothing\">There's nothing here!</Trans></strong><br />\n\t\t\t\t\t\t{hasMinor && <Trans id=\"core.suggestion.nothing-but-minor\">You can check over the minor suggestions by flicking the \"Show minor\" switch in the top right.</Trans>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t</>;\n    }\n};\nSuggestions.propTypes = {\n    settingsStore: PropTypes.instanceOf(SettingsStore),\n    suggestions: PropTypes.arrayOf(PropTypes.shape({\n        icon: PropTypes.string.isRequired,\n        content: PropTypes.node.isRequired,\n        why: PropTypes.node.isRequired,\n        severity: PropTypes.number.isRequired,\n    })).isRequired,\n};\nSuggestions.contextType = StoreContext;\nSuggestions = __decorate([\n    observer\n], Suggestions);\nexport default Suggestions;\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Suggestion, { SEVERITY } from './Suggestion';\nimport SuggestionsComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Suggestions extends Module {\n    constructor() {\n        super(...arguments);\n        this._suggestions = [];\n    }\n    add(suggestion) {\n        if (!(suggestion instanceof Suggestion)) {\n            console.error('TODO: Proper error message for passing a non-suggestion to the suggestion add handler');\n            return;\n        }\n        this._suggestions.push(suggestion);\n    }\n    output() {\n        // Only show the suggestions module if it's had things sent to it\n        if (this._suggestions.length === 0) {\n            return false;\n        }\n        // Sort suggestions with most important at the top, and remove ignored\n        const suggestions = this._suggestions\n            .filter(suggestion => suggestion.severity !== SEVERITY.IGNORE)\n            .sort((a, b) => a.severity - b.severity);\n        // Rendering is in a specialised component so it's got some state to work with\n        return <SuggestionsComponent suggestions={suggestions}/>;\n    }\n}\nSuggestions.handle = 'suggestions';\nSuggestions.displayOrder = DISPLAY_ORDER.SUGGESTIONS;\nSuggestions.displayMode = DISPLAY_MODE.FULL;\nSuggestions.title = t('core.suggestions.title') `Suggestions`;\n","export { default } from './Suggestions';\nexport { default as Suggestion } from './Suggestion';\nexport * from './Suggestion';\n","import cn from 'classnames';\nimport { ActionLink, ItemLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS, { ITEM_ID_OFFSET } from 'data/ACTIONS';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport styles from './Rotation.module.css';\nexport default class Rotation extends Component {\n    render() {\n        const { events } = this.props;\n        return <div className={styles.container}>\n\t\t\t{events.map((event, index) => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            // Don't bother showing the icon for autos\n            if (!action || action.autoAttack) {\n                return;\n            }\n            // Stuff like the duty action doesn't have an icon mapping yet.\n            // TODO: Sort this out if it's a problem\n            if (!action.icon) {\n                console.error(event, 'event ability has no icon');\n                return false;\n            }\n            const linkClassName = [\n                styles.link,\n                { [styles.ogcd]: !action.onGcd },\n            ];\n            const iconSize = action.onGcd ? styles.gcdSize : styles.ogcdSize;\n            const isItem = action.id >= ITEM_ID_OFFSET;\n            const Link = isItem ? ItemLink : ActionLink;\n            return <div key={index} className={cn(...linkClassName)}>\n\t\t\t\t\t<Link showName={false} iconSize={iconSize} {...action}/>\n\t\t\t\t</div>;\n        })}\n\t\t</div>;\n    }\n}\nRotation.propTypes = {\n    events: PropTypes.arrayOf(PropTypes.shape({\n        ability: PropTypes.shape({\n            guid: PropTypes.number.isRequired,\n        }).isRequired,\n    })).isRequired,\n};\n","import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import _ from 'lodash';\nimport Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\n// Track the cooldowns on actions and shit\nexport default class Cooldowns extends Module {\n    constructor(...args) {\n        super(...args);\n        this._cooldownGroups = {};\n        this._currentAction = null;\n        this._cooldowns = {};\n        this._groups = {};\n        this._cooldownGroups = _.groupBy(this.data.actions, 'cooldownGroup');\n        // Pre-build groups for actions explicitly set by subclasses\n        this._buildGroups(this.constructor.cooldownOrder);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _buildGroups(groups) {\n        // If there's no groups, noop\n        if (!groups) {\n            return;\n        }\n        const ids = groups.map((data, i) => {\n            const order = -(groups.length - i);\n            // If it's just an action id, build a group for it and stop\n            if (typeof data === 'number') {\n                const action = this.data.getAction(data);\n                this._buildGroup({\n                    id: data,\n                    content: action && action.name,\n                    order,\n                });\n                return data;\n            }\n            // Build the base group\n            const group = this._buildGroup({\n                id: data.name,\n                content: data.name,\n                order,\n            });\n            if (data.merge) {\n                // If it's a merge group, we only need to register our group for each of the IDs\n                data.actions.forEach(id => {\n                    this._groups[id] = group;\n                });\n            }\n            else {\n                // Otherwise, build nested groups for each action\n                group.nestedGroups = this._buildGroups(data.actions);\n            }\n            return data.name;\n        });\n        return ids;\n    }\n    _buildGroup(opts) {\n        const group = new ItemGroup({ showNested: false, ...opts });\n        this.timeline.addGroup(group);\n        this._groups[opts.id] = group;\n        return group;\n    }\n    // cooldown starts at the beginning of the casttime\n    // (though 99% of CD based abilities have no cast time)\n    // TODO: Should I be tracking pet CDs too? I mean, contagion/radiant are a thing.\n    _onBeginCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        this._currentAction = action;\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        const finishingCast = this._currentAction && this._currentAction.id === action.id;\n        this._currentAction = null;\n        if (finishingCast) {\n            return;\n        }\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onComplete() {\n        Object.keys(this._cooldowns).forEach(actionId => {\n            this._addToTimeline(parseInt(actionId, 10));\n        });\n    }\n    _addToTimeline(actionId) {\n        const cd = this._cooldowns[actionId];\n        if (!cd) {\n            return false;\n        }\n        // Clean out any 'current' cooldowns into the history\n        if (cd.current) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        const action = this.data.getAction(actionId);\n        // If the action is on the GCD, GlobalCooldown will be managing its own group\n        if (!action || action.onGcd) {\n            return false;\n        }\n        // Ensure we've got a group for this item\n        if (!this._groups[actionId]) {\n            this._buildGroup({\n                id: actionId,\n                content: action.name,\n                order: actionId,\n            });\n        }\n        // Add CD info to the timeline\n        cd.history\n            .forEach(use => {\n            if (!use.shared) {\n                this._groups[actionId].addItem(new Item({\n                    type: 'background',\n                    start: use.timestamp - this.parser.fight.start_time,\n                    length: use.length,\n                    content: <img src={action.icon} alt={action.name}/>,\n                }));\n            }\n        });\n        return true;\n    }\n    getCooldown(actionId) {\n        return this._cooldowns[actionId] || {\n            current: null,\n            history: [],\n        };\n    }\n    startCooldownGroup(originActionId, cooldownGroup) {\n        const sharedCooldownActions = _.get(this._cooldownGroups, cooldownGroup, []);\n        sharedCooldownActions\n            .map(action => action.id)\n            .filter(id => id !== originActionId)\n            .forEach(id => this.startCooldown(id, true));\n    }\n    startCooldown(actionId, sharedCooldown = false) {\n        // TODO: handle shared CDs\n        const action = this.data.getAction(actionId);\n        if (!action) {\n            return;\n        }\n        // Get the current cooldown status, falling back to a new cooldown\n        const cd = this.getCooldown(actionId);\n        // If there's a current object, move it into the history\n        // TODO: handle errors on CD overlap\n        if (cd.current) {\n            const currentFightDuration = this.parser.currentTimestamp - this.parser.fight.start_time;\n            if (cd.current.timestamp < this.parser.fight.start_time && cd.current.length > currentFightDuration) {\n                // Pre-pull usage, reset the cooldown to prevent overlap on timeline since we don't know exactly when cooldown was used pre-pull\n                this.resetCooldown(actionId);\n            }\n            else {\n                cd.history.push(cd.current);\n            }\n        }\n        cd.current = {\n            timestamp: this.parser.currentTimestamp,\n            length: action.cooldown * 1000,\n            shared: sharedCooldown,\n            invulnTime: 0,\n        };\n        // Save the info back out (to ensure propagation if we've got a new info)\n        this._cooldowns[actionId] = cd;\n    }\n    reduceCooldown(actionId, reduction) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        // Check if current isn't current\n        if (cd.current && cd.current.timestamp + cd.current.length < currentTimestamp) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        // TODO: Do I need to warn if they're reducing cooldown on something _with_ no cooldown?\n        if (cd.current === null) {\n            return;\n        }\n        // Reduce the CD\n        cd.current.length -= reduction * 1000;\n        // If the reduction would have made it come off CD earlier than now, reset it - the extra time reduction should be lost.\n        if (cd.current.timestamp + cd.current.length < currentTimestamp) {\n            this.resetCooldown(actionId);\n        }\n    }\n    setInvulnTime(actionId) {\n        const cd = this.getCooldown(actionId);\n        let previousEndTimestamp = this.parser.fight.start_time;\n        let previousCooldown = {};\n        let isFirst = true;\n        for (const cooldown of cd.history) {\n            if (isFirst) {\n                previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n                isFirst = false;\n                previousCooldown = cooldown;\n            }\n            //We invuln time is the time the boss was invuln from when the CD came off CD and when it was next executed\n            previousCooldown.invulnTime = this.downtime.getDowntime(previousEndTimestamp, cooldown.timestamp);\n            previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n            previousCooldown = cooldown;\n        }\n    }\n    resetCooldown(actionId) {\n        const cd = this.getCooldown(actionId);\n        // If there's nothing running, we can just stop\n        // TODO: need to warn?\n        if (cd.current === null) {\n            return;\n        }\n        // Fix up the length\n        cd.current.length = this.parser.currentTimestamp - cd.current.timestamp;\n        // Move the CD into the history\n        cd.history.push(cd.current);\n        cd.current = null;\n    }\n    getCooldownRemaining(actionId) {\n        const current = this.getCooldown(actionId).current;\n        if (!current) {\n            return 0;\n        }\n        return current.length - (this.parser.currentTimestamp - current.timestamp);\n    }\n    // TODO: Should this be here?\n    getTimeOnCooldown(actionId, considerInvulnTime = false, extension = 0) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        if (considerInvulnTime) {\n            this.setInvulnTime(actionId);\n        }\n        else {\n            cd.history.map(cooldown => {\n                cooldown.invulnTime = 0;\n            });\n        }\n        return cd.history.reduce((time, status) => time + this.getAdjustedTimeOnCooldown(status, currentTimestamp, extension), cd.current ? this.getAdjustedTimeOnCooldown(cd.current, currentTimestamp, extension) : 0);\n    }\n    getAdjustedTimeOnCooldown(cooldown, currentTimestamp, extension) {\n        // Doesn't count time on CD outside the bounds of the current fight, it'll throw calcs off\n        // Add to the length of the cooldown any invuln time for the boss\n        // Additionally account for any extension the caller allowed to the CD Length\n        const duration = currentTimestamp - cooldown.timestamp;\n        const maximumDuration = cooldown.length + cooldown.invulnTime + extension;\n        return _.clamp(duration, 0, maximumDuration);\n    }\n    get used() {\n        return Object.keys(this._cooldowns);\n    }\n}\nCooldowns.handle = 'cooldowns';\nCooldowns.dependencies = [\n    'data',\n    'downtime',\n    'timeline',\n];\n// Array used to sort cooldowns in the timeline. Elements should be either IDs for\n// top-level groups, or objects of the format {name: string, actions: array} for\n// nested groups. Actions not specified here will be sorted by their ID below.\n// Check the NIN and SMN modules for examples.\nCooldowns.cooldownOrder = [];\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Line } from 'react-chartjs-2';\nconst DEFAULT_OPTIONS = {\n    aspectRatio: 3,\n    scales: {\n        xAxes: [{\n                type: 'time',\n                time: {\n                    displayFormats: {\n                        minute: 'm:ss',\n                        second: 'm:ss',\n                        millisecond: 'm:ss.SS',\n                    },\n                    // This tooltip format displays similar to a \"relative\" timestamp,\n                    // since react assumes UNIX epoch timestamps for the data.\n                    tooltipFormat: 'mm:ss.SSS',\n                },\n            }],\n    },\n};\nexport default class TimeLineChart extends PureComponent {\n    render() {\n        const options = _.merge({}, DEFAULT_OPTIONS, this.props.options || {});\n        return <Line data={this.props.data} options={options} \n        // Using this trash 'cus aspectRatio doesn't work with the react wrapper\n        width={options.aspectRatio} height={1}/>;\n    }\n}\nTimeLineChart.propTypes = {\n    data: PropTypes.object.isRequired,\n    options: PropTypes.object,\n};\n","// If you can make it through this entire file without hitting semantic saturation of the word \"combo\", hats off to you. IT DOESN'T LOOK REAL ANYMORE.\nimport { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nconst DEFAULT_GCD = 2.5;\nconst GCD_TIMEOUT_MILLIS = 15000;\nconst ISSUE_TYPENAMES = {\n    uncomboed: <Trans id=\"core.combos.issuetypenames.uncomboed\">Uncomboed</Trans>,\n    combobreak: <Trans id=\"core.combos.issuetypenames.combobreak\">Broken Combo</Trans>,\n    failedcombo: <Trans id=\"core.combos.issuetypenames.failed\">Missed or Invulnerable</Trans>,\n};\nexport default class Combos extends Module {\n    constructor() {\n        super(...arguments);\n        this.lastGcdTime = this.parser.fight.start_time;\n        this.currentComboChain = [];\n        this.issues = [];\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    get lastComboEvent() {\n        return _.last(this.currentComboChain) || null;\n    }\n    get lastAction() {\n        const lastComboEvent = this.lastComboEvent;\n        if (!lastComboEvent) {\n            return null;\n        }\n        return lastComboEvent.ability.guid;\n    }\n    get comboBreakers() {\n        return this.issues\n            .filter(issue => issue.type === 'combobreak')\n            .map(issue => issue.event);\n    }\n    get uncomboedGcds() {\n        return this.issues\n            .filter(issue => issue.type === 'uncomboed')\n            .map(issue => issue.event);\n    }\n    fabricateComboEvent(event) {\n        const combo = {\n            ...event,\n            type: 'combo',\n        };\n        delete combo.timestamp; // Since fabricateEvent adds that in anyway\n        this.parser.fabricateEvent(combo);\n    }\n    recordBrokenCombo(event, context) {\n        if (!this.isAllowableComboBreak(event, context)) {\n            this.issues.push({\n                type: 'combobreak',\n                event,\n                context,\n            });\n        }\n        this.currentComboChain = [];\n    }\n    recordUncomboedGcd(event) {\n        this.issues.push({\n            type: 'uncomboed',\n            event,\n            context: [],\n        });\n        this.currentComboChain = [];\n    }\n    recordFailedCombo(event, context) {\n        this.issues.push({\n            type: 'failedcombo',\n            event,\n            context,\n        });\n        this.currentComboChain = [];\n    }\n    /**\n     *\n     * @param combo\n     * @param event\n     * @return true if combo, false otherwise\n     */\n    checkCombo(combo /* Should be an Action type */, event) {\n        // Not in a combo\n        if (this.lastAction == null) {\n            // Combo starter, we good\n            if (combo.start) {\n                this.fabricateComboEvent(event);\n                return true;\n            }\n            // Combo action that isn't a starter, that's a paddlin'\n            if (combo.from) {\n                this.recordUncomboedGcd(event);\n                return false;\n            }\n        }\n        if (combo.start) {\n            // Broken combo - starting a new combo while in a current combo\n            this.recordBrokenCombo(event, this.currentComboChain);\n            return true; // Start a new combo\n        }\n        // Check if action continues existing combo\n        if (combo.from) {\n            const fromOptions = Array.isArray(combo.from) ? combo.from : [combo.from];\n            if (fromOptions.includes(this.lastAction)) {\n                // Combo continued correctly\n                this.fabricateComboEvent(event);\n                // If it's a finisher, reset the combo\n                return !combo.end;\n            }\n        }\n        // Action did not continue combo correctly and is not a new combo starter\n        this.recordBrokenCombo(event, this.currentComboChain);\n        return false;\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action) {\n            return;\n        }\n        // Only track GCDs that either progress or break combos so actions like Drill and Shadow Fang don't falsely extend the simulated combo timer\n        if (action.onGcd && (action.combo || action.breaksCombo)) {\n            if (event.timestamp - this.lastGcdTime > GCD_TIMEOUT_MILLIS) {\n                // If we've had enough downtime between GCDs to let the combo expire, reset the state so we don't count erroneous combo breaks\n                this.currentComboChain = [];\n            }\n            this.lastGcdTime = event.timestamp;\n        }\n        // If it's a combo action, run it through the combo checking logic\n        if (action.combo) {\n            if (!event.successfulHit) {\n                // Failed attacks break combo\n                this.recordFailedCombo(event, this.currentComboChain);\n                return;\n            }\n            const continueCombo = this.checkCombo(action.combo, event);\n            if (continueCombo) {\n                this.currentComboChain.push(event);\n            }\n            else {\n                this.currentComboChain = [];\n            }\n        }\n        if (action.breaksCombo && this.lastAction !== null) {\n            // Combo breaking action, that's a paddlin'\n            this.recordBrokenCombo(event, this.currentComboChain);\n        }\n    }\n    onComplete() {\n        if (this.addJobSpecificSuggestions(this.comboBreakers, this.uncomboedGcds)) {\n            return;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.constructor.suggestionIcon,\n            content: <Trans id=\"core.combos.content\">\n\t\t\t\t<p>Avoid breaking combos, as failing to complete combos costs you a significant amount of DPS and important secondary effects.</p>\n\t\t\t\t<p>Using a combo GCD at the wrong combo step, using non-combo GCDs while inside a combo, missing, or attacking a target that is invulnerable will cause your combo to break.</p>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.issues.length,\n            why: <Plural id=\"core.combos.why\" value={this.issues.length} one=\"You misused # combo action.\" other=\"You misused # combo actions.\"/>,\n        }));\n    }\n    /**\n     * To be overridden by subclasses. This is called in _onComplete() and passed two arrays of event objects - one for events that\n     * broke combos, and one for combo GCDs used outside of combos. Subclassing modules can add job-specific suggestions based on\n     * what particular actions were misused and when in the fight.\n     * The overriding module should return true if the default suggestion is not wanted\n     */\n    addJobSpecificSuggestions(comboBreakers, uncomboedGcds) {\n        return false;\n    }\n    /**\n     * To be overridden by subclasses. This is called in recordBrokenCombo, and receives the event triggering the broken combo,\n     * and the context information for that break. Jobs can override this to indicate whether this broken combo is allowed. If so,\n     * the event and context will not be recorded, and the current combo will be cleared with no other side effects.\n     * Returning false will allow the break to be recorded, and displayed to the user\n     */\n    isAllowableComboBreak(event, context) {\n        return false;\n    }\n    output() {\n        if (this.issues.length <= 0) {\n            return false;\n        }\n        // Access Alias\n        const startTime = this.parser.fight.start_time;\n        const data = this.issues\n            .sort((a, b) => a.event.timestamp - b.event.timestamp)\n            .map(issue => {\n            const completeContext = [...(issue.context || []), issue.event];\n            const startEvent = _.first(completeContext);\n            const endEvent = _.last(completeContext);\n            const startAction = this.data.getAction(startEvent.ability.guid);\n            const endAction = this.data.getAction(endEvent.ability.guid);\n            return ({\n                start: startEvent.timestamp - startTime + (startAction?.cooldown ?? DEFAULT_GCD),\n                end: endEvent.timestamp - startTime + (endAction?.cooldown ?? DEFAULT_GCD),\n                rotation: completeContext,\n                notesMap: {\n                    reason: <span style={{ whiteSpace: 'nowrap' }}>{ISSUE_TYPENAMES[issue.type]}</span>,\n                },\n            });\n        });\n        return <RotationTable notes={[\n            {\n                header: <Trans id=\"core.combos.rotationtable.header.reason\">Reason</Trans>,\n                accessor: 'reason',\n            },\n        ]} data={data} onGoto={this.timeline.show}/>;\n    }\n}\nCombos.handle = 'combos';\nCombos.title = t('core.combos.title') `Combo Issues`;\nCombos.displayOrder = DISPLAY_ORDER.COMBOS;\n// This should be redefined by subclassing modules; the default is the basic 'Attack' icon\nCombos.suggestionIcon = 'https://xivapi.com/i/000000/000405.png';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], Combos.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Combos.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Combos.prototype, \"timeline\", void 0);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gcdSize\":\"40px\",\"ogcdSize\":\"30px\",\"container\":\"Rotation-module_container__32KS2\",\"link\":\"Rotation-module_link__2T3fu\",\"ogcd\":\"Rotation-module_ogcd__3oBO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gutter\":\"20px\",\"checkbox\":\"Suggestions-module_checkbox__1Z22N\",\"items\":\"Suggestions-module_items__3sCkP\",\"item\":\"Suggestions-module_item__1yy1-\",\"extra\":\"Suggestions-module_extra__3WN2d\"};","import CoreCombos from 'parser/core/modules/Combos';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Combos extends CoreCombos {\n}\n// Overrides\nCombos.suggestionIcon = ACTIONS.HEATED_SPLIT_SHOT.icon;\n","import CoreCooldowns from 'parser/core/modules/Cooldowns';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    ACTIONS.WILDFIRE.id,\n    ACTIONS.GAUSS_ROUND.id,\n    ACTIONS.RICOCHET.id,\n    ACTIONS.HYPERCHARGE.id,\n    ACTIONS.BARREL_STABILIZER.id,\n    ACTIONS.REASSEMBLE.id,\n    ACTIONS.AUTOMATON_QUEEN.id,\n    ACTIONS.QUEEN_OVERDRIVE.id,\n    ACTIONS.TACTICIAN.id,\n    ACTIONS.FLAMETHROWER.id,\n];\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport Color from 'color';\nimport TimeLineChart from 'components/ui/TimeLineChart';\n// Constants\nconst MAX_GAUGE = 100;\nconst GCD_HEAT_GAIN = 5;\nconst BARREL_STABILIZER_HEAT_GAIN = 50;\nconst HYPERCHARGE_HEAT_COST = 50;\nconst CLEAN_SHOT_BATTERY_GAIN = 10;\nconst AIR_ANCHOR_BATTERY_GAIN = 20;\nexport default class Gauge extends Module {\n    constructor(...args) {\n        super(...args);\n        this._gauge = {\n            heat: {\n                current: 0,\n                waste: 0,\n                history: [],\n            },\n            battery: {\n                current: 0,\n                waste: 0,\n                history: [],\n            },\n        };\n        this._lastQueenCost = 0;\n        this.addHook('combo', { by: 'player', abilityId: [ACTIONS.SLUG_SHOT.id, ACTIONS.CLEAN_SHOT.id, ACTIONS.HEATED_SLUG_SHOT.id, ACTIONS.HEATED_CLEAN_SHOT.id] }, () => this._addGauge('heat', GCD_HEAT_GAIN));\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.SPLIT_SHOT.id, ACTIONS.HEATED_SPLIT_SHOT.id, ACTIONS.SPREAD_SHOT.id] }, () => this._addGauge('heat', GCD_HEAT_GAIN));\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.BARREL_STABILIZER.id }, () => this._addGauge('heat', BARREL_STABILIZER_HEAT_GAIN));\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.HYPERCHARGE.id }, this._onOverheat);\n        this.addHook('combo', { by: 'player', abilityId: [ACTIONS.CLEAN_SHOT.id, ACTIONS.HEATED_CLEAN_SHOT.id] }, this._onCleanShot);\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.HOT_SHOT.id, ACTIONS.AIR_ANCHOR.id] }, this._onAirAnchor);\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.ROOK_AUTOTURRET.id, ACTIONS.AUTOMATON_QUEEN.id] }, this._onQueen);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    _pushToHistory(type) {\n        const timestamp = this.parser.currentTimestamp - this.parser.fight.start_time;\n        this._gauge[type].history.push({ t: timestamp, y: this._gauge[type].current });\n    }\n    _addGauge(type, amount) {\n        const gauge = this._gauge[type];\n        gauge.current += amount;\n        if (gauge.current >= MAX_GAUGE) {\n            gauge.waste += (gauge.current - MAX_GAUGE);\n            gauge.current = MAX_GAUGE;\n        }\n        this._pushToHistory(type);\n    }\n    _onOverheat() {\n        if (this._gauge.heat.current < HYPERCHARGE_HEAT_COST) {\n            this.brokenLog.trigger(this, 'negative heat', (<Trans id=\"mch.gauge.trigger.negative-heat\">\n\t\t\t\t\t<ActionLink {...ACTIONS.HYPERCHARGE}/> was used when the simulated Heat gauge was at {this._gauge.heat.current}.\n\t\t\t\t</Trans>));\n        }\n        this._gauge.heat.current = Math.max(this._gauge.heat.current - HYPERCHARGE_HEAT_COST, 0);\n        this._pushToHistory('heat');\n    }\n    _onCleanShot() {\n        this._addGauge('battery', CLEAN_SHOT_BATTERY_GAIN);\n    }\n    _onAirAnchor() {\n        this._addGauge('battery', AIR_ANCHOR_BATTERY_GAIN);\n    }\n    _onQueen() {\n        this._lastQueenCost = this._gauge.battery.current;\n        this._gauge.battery.current = 0;\n        this._pushToHistory('battery');\n    }\n    _onDeath() {\n        this._gauge.heat.current = 0;\n        this._gauge.battery.current = 0;\n    }\n    _onComplete() {\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.HYPERCHARGE.icon,\n            content: <Trans id=\"mch.gauge.suggestions.heat-waste.content\">\n\t\t\t\tTry not to let your Heat gauge overcap, as it may cost you Overheat windows over the course of the fight.\n\t\t\t</Trans>,\n            tiers: {\n                // TODO - Proper tiers\n                5: SEVERITY.MINOR,\n                30: SEVERITY.MEDIUM,\n                75: SEVERITY.MAJOR,\n            },\n            value: this._gauge.heat.waste,\n            why: <Trans id=\"mch.gauge.suggestions.heat-waste.why\">\n\t\t\t\tYou lost {this._gauge.heat.waste} Heat to an overcapped gauge.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.AUTOMATON_QUEEN.icon,\n            content: <Trans id=\"mch.gauge.suggestions.battery-waste.content\">\n\t\t\t\tTry not to let your Battery gauge overcap, as it may cost you <ActionLink {...ACTIONS.AUTOMATON_QUEEN}/> uses over the course of the fight.\n\t\t\t</Trans>,\n            tiers: {\n                // TODO - Proper tiers\n                10: SEVERITY.MINOR,\n                30: SEVERITY.MEDIUM,\n                50: SEVERITY.MAJOR,\n            },\n            value: this._gauge.battery.waste,\n            why: <Trans id=\"mch.gauge.suggestions.battery-waste.why\">\n\t\t\t\tYou lost {this._gauge.battery.waste} Battery to an overcapped gauge.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        const heatColor = Color('#D35A10');\n        const batteryColor = Color('#2C9FCB');\n        /* eslint-disable no-magic-numbers */\n        const chartdata = {\n            datasets: [\n                {\n                    label: 'Heat',\n                    steppedLine: true,\n                    data: this._gauge.heat.history,\n                    backgroundColor: heatColor.fade(0.8),\n                    borderColor: heatColor.fade(0.5),\n                },\n                {\n                    label: 'Battery',\n                    steppedLine: true,\n                    data: this._gauge.battery.history,\n                    backgroundColor: batteryColor.fade(0.8),\n                    borderColor: batteryColor.fade(0.5),\n                },\n            ],\n        };\n        /* eslint-enable no-magic-numbers */\n        const options = {\n            scales: {\n                yAxes: [{\n                        ticks: {\n                            beginAtZero: true,\n                            min: 0,\n                            max: 100,\n                        },\n                    }],\n            },\n        };\n        return <Fragment>\n\t\t\t<TimeLineChart data={chartdata} options={options}/>\n\t\t</Fragment>;\n    }\n    lastQueenCost() { return this._lastQueenCost; }\n}\nGauge.handle = 'gauge';\nGauge.title = t('mch.gauge.title') `Heat & Battery Gauge`;\nGauge.dependencies = [\n    'brokenLog',\n    'suggestions',\n];\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Accordion, Message } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Rotation from 'components/ui/Rotation';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\n// Constants\nconst OVERHEAT_DURATION_MILLIS = 8000;\nconst OVERHEAT_GCD_TARGET = 5;\nconst OVERHEAT_GCD_WARNING = 4;\nconst OVERHEAT_GCD_ERROR = 0;\nexport default class Heat extends Module {\n    constructor(...args) {\n        super(...args);\n        this._overheatWindows = {\n            current: null,\n            history: [],\n        };\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.HYPERCHARGE.id }, this._onOverheat);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    _finishOverheatWindow() {\n        if (this._overheatWindows.current) {\n            this._overheatWindows.current.gcdCount = this._overheatWindows.current.casts.filter(cast => {\n                const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n                return action && action.onGcd;\n            }).length;\n            this._overheatWindows.history.push(this._overheatWindows.current);\n            this._overheatWindows.current = null;\n        }\n    }\n    _onCast(event) {\n        if (this._overheatWindows.current === null) {\n            return;\n        }\n        if (event.timestamp > (this._overheatWindows.current.start + OVERHEAT_DURATION_MILLIS)) {\n            this._finishOverheatWindow();\n            return;\n        }\n        this._overheatWindows.current.casts.push({ ...event });\n    }\n    _onOverheat(event) {\n        this._finishOverheatWindow(); // Just in case; should happen rarely (if ever) in practice but I'd rather not clobber a window entirely\n        this._overheatWindows.current = {\n            start: event.timestamp,\n            casts: [],\n        };\n    }\n    _onDeath() {\n        this._finishOverheatWindow();\n    }\n    _onComplete() {\n        // TODO - Make this not actually yell about short windows if it's at the end of a fight?\n        this._finishOverheatWindow();\n    }\n    _formatGcdCount(count) {\n        if (count === OVERHEAT_GCD_ERROR) {\n            return <span className=\"text-error\">{count}</span>;\n        }\n        if (count <= OVERHEAT_GCD_WARNING) {\n            return <span className=\"text-warning\">{count}</span>;\n        }\n        return count;\n    }\n    output() {\n        const panels = this._overheatWindows.history.map(overheat => {\n            return {\n                title: {\n                    key: 'title-' + overheat.start,\n                    content: <Fragment>\n\t\t\t\t\t\t{this.parser.formatTimestamp(overheat.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t{this._formatGcdCount(overheat.gcdCount)}/{OVERHEAT_GCD_TARGET} <Plural id=\"mch.heat.panel-count\" value={overheat.gcdCount} one=\"GCD\" other=\"GCDs\"/>\n\t\t\t\t\t</Fragment>,\n                },\n                content: {\n                    key: 'content-' + overheat.start,\n                    content: <Rotation events={overheat.casts}/>,\n                },\n            };\n        });\n        return <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.heat.accordion.message\">Every overheat window should ideally include {OVERHEAT_GCD_TARGET} casts of <ActionLink {...ACTIONS.HEAT_BLAST}/> and enough casts of <ActionLink {...ACTIONS.GAUSS_ROUND}/> and <ActionLink {...ACTIONS.RICOCHET}/> to avoid overcapping their charges. If you clip a lot while weaving, overcapping is still preferable to dropping a Heat Blast. Each overheat window below indicates how many GCDs it contained and will display all the casts in the window if expanded.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion exclusive={false} panels={panels} styled fluid/>\n\t\t</Fragment>;\n    }\n}\nHeat.handle = 'heat';\nHeat.title = t('mch.heat.title') `Overheat Windows`;\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Accordion, Message } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Rotation from 'components/ui/Rotation';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\n// Constants\nconst QUEEN_ATTACKS = [\n    ACTIONS.ROLLER_DASH.id,\n    ACTIONS.ARM_PUNCH.id,\n    ACTIONS.PILE_BUNKER.id,\n];\nconst BATTERY_TO_MILLIS_FACTOR = 200; // Duration = Battery/5 seconds, or Battery*200 milliseconds\nexport default class YassQueen extends Module {\n    constructor(...args) {\n        super(...args);\n        this._queens = {\n            current: null,\n            history: [],\n        };\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.AUTOMATON_QUEEN.id }, this._onQueenCast);\n        this.addHook('damage', { by: 'pet', abilityId: QUEEN_ATTACKS }, this._onQueenAttack);\n        this.addHook('complete', this._onComplete);\n    }\n    _finishQueenWindow() {\n        if (this._queens.current) {\n            this._queens.history.push(this._queens.current);\n            this._queens.current = null;\n        }\n    }\n    _onQueenCast(event) {\n        this._finishQueenWindow(); // Just in case\n        this._queens.current = {\n            start: event.timestamp,\n            casts: [],\n            cost: this.gauge.lastQueenCost(),\n            damage: 0,\n        };\n    }\n    _onQueenAttack(event) {\n        if (this._queens.current === null) {\n            // How tho\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            this.brokenLog.trigger(this, 'queenless queen attack', (<Trans id=\"mch.queen.trigger.queenless-queen-attack\">\n\t\t\t\t\tA cast of <ActionLink {...action}/> was recorded without the Automaton Queen on the field.\n\t\t\t\t</Trans>));\n            return;\n        }\n        this._queens.current.casts.push({ ...event });\n        this._queens.current.damage += event.amount;\n        if (event.ability.guid === ACTIONS.PILE_BUNKER.id) {\n            this._finishQueenWindow();\n        }\n    }\n    _onComplete() {\n        this._finishQueenWindow();\n        const missingBunkers = this._queens.history.filter(queen => queen.casts.length && queen.casts[queen.casts.length - 1].ability.guid !== ACTIONS.PILE_BUNKER.id).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.AUTOMATON_QUEEN.icon,\n            content: <Trans id=\"mch.queen.suggestions.missing-bunker.content\">\n\t\t\t\tTry to time your <ActionLink {...ACTIONS.AUTOMATON_QUEEN}/> windows so that they end while the boss is targetable, as Pile Bunker is a significant chunk of its damage. If the boss is about to jump or die, use <ActionLink {...ACTIONS.QUEEN_OVERDRIVE}/> to end it early and get the hit in.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: missingBunkers,\n            why: <Trans id=\"mch.queen.suggestions.missing-bunker.why\">\n\t\t\t\t{missingBunkers} of your Automaton Queen windows ended without a Pile Bunker.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        const panels = this._queens.history.map(queen => {\n            return {\n                title: {\n                    key: 'title-' + queen.start,\n                    content: <Fragment>\n\t\t\t\t\t\t{this.parser.formatTimestamp(queen.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t{queen.cost} Battery spent ({this.parser.formatDuration(queen.cost * BATTERY_TO_MILLIS_FACTOR)}), {queen.damage} total damage\n\t\t\t\t\t</Fragment>,\n                },\n                content: {\n                    key: 'content-' + queen.start,\n                    content: <Rotation events={queen.casts}/>,\n                },\n            };\n        });\n        return <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.queen.accordion.message\">The list below contains every <ActionLink {...ACTIONS.AUTOMATON_QUEEN}/> window from the fight, indicating when it started, its Battery cost and duration, and how much total damage the Queen did to its target. Expanding an individual window below will display every cast by the Automaton Queen made during it.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion exclusive={false} panels={panels} styled fluid/>\n\t\t</Fragment>;\n    }\n}\nYassQueen.handle = 'queen';\nYassQueen.title = t('mch.queen.title') `Automaton Queen Usage`;\nYassQueen.dependencies = [\n    'brokenLog',\n    'gauge',\n    'suggestions',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\n// The values in this const will be added to the bad use count as they're cast (hence Drill/Anchor being 0)\nconst REASSEMBLE_GCDS = {\n    [ACTIONS.HEATED_SPLIT_SHOT.id]: 1,\n    [ACTIONS.HEATED_SLUG_SHOT.id]: 1,\n    [ACTIONS.HEATED_CLEAN_SHOT.id]: 1,\n    [ACTIONS.HEAT_BLAST.id]: 1,\n    [ACTIONS.AUTO_CROSSBOW.id]: 1,\n    [ACTIONS.DRILL.id]: 0,\n    [ACTIONS.BIOBLASTER.id]: 1,\n    [ACTIONS.AIR_ANCHOR.id]: 0,\n};\nexport default class Reassemble extends Module {\n    constructor(...args) {\n        super(...args);\n        this._badReassembles = 0;\n        this._droppedReassembles = 0;\n        this._lastConsumption = 0;\n        this.addHook('cast', { by: 'player', abilityId: Object.keys(REASSEMBLE_GCDS).map(Number) }, this._onCast);\n        this.addHook('removedebuff', { by: 'player', abilityId: STATUSES.REASSEMBLED.id }, this._onRemoveReassemble);\n        this.addHook('complete', this._onComplete);\n    }\n    _onCast(event) {\n        if (this.combatants.selected.hasStatus(STATUSES.REASSEMBLED.id)) {\n            this._badReassembles += REASSEMBLE_GCDS[event.ability.guid];\n            this._lastConsumption = event.timestamp;\n        }\n    }\n    _onRemoveReassemble(event) {\n        if (event.timestamp !== this._lastConsumption) {\n            this._droppedReassembles++;\n        }\n    }\n    _onComplete() {\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.REASSEMBLE.icon,\n            content: <Trans id=\"mch.reassemble.suggestions.bad-gcds.content\">\n\t\t\t\tOn single targets, <ActionLink {...ACTIONS.REASSEMBLE}/> should only ever be used on <ActionLink {...ACTIONS.DRILL}/> and <ActionLink {...ACTIONS.AIR_ANCHOR}/>, as they're your strongest GCDs by a large margin.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                2: SEVERITY.MAJOR,\n            },\n            value: this._badReassembles,\n            why: <Trans id=\"mch.reassemble.suggestions.bad-gcds.why\">\n\t\t\t\tYou used Reassemble on a non-optimal GCD <Plural value={this._badReassembles} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.REASSEMBLE.icon,\n            content: <Trans id=\"mch.reassemble.suggestions.dropped.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.REASSEMBLE}/> when a boss is about to go untargetable so you don't waste the buff.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                2: SEVERITY.MAJOR,\n            },\n            value: this._droppedReassembles,\n            why: <Trans id=\"mch.reassemble.suggestions.dropped.why\">\n\t\t\t\tYou allowed Reassemble to fall off unused <Plural value={this._droppedReassembles} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n    }\n}\nReassemble.handle = 'reassemble';\nReassemble.dependencies = [\n    'combatants',\n    'suggestions',\n];\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Accordion, Message } from 'semantic-ui-react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport Rotation from 'components/ui/Rotation';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nconst DEBUFF_APPLICATION_BUFFER = 1000; // Buffer for the empty window check, since debuff applications always happen 9 times in the logs for some ungodly reason\nconst WILDFIRE_GCD_TARGET = 6;\nconst WILDFIRE_GCD_WARNING = 5;\nconst WILDFIRE_GCD_ERROR = 0;\nexport default class Wildfire extends Module {\n    constructor(...args) {\n        super(...args);\n        this._wildfireWindows = {\n            current: null,\n            history: [],\n        };\n        this.addHook('damage', { by: 'player' }, this._onDamage);\n        this.addHook('damage', { by: 'player', abilityId: STATUSES.WILDFIRE.id }, this._onWildfireDamage);\n        this.addHook('applydebuff', { by: 'player', abilityId: STATUSES.WILDFIRE.id }, this._onWildfireApplied);\n        this.addHook('complete', this._onComplete);\n    }\n    _onDamage(event) {\n        const target = this.enemies.getEntity(event.targetID);\n        if (target && target.hasStatus(STATUSES.WILDFIRE.id) && // Target has WF on them\n            this._wildfireWindows.current !== null && // And we're in a WF window (in case there are multiple MCHs)\n            this._wildfireWindows.current.targetId === event.targetID) { // And we're hitting the WF-afflicted target\n            this._wildfireWindows.current.casts.push({ ...event });\n        }\n    }\n    _closeWildfireWindow(damage) {\n        this._wildfireWindows.current.gcdCount = this._wildfireWindows.current.casts.filter(cast => {\n            const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n            return action && action.onGcd;\n        }).length;\n        this._wildfireWindows.current.damage = damage;\n        this._wildfireWindows.history.push(this._wildfireWindows.current);\n        this._wildfireWindows.current = null;\n    }\n    _onWildfireDamage(event) {\n        if (this._wildfireWindows.current !== null) {\n            this._closeWildfireWindow(event.amount);\n        }\n        else {\n            // Something fucky this way comes - we got a WF damage event without a corresponding applydebuff, which means the log is probably jank.\n            // Create a fake window so we still display time/damage and notify the \"broken log\" module.\n            this.brokenLog.trigger(this, 'no buff wf', (<Trans id=\"mch.wildfire.trigger.no-buff-wf\">\n\t\t\t\t\t<ActionLink {...ACTIONS.WILDFIRE}/> damage was recorded without a corresponding <StatusLink {...STATUSES.WILDFIRE}/> debuff.\n\t\t\t\t</Trans>));\n            this._wildfireWindows.history.push({\n                spoofed: true,\n                start: event.timestamp - (STATUSES.WILDFIRE.duration * 1000),\n                damage: event.amount,\n            });\n        }\n    }\n    _onWildfireApplied(event) {\n        if (this._wildfireWindows.current && this._wildfireWindows.current.start + DEBUFF_APPLICATION_BUFFER < event.timestamp) {\n            // We have an unfinished WF window; the lack of a damage event to close it implies that it fizzled due to downtime, so track that\n            this._closeWildfireWindow(0);\n        }\n        this._wildfireWindows.current = {\n            start: event.timestamp,\n            casts: [],\n            targetId: event.targetID,\n        };\n    }\n    _onComplete() {\n        const badWildfires = this._wildfireWindows.history.filter(wildfire => wildfire.gcdCount < WILDFIRE_GCD_TARGET).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.WILDFIRE.icon,\n            content: <Trans id=\"mch.wildfire.suggestions.cooldown.content\">\n\t\t\t\tTry to ensure you have an Overheat window prepared for every <ActionLink {...ACTIONS.WILDFIRE}/> cast to maximize damage. Each GCD in a Wildfire window is worth 200 potency, so maximizing the GCD count with <ActionLink {...ACTIONS.HEAT_BLAST}/> is important.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: badWildfires,\n            why: <Trans id=\"mch.wildfire.suggestions.cooldown.why\">\n\t\t\t\t{badWildfires} of your Wildfire windows contained fewer than {WILDFIRE_GCD_TARGET} GCDs.\n\t\t\t</Trans>,\n        }));\n        const fizzledWildfires = this._wildfireWindows.history.filter(wildfire => wildfire.damage === 0).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.WILDFIRE.icon,\n            content: <Trans id=\"mch.wildfire.suggestions.fizzle.content\">\n\t\t\t\tBe careful to time your <ActionLink {...ACTIONS.WILDFIRE}/> windows so that the damage resolves during uptime, or detonate them early if necessary to at least get partial potency.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                2: SEVERITY.MAJOR,\n            },\n            value: fizzledWildfires,\n            why: <Trans id=\"mch.wildfire.suggestions.fizzle.why\">\n\t\t\t\t{fizzledWildfires} of your Wildfire windows resolved for 0 damage.\n\t\t\t</Trans>,\n        }));\n    }\n    _formatGcdCount(count) {\n        if (count === WILDFIRE_GCD_ERROR) {\n            return <span className=\"text-error\">{count}</span>;\n        }\n        if (count <= WILDFIRE_GCD_WARNING) {\n            return <span className=\"text-warning\">{count}</span>;\n        }\n        return count;\n    }\n    _formatDamage(damage) {\n        if (damage === 0) {\n            return <span className=\"text-error\">{damage}</span>;\n        }\n        return damage;\n    }\n    output() {\n        const panels = this._wildfireWindows.history.map(wildfire => {\n            if (wildfire.spoofed) {\n                return {\n                    title: {\n                        key: 'title-' + wildfire.start,\n                        content: <Fragment>\n\t\t\t\t\t\t\t{this.parser.formatTimestamp(wildfire.start)}\n\t\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t\t<Trans id=\"mch.wildfire.panel-count-spoofed\">\n\t\t\t\t\t\t\t\t? GCDs, {wildfire.damage} damage\n\t\t\t\t\t\t\t</Trans>\n\t\t\t\t\t\t</Fragment>,\n                    },\n                    content: {\n                        key: 'content-' + wildfire.start,\n                        content: <img src=\"https://xivapi.com/i/064000/064033.png\"/>,\n                    },\n                };\n            }\n            return {\n                title: {\n                    key: 'title-' + wildfire.start,\n                    content: <Fragment>\n\t\t\t\t\t\t{this.parser.formatTimestamp(wildfire.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t<Trans id=\"mch.wildfire.panel-count\">\n\t\t\t\t\t\t\t{this._formatGcdCount(wildfire.gcdCount)} <Plural value={wildfire.gcdCount} one=\"GCD\" other=\"GCDs\"/>, {this._formatDamage(wildfire.damage)} damage\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Fragment>,\n                },\n                content: {\n                    key: 'content-' + wildfire.start,\n                    content: <Rotation events={wildfire.casts}/>,\n                },\n            };\n        });\n        return <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"mch.wildfire.accordion.message\">Every <ActionLink {...ACTIONS.WILDFIRE}/> window should ideally contain at least {WILDFIRE_GCD_TARGET} GCDs to maximize its potency. Each Wildfire window below indicates how many GCDs it contained and the total damage it hit for, and will display all the damaging casts in the window if expanded.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion exclusive={false} panels={panels} styled fluid/>\n\t\t</Fragment>;\n    }\n}\nWildfire.handle = 'wildfire';\nWildfire.title = t('mch.wildfire.title') `Wildfire`;\nWildfire.dependencies = [\n    'brokenLog',\n    'enemies',\n    'suggestions',\n];\n","import Combos from './Combos';\nimport Cooldowns from './Cooldowns';\nimport Gauge from './Gauge';\nimport Heat from './Heat';\nimport YassQueen from './YassQueen';\nimport Reassemble from './Reassemble';\nimport Wildfire from './Wildfire';\nexport default [\n    Combos,\n    Cooldowns,\n    Gauge,\n    Heat,\n    Reassemble,\n    Wildfire,\n    YassQueen,\n];\n"],"sourceRoot":""}
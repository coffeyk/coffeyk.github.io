{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/modules/Cooldowns.js","webpack:///./src/parser/core/modules/Combos.tsx","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/core/modules/DoTs.js","webpack:///./src/parser/jobs/drg/modules/DISPLAY_ORDER.js","webpack:///./src/parser/jobs/drg/modules/BloodOfTheDragon.js","webpack:///./src/parser/jobs/drg/modules/Buffs.js","webpack:///./src/parser/jobs/drg/modules/Combos.js","webpack:///./src/parser/jobs/drg/modules/Cooldowns.js","webpack:///./src/parser/jobs/drg/modules/Debuffs.js","webpack:///./src/parser/jobs/drg/modules/OGCDDowntime.ts","webpack:///./src/parser/jobs/drg/modules/Positionals.js","webpack:///./src/parser/jobs/drg/modules/Procs.js","webpack:///./src/parser/jobs/drg/modules/Weaving.js","webpack:///./src/parser/jobs/drg/modules/index.js"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","Cooldowns","Module","constructor","super","_cooldownGroups","_currentAction","_cooldowns","_groups","actions","_buildGroups","cooldownOrder","addHook","by","_onBeginCast","_onCast","_onComplete","groups","order","length","action","getAction","_buildGroup","content","name","group","merge","forEach","nestedGroups","opts","ItemGroup","showNested","timeline","addGroup","event","ability","guid","cooldown","startCooldown","cooldownGroup","startCooldownGroup","finishingCast","Object","keys","actionId","_addToTimeline","parseInt","cd","current","history","push","onGcd","use","shared","addItem","Item","type","timestamp","parser","fight","start_time","src","alt","getCooldown","originActionId","filter","sharedCooldown","currentFightDuration","currentTimestamp","resetCooldown","invulnTime","reduceCooldown","reduction","setInvulnTime","previousEndTimestamp","previousCooldown","isFirst","downtime","getDowntime","getCooldownRemaining","getTimeOnCooldown","considerInvulnTime","extension","reduce","time","status","getAdjustedTimeOnCooldown","duration","maximumDuration","handle","dependencies","DEFAULT_GCD","GCD_TIMEOUT_MILLIS","ISSUE_TYPENAMES","uncomboed","combobreak","failedcombo","Combos","arguments","lastGcdTime","currentComboChain","issues","init","onCast","onComplete","lastComboEvent","issue","fabricateComboEvent","combo","fabricateEvent","recordBrokenCombo","context","isAllowableComboBreak","recordUncomboedGcd","recordFailedCombo","checkCombo","lastAction","from","Array","isArray","includes","breaksCombo","successfulHit","addJobSpecificSuggestions","comboBreakers","uncomboedGcds","suggestions","add","TieredSuggestion","suggestionIcon","tiers","1","SEVERITY","MINOR","2","MEDIUM","4","MAJOR","value","why","output","startTime","sort","a","b","completeContext","startEvent","endEvent","startAction","endAction","reason","whiteSpace","show","title","displayOrder","DISPLAY_ORDER","COMBOS","__decorate","dependency","__metadata","Data","prototype","Suggestions","Timeline","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","2.5","WEAVING_SEVERITY","5","Weaving","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","autoAttack","isOgcd","_saveIfBad","badWeaves","href","scrollTo","message","leadingGcdEvent","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","maxWeaves","weaveCount","isUntargetable","castTime","forEvent","closest","matchClosestLower","speedmod","get","gcdLength","gcd","getEstimate","panels","item","formatTimestamp","exclusive","styled","fluid","DEFAULT_DURATION_MILLIS","DoTs","_lastApplication","_clip","_statusDuration","statusesToTrack","statusId","getStatus","hasOwnProperty","console","warn","abilityId","_onDotApply","excludeApplication","addChecklistRules","addClippingSuggestions","clip","applicationKey","targetID","targetInstance","lastApplication","getInvulnerableUptime","Math","max","getUptimePercent","enemies","getStatusUptime","fightDuration","getClippingAmount","fightDurationMillis","round","BLOOD_OF_THE_DRAGON","DISEMBOWEL","DEBUFFS","DRAGON_MAX_DURATION_MILLIS","DRAGON_DEFAULT_DURATION_MILLIS","BLOOD_EXTENSION_MILLIS","LOTD_BUFF_DELAY_MIN","LOTD_BUFF_DELAY_MAX","MAX_EYES","BloodOfTheDragon","_bloodDuration","_bloodDowntime","_lifeDuration","_lifeWindows","_lastEventTime","_eyes","_lostEyes","ACTIONS","FANG_AND_CLAW","WHEELING_THRUST","_onExtenderCast","SONIC_THRUST","_onBloodCast","MIRAGE_DIVE","_onMirageDiveCast","GEIRSKOGUL","_onGeirskogulCast","NASTROND","_onNastrondCast","STARDIVER","_onStardiverCast","to","_onDeath","_onRaise","getActiveDrgBuffs","active","combatants","selected","hasStatus","STATUSES","LANCE_CHARGE","BATTLE_LITANY","RIGHT_EYE","RIGHT_EYE_SOLO","createTimelineButton","Button","_finishLifeWindow","_updateGauge","elapsedTime","min","nastronds","stardivers","timeToNextBuff","cooldowns","DRAGON_SIGHT","activeBuffs","some","nastrond","buffs","brokenLog","trigger","stardiver","_lastEvent","death","deadTime","uptime","checklist","Rule","description","Message","warning","Icon","Content","requirements","Requirement","percent","_windowTable","window","casts","concat","rows","cast","showName","iconSize","getDataBy","Table","buffsInDelayWindow","canBeDelayed","couldBeDelayed","delayBuffs","idx","List","lotdPanels","Accordion","BAD_LIFE_SURGE_CONSUMERS","TRUE_THRUST","RAIDEN_THRUST","VORPAL_THRUST","CHAOS_THRUST","PIERCING_TALON","DOOM_SPIKE","COERTHAN_TORMENT","FINAL_COMBO_HITS","BAD_BUFF_ACTIONS","FULL_THRUST","STATUS_MAP","BUFF_GCD_TARGET","BUFF_GCD_WARNING","BUFF_GCD_ERROR","Buffs","_lastGcd","_badLifeSurges","_fifthGcd","_soloDragonSight","_buffWindows","_onBuffCast","_pushToWindow","tracker","isBad","LIFE_SURGE","gcdCount","_getDisembowelUptimePercent","_closeLastWindow","badLanceCharges","3","badDragonSights","Suggestion","severity","_formatGcdCount","count","className","lcPanels","Rotation","dsPanels","CoreCombos","CoreCooldowns","JUMP","HIGH_JUMP","SPINESHATTER_DIVE","DRAGONFIRE_DIVE","ELUSIVE_JUMP","Debuffs","10","15","BUFF_FIRST_USE_OFFSET","JUMP_FIRST_USE_OFFSET","SSD_FIRST_USE_OFFSET","DFD_FIRST_USE_OFFSET","LIFE_SURGE_FIRST_USE_OFFSET","OGCDDowntime","CooldownDowntime","defaultFirstUseOffset","trackedCds","firstUseOffset","ROTATION_IDS","PROC_IDS","NEXT_COMBO","TRUE_NORTH_CHARGES","TRUE_NORTH_CD","TRUE_NORTH","Positionals","_rtCombos","_currentCombo","_tnCharges","_tnCharging","_onGcd","_onProcGcd","RAIDEN_THRUST_READY","_procSuccess","_tnUsed","next","trueNorthCharges","success","_updateTnCharges","addTimestampHook","missed","_checkIcon","color","_procTable","withTn","info","Procs","_casts","_removedProcs","SHARPER_FANG_AND_CLAW","ENHANCED_WHEELING_THRUST","DIVE_READY","_overwrittenDiveReady","Number","_onReadyOverwritten","_onProcRemoved","isDowntime","droppedFang","droppedWheeling","droppedMirage","JUMPS","CoreWeaving"],"mappings":"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","file":"assets/jobs-drg.5a10e15e.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import _ from 'lodash';\nimport Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\n// Track the cooldowns on actions and shit\nexport default class Cooldowns extends Module {\n    constructor(...args) {\n        super(...args);\n        this._cooldownGroups = {};\n        this._currentAction = null;\n        this._cooldowns = {};\n        this._groups = {};\n        this._cooldownGroups = _.groupBy(this.data.actions, 'cooldownGroup');\n        // Pre-build groups for actions explicitly set by subclasses\n        this._buildGroups(this.constructor.cooldownOrder);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _buildGroups(groups) {\n        // If there's no groups, noop\n        if (!groups) {\n            return;\n        }\n        const ids = groups.map((data, i) => {\n            const order = -(groups.length - i);\n            // If it's just an action id, build a group for it and stop\n            if (typeof data === 'number') {\n                const action = this.data.getAction(data);\n                this._buildGroup({\n                    id: data,\n                    content: action && action.name,\n                    order,\n                });\n                return data;\n            }\n            // Build the base group\n            const group = this._buildGroup({\n                id: data.name,\n                content: data.name,\n                order,\n            });\n            if (data.merge) {\n                // If it's a merge group, we only need to register our group for each of the IDs\n                data.actions.forEach(id => {\n                    this._groups[id] = group;\n                });\n            }\n            else {\n                // Otherwise, build nested groups for each action\n                group.nestedGroups = this._buildGroups(data.actions);\n            }\n            return data.name;\n        });\n        return ids;\n    }\n    _buildGroup(opts) {\n        const group = new ItemGroup({ showNested: false, ...opts });\n        this.timeline.addGroup(group);\n        this._groups[opts.id] = group;\n        return group;\n    }\n    // cooldown starts at the beginning of the casttime\n    // (though 99% of CD based abilities have no cast time)\n    // TODO: Should I be tracking pet CDs too? I mean, contagion/radiant are a thing.\n    _onBeginCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        this._currentAction = action;\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        const finishingCast = this._currentAction && this._currentAction.id === action.id;\n        this._currentAction = null;\n        if (finishingCast) {\n            return;\n        }\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onComplete() {\n        Object.keys(this._cooldowns).forEach(actionId => {\n            this._addToTimeline(parseInt(actionId, 10));\n        });\n    }\n    _addToTimeline(actionId) {\n        const cd = this._cooldowns[actionId];\n        if (!cd) {\n            return false;\n        }\n        // Clean out any 'current' cooldowns into the history\n        if (cd.current) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        const action = this.data.getAction(actionId);\n        // If the action is on the GCD, GlobalCooldown will be managing its own group\n        if (!action || action.onGcd) {\n            return false;\n        }\n        // Ensure we've got a group for this item\n        if (!this._groups[actionId]) {\n            this._buildGroup({\n                id: actionId,\n                content: action.name,\n                order: actionId,\n            });\n        }\n        // Add CD info to the timeline\n        cd.history\n            .forEach(use => {\n            if (!use.shared) {\n                this._groups[actionId].addItem(new Item({\n                    type: 'background',\n                    start: use.timestamp - this.parser.fight.start_time,\n                    length: use.length,\n                    content: <img src={action.icon} alt={action.name}/>,\n                }));\n            }\n        });\n        return true;\n    }\n    getCooldown(actionId) {\n        return this._cooldowns[actionId] || {\n            current: null,\n            history: [],\n        };\n    }\n    startCooldownGroup(originActionId, cooldownGroup) {\n        const sharedCooldownActions = _.get(this._cooldownGroups, cooldownGroup, []);\n        sharedCooldownActions\n            .map(action => action.id)\n            .filter(id => id !== originActionId)\n            .forEach(id => this.startCooldown(id, true));\n    }\n    startCooldown(actionId, sharedCooldown = false) {\n        // TODO: handle shared CDs\n        const action = this.data.getAction(actionId);\n        if (!action) {\n            return;\n        }\n        // Get the current cooldown status, falling back to a new cooldown\n        const cd = this.getCooldown(actionId);\n        // If there's a current object, move it into the history\n        // TODO: handle errors on CD overlap\n        if (cd.current) {\n            const currentFightDuration = this.parser.currentTimestamp - this.parser.fight.start_time;\n            if (cd.current.timestamp < this.parser.fight.start_time && cd.current.length > currentFightDuration) {\n                // Pre-pull usage, reset the cooldown to prevent overlap on timeline since we don't know exactly when cooldown was used pre-pull\n                this.resetCooldown(actionId);\n            }\n            else {\n                cd.history.push(cd.current);\n            }\n        }\n        cd.current = {\n            timestamp: this.parser.currentTimestamp,\n            length: action.cooldown * 1000,\n            shared: sharedCooldown,\n            invulnTime: 0,\n        };\n        // Save the info back out (to ensure propagation if we've got a new info)\n        this._cooldowns[actionId] = cd;\n    }\n    reduceCooldown(actionId, reduction) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        // Check if current isn't current\n        if (cd.current && cd.current.timestamp + cd.current.length < currentTimestamp) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        // TODO: Do I need to warn if they're reducing cooldown on something _with_ no cooldown?\n        if (cd.current === null) {\n            return;\n        }\n        // Reduce the CD\n        cd.current.length -= reduction * 1000;\n        // If the reduction would have made it come off CD earlier than now, reset it - the extra time reduction should be lost.\n        if (cd.current.timestamp + cd.current.length < currentTimestamp) {\n            this.resetCooldown(actionId);\n        }\n    }\n    setInvulnTime(actionId) {\n        const cd = this.getCooldown(actionId);\n        let previousEndTimestamp = this.parser.fight.start_time;\n        let previousCooldown = {};\n        let isFirst = true;\n        for (const cooldown of cd.history) {\n            if (isFirst) {\n                previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n                isFirst = false;\n                previousCooldown = cooldown;\n            }\n            //We invuln time is the time the boss was invuln from when the CD came off CD and when it was next executed\n            previousCooldown.invulnTime = this.downtime.getDowntime(previousEndTimestamp, cooldown.timestamp);\n            previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n            previousCooldown = cooldown;\n        }\n    }\n    resetCooldown(actionId) {\n        const cd = this.getCooldown(actionId);\n        // If there's nothing running, we can just stop\n        // TODO: need to warn?\n        if (cd.current === null) {\n            return;\n        }\n        // Fix up the length\n        cd.current.length = this.parser.currentTimestamp - cd.current.timestamp;\n        // Move the CD into the history\n        cd.history.push(cd.current);\n        cd.current = null;\n    }\n    getCooldownRemaining(actionId) {\n        const current = this.getCooldown(actionId).current;\n        if (!current) {\n            return 0;\n        }\n        return current.length - (this.parser.currentTimestamp - current.timestamp);\n    }\n    // TODO: Should this be here?\n    getTimeOnCooldown(actionId, considerInvulnTime = false, extension = 0) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        if (considerInvulnTime) {\n            this.setInvulnTime(actionId);\n        }\n        else {\n            cd.history.map(cooldown => {\n                cooldown.invulnTime = 0;\n            });\n        }\n        return cd.history.reduce((time, status) => time + this.getAdjustedTimeOnCooldown(status, currentTimestamp, extension), cd.current ? this.getAdjustedTimeOnCooldown(cd.current, currentTimestamp, extension) : 0);\n    }\n    getAdjustedTimeOnCooldown(cooldown, currentTimestamp, extension) {\n        // Doesn't count time on CD outside the bounds of the current fight, it'll throw calcs off\n        // Add to the length of the cooldown any invuln time for the boss\n        // Additionally account for any extension the caller allowed to the CD Length\n        const duration = currentTimestamp - cooldown.timestamp;\n        const maximumDuration = cooldown.length + cooldown.invulnTime + extension;\n        return _.clamp(duration, 0, maximumDuration);\n    }\n    get used() {\n        return Object.keys(this._cooldowns);\n    }\n}\nCooldowns.handle = 'cooldowns';\nCooldowns.dependencies = [\n    'data',\n    'downtime',\n    'timeline',\n];\n// Array used to sort cooldowns in the timeline. Elements should be either IDs for\n// top-level groups, or objects of the format {name: string, actions: array} for\n// nested groups. Actions not specified here will be sorted by their ID below.\n// Check the NIN and SMN modules for examples.\nCooldowns.cooldownOrder = [];\n","// If you can make it through this entire file without hitting semantic saturation of the word \"combo\", hats off to you. IT DOESN'T LOOK REAL ANYMORE.\nimport { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nconst DEFAULT_GCD = 2.5;\nconst GCD_TIMEOUT_MILLIS = 15000;\nconst ISSUE_TYPENAMES = {\n    uncomboed: <Trans id=\"core.combos.issuetypenames.uncomboed\">Uncomboed</Trans>,\n    combobreak: <Trans id=\"core.combos.issuetypenames.combobreak\">Broken Combo</Trans>,\n    failedcombo: <Trans id=\"core.combos.issuetypenames.failed\">Missed or Invulnerable</Trans>,\n};\nexport default class Combos extends Module {\n    constructor() {\n        super(...arguments);\n        this.lastGcdTime = this.parser.fight.start_time;\n        this.currentComboChain = [];\n        this.issues = [];\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    get lastComboEvent() {\n        return _.last(this.currentComboChain) || null;\n    }\n    get lastAction() {\n        const lastComboEvent = this.lastComboEvent;\n        if (!lastComboEvent) {\n            return null;\n        }\n        return lastComboEvent.ability.guid;\n    }\n    get comboBreakers() {\n        return this.issues\n            .filter(issue => issue.type === 'combobreak')\n            .map(issue => issue.event);\n    }\n    get uncomboedGcds() {\n        return this.issues\n            .filter(issue => issue.type === 'uncomboed')\n            .map(issue => issue.event);\n    }\n    fabricateComboEvent(event) {\n        const combo = {\n            ...event,\n            type: 'combo',\n        };\n        delete combo.timestamp; // Since fabricateEvent adds that in anyway\n        this.parser.fabricateEvent(combo);\n    }\n    recordBrokenCombo(event, context) {\n        if (!this.isAllowableComboBreak(event, context)) {\n            this.issues.push({\n                type: 'combobreak',\n                event,\n                context,\n            });\n        }\n        this.currentComboChain = [];\n    }\n    recordUncomboedGcd(event) {\n        this.issues.push({\n            type: 'uncomboed',\n            event,\n            context: [],\n        });\n        this.currentComboChain = [];\n    }\n    recordFailedCombo(event, context) {\n        this.issues.push({\n            type: 'failedcombo',\n            event,\n            context,\n        });\n        this.currentComboChain = [];\n    }\n    /**\n     *\n     * @param combo\n     * @param event\n     * @return true if combo, false otherwise\n     */\n    checkCombo(combo /* Should be an Action type */, event) {\n        // Not in a combo\n        if (this.lastAction == null) {\n            // Combo starter, we good\n            if (combo.start) {\n                this.fabricateComboEvent(event);\n                return true;\n            }\n            // Combo action that isn't a starter, that's a paddlin'\n            if (combo.from) {\n                this.recordUncomboedGcd(event);\n                return false;\n            }\n        }\n        if (combo.start) {\n            // Broken combo - starting a new combo while in a current combo\n            this.recordBrokenCombo(event, this.currentComboChain);\n            return true; // Start a new combo\n        }\n        // Check if action continues existing combo\n        if (combo.from) {\n            const fromOptions = Array.isArray(combo.from) ? combo.from : [combo.from];\n            if (fromOptions.includes(this.lastAction)) {\n                // Combo continued correctly\n                this.fabricateComboEvent(event);\n                // If it's a finisher, reset the combo\n                return !combo.end;\n            }\n        }\n        // Action did not continue combo correctly and is not a new combo starter\n        this.recordBrokenCombo(event, this.currentComboChain);\n        return false;\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action) {\n            return;\n        }\n        // Only track GCDs that either progress or break combos so actions like Drill and Shadow Fang don't falsely extend the simulated combo timer\n        if (action.onGcd && (action.combo || action.breaksCombo)) {\n            if (event.timestamp - this.lastGcdTime > GCD_TIMEOUT_MILLIS) {\n                // If we've had enough downtime between GCDs to let the combo expire, reset the state so we don't count erroneous combo breaks\n                this.currentComboChain = [];\n            }\n            this.lastGcdTime = event.timestamp;\n        }\n        // If it's a combo action, run it through the combo checking logic\n        if (action.combo) {\n            if (!event.successfulHit) {\n                // Failed attacks break combo\n                this.recordFailedCombo(event, this.currentComboChain);\n                return;\n            }\n            const continueCombo = this.checkCombo(action.combo, event);\n            if (continueCombo) {\n                this.currentComboChain.push(event);\n            }\n            else {\n                this.currentComboChain = [];\n            }\n        }\n        if (action.breaksCombo && this.lastAction !== null) {\n            // Combo breaking action, that's a paddlin'\n            this.recordBrokenCombo(event, this.currentComboChain);\n        }\n    }\n    onComplete() {\n        if (this.addJobSpecificSuggestions(this.comboBreakers, this.uncomboedGcds)) {\n            return;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.constructor.suggestionIcon,\n            content: <Trans id=\"core.combos.content\">\n\t\t\t\t<p>Avoid breaking combos, as failing to complete combos costs you a significant amount of DPS and important secondary effects.</p>\n\t\t\t\t<p>Using a combo GCD at the wrong combo step, using non-combo GCDs while inside a combo, missing, or attacking a target that is invulnerable will cause your combo to break.</p>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.issues.length,\n            why: <Plural id=\"core.combos.why\" value={this.issues.length} one=\"You misused # combo action.\" other=\"You misused # combo actions.\"/>,\n        }));\n    }\n    /**\n     * To be overridden by subclasses. This is called in _onComplete() and passed two arrays of event objects - one for events that\n     * broke combos, and one for combo GCDs used outside of combos. Subclassing modules can add job-specific suggestions based on\n     * what particular actions were misused and when in the fight.\n     * The overriding module should return true if the default suggestion is not wanted\n     */\n    addJobSpecificSuggestions(comboBreakers, uncomboedGcds) {\n        return false;\n    }\n    /**\n     * To be overridden by subclasses. This is called in recordBrokenCombo, and receives the event triggering the broken combo,\n     * and the context information for that break. Jobs can override this to indicate whether this broken combo is allowed. If so,\n     * the event and context will not be recorded, and the current combo will be cleared with no other side effects.\n     * Returning false will allow the break to be recorded, and displayed to the user\n     */\n    isAllowableComboBreak(event, context) {\n        return false;\n    }\n    output() {\n        if (this.issues.length <= 0) {\n            return false;\n        }\n        // Access Alias\n        const startTime = this.parser.fight.start_time;\n        const data = this.issues\n            .sort((a, b) => a.event.timestamp - b.event.timestamp)\n            .map(issue => {\n            const completeContext = [...(issue.context || []), issue.event];\n            const startEvent = _.first(completeContext);\n            const endEvent = _.last(completeContext);\n            const startAction = this.data.getAction(startEvent.ability.guid);\n            const endAction = this.data.getAction(endEvent.ability.guid);\n            return ({\n                start: startEvent.timestamp - startTime + (startAction?.cooldown ?? DEFAULT_GCD),\n                end: endEvent.timestamp - startTime + (endAction?.cooldown ?? DEFAULT_GCD),\n                rotation: completeContext,\n                notesMap: {\n                    reason: <span style={{ whiteSpace: 'nowrap' }}>{ISSUE_TYPENAMES[issue.type]}</span>,\n                },\n            });\n        });\n        return <RotationTable notes={[\n            {\n                header: <Trans id=\"core.combos.rotationtable.header.reason\">Reason</Trans>,\n                accessor: 'reason',\n            },\n        ]} data={data} onGoto={this.timeline.show}/>;\n    }\n}\nCombos.handle = 'combos';\nCombos.title = t('core.combos.title') `Combo Issues`;\nCombos.displayOrder = DISPLAY_ORDER.COMBOS;\n// This should be redefined by subclassing modules; the default is the basic 'Attack' icon\nCombos.suggestionIcon = 'https://xivapi.com/i/000000/000405.png';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], Combos.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Combos.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Combos.prototype, \"timeline\", void 0);\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import Module from 'parser/core/Module';\n// Absurdly large fallback number, so missing duration properties will result in both a console warning and stupid suggestions\nconst DEFAULT_DURATION_MILLIS = 120000;\nexport default class DoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastApplication = {};\n        this._clip = {};\n        this._statusDuration = {};\n        // NOTE: All statuses submodules track should include a duration property, otherwise the results this produces will be very fucky\n        this.constructor.statusesToTrack.forEach(statusId => {\n            const status = this.data.getStatus(statusId);\n            if (!status) {\n                return;\n            }\n            if (!status.hasOwnProperty('duration')) {\n                console.warn(`statusId ${statusId} is missing a duration property`);\n                this._statusDuration[statusId] = DEFAULT_DURATION_MILLIS;\n            }\n            else {\n                this._statusDuration[statusId] = status.duration * 1000;\n            }\n        });\n        this.addHook(['applydebuff', 'refreshdebuff'], { by: 'player', abilityId: this.constructor.statusesToTrack }, this._onDotApply);\n        this.addHook('complete', this._onComplete);\n    }\n    // *** FUNCTIONS TO OVERRIDE *** //\n    excludeApplication() {\n        // To be overridden by submodules that want to exclude certain applications from clipping calculations (e.g. SMN when rushing)\n        return false;\n    }\n    addChecklistRules() {\n        // To be overridden by submodules to display the checklist rules for their job. This should be handled on a job-by-job\n        // basis rather than generically, since the description text isn't one-size-fits-all, and some jobs may be tracking\n        // more than just DoTs with this module (e.g. DRG's Disembowel).\n    }\n    // Allow Typescript overrides using the parameter\n    // eslint-disable-next-line no-unused-vars\n    addClippingSuggestions(clip) {\n        // To be overridden by submodules to display any clipping suggestions. This should also be handled on a job-by-job\n        // basis, since different jobs have different thresholds for what constitutes bad clipping with varying explanations\n        // for why.\n    }\n    // ***************************** //\n    _onDotApply(event) {\n        const statusId = event.ability.guid;\n        // Make sure we're tracking for this target\n        const applicationKey = `${event.targetID}|${event.targetInstance}`;\n        const lastApplication = this._lastApplication[applicationKey] = this._lastApplication[applicationKey] || {};\n        // If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n        if (!lastApplication[statusId] || this.excludeApplication()) {\n            lastApplication[statusId] = event.timestamp;\n            return;\n        }\n        // Base clip calc\n        let clip = this._statusDuration[statusId] - (event.timestamp - lastApplication[statusId]);\n        // Remove any untargetable time from the clip - often want to hardcast after an invuln phase, but refresh w/ 3D shortly after.\n        clip -= this.invuln.getUntargetableUptime('all', event.timestamp - this._statusDuration[statusId], event.timestamp);\n        // Also remove invuln time in the future that casting later would just push dots into\n        // TODO: This relies on a full set of invuln data ahead of time. Can this be trusted?\n        clip -= this.invuln.getInvulnerableUptime('all', event.timestamp, event.timestamp + this._statusDuration[statusId] + clip);\n        // Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n        this._clip[statusId] = (this._clip[statusId] || 0) + Math.max(0, clip);\n        lastApplication[statusId] = event.timestamp;\n    }\n    _onComplete() {\n        this.addChecklistRules();\n        this.addClippingSuggestions(this._clip);\n    }\n    // These two functions are helpers for submodules and should be used but not overridden\n    getUptimePercent(statusId) {\n        const statusUptime = this.enemies.getStatusUptime(statusId);\n        const fightDuration = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightDuration) * 100;\n    }\n    getClippingAmount(statusId) {\n        // This normalises clipping as seconds clipped per minute, since some level of clipping is expected and we need tiers that work for both long and short fights\n        const fightDurationMillis = (this.parser.fightDuration - this.invuln.getInvulnerableUptime());\n        // eslint-disable-next-line no-magic-numbers\n        const clipSecsPerMin = Math.round((this._clip[statusId] * 60) / fightDurationMillis);\n        return clipSecsPerMin;\n    }\n}\nDoTs.handle = 'dots';\nDoTs.dependencies = [\n    'data',\n    'enemies',\n    'invuln',\n];\n// To be overriden by submodules with an array of status IDs to track\nDoTs.statusesToTrack = [];\n","export default {\n    BLOOD_OF_THE_DRAGON: 1,\n    DISEMBOWEL: 2,\n    DEBUFFS: 3,\n};\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Icon, Message, Table, Accordion, Button } from 'semantic-ui-react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { getDataBy } from 'data';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst DRAGON_MAX_DURATION_MILLIS = 30000;\nconst DRAGON_DEFAULT_DURATION_MILLIS = 30000;\nconst BLOOD_EXTENSION_MILLIS = 10000;\nconst LOTD_BUFF_DELAY_MIN = 30000;\nconst LOTD_BUFF_DELAY_MAX = 60000;\nconst MAX_EYES = 2;\nexport default class BloodOfTheDragon extends Module {\n    constructor(...args) {\n        super(...args);\n        // Null assumption, in case they precast. In all likelyhood, this will actually be incorrect, but there's no harm if\n        // that's the case since BotD should be the very first weave in the fight and that'll reset the duration to 30s anyway.\n        // Also, this way we don't count the first second of the fight as erroneous downtime.\n        this._bloodDuration = DRAGON_DEFAULT_DURATION_MILLIS;\n        this._bloodDowntime = 0;\n        this._lifeDuration = 0;\n        this._lifeWindows = {\n            current: null,\n            history: [],\n        };\n        this._lastEventTime = this.parser.fight.start_time;\n        this._eyes = 0;\n        this._lostEyes = 0;\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.FANG_AND_CLAW.id, ACTIONS.WHEELING_THRUST.id] }, this._onExtenderCast);\n        this.addHook('combo', { by: 'player', abilityId: ACTIONS.SONIC_THRUST.id }, this._onExtenderCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.BLOOD_OF_THE_DRAGON.id }, this._onBloodCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.MIRAGE_DIVE.id }, this._onMirageDiveCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.GEIRSKOGUL.id }, this._onGeirskogulCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.NASTROND.id }, this._onNastrondCast);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.STARDIVER.id }, this._onStardiverCast);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('raise', { to: 'player' }, this._onRaise);\n        this.addHook('complete', this._onComplete);\n    }\n    // duplicate code from other PRs\n    getActiveDrgBuffs() {\n        const active = [];\n        if (this.combatants.selected.hasStatus(STATUSES.LANCE_CHARGE.id)) {\n            active.push(STATUSES.LANCE_CHARGE.id);\n        }\n        if (this.combatants.selected.hasStatus(STATUSES.BATTLE_LITANY.id)) {\n            active.push(STATUSES.BATTLE_LITANY.id);\n        }\n        if (this.combatants.selected.hasStatus(STATUSES.RIGHT_EYE.id) || this.combatants.selected.hasStatus(STATUSES.RIGHT_EYE_SOLO.id)) {\n            active.push(STATUSES.RIGHT_EYE.id);\n        }\n        return active;\n    }\n    createTimelineButton(timestamp) {\n        return <Button circular compact icon=\"time\" size=\"small\" onClick={() => this.timeline.show(timestamp - this.parser.fight.start_time, timestamp - this.parser.fight.start_time)} content={this.parser.formatTimestamp(timestamp)}/>;\n    }\n    // end duplicate code\n    _finishLifeWindow() {\n        if (this._lifeWindows.current !== null) {\n            this._lifeWindows.history.push(this._lifeWindows.current);\n            this._lifeWindows.current = null;\n        }\n    }\n    _updateGauge() {\n        const elapsedTime = this.parser.currentTimestamp - this._lastEventTime;\n        if (this._lifeWindows.current !== null) {\n            this._lifeDuration -= elapsedTime;\n            if (this._lifeDuration <= 0) {\n                // We're reverting out of Life\n                this._finishLifeWindow();\n                this._bloodDuration = DRAGON_DEFAULT_DURATION_MILLIS + this._lifeDuration; // Actually subtraction\n                this._lifeDuration = 0;\n            }\n        }\n        else {\n            this._bloodDuration -= elapsedTime;\n        }\n        if (this._bloodDuration <= 0) {\n            // Blood fell off; reset everything\n            this._bloodDowntime -= this._bloodDuration; // Actually addition\n            this._bloodDuration = 0;\n            this._eyes = 0;\n        }\n        this._lastEventTime = this.parser.currentTimestamp;\n    }\n    _onExtenderCast() {\n        this._updateGauge();\n        if (this._lifeWindows.current === null && this._bloodDuration > 0) {\n            // If we're in regular Blood, increase the duration\n            this._bloodDuration = Math.min(this._bloodDuration + BLOOD_EXTENSION_MILLIS, DRAGON_MAX_DURATION_MILLIS);\n        }\n    }\n    _onBloodCast() {\n        this._updateGauge();\n        this._bloodDuration = DRAGON_DEFAULT_DURATION_MILLIS;\n    }\n    _onMirageDiveCast() {\n        this._updateGauge();\n        if (this._lifeWindows.current !== null || this._bloodDuration > 0) {\n            // You can accrue eyes in LotD too\n            this._eyes++;\n            if (this._eyes > MAX_EYES) {\n                this._lostEyes += this._eyes - MAX_EYES;\n                this._eyes = MAX_EYES;\n            }\n        }\n    }\n    _onGeirskogulCast() {\n        this._updateGauge();\n        if (this._eyes === MAX_EYES) {\n            // LotD tiiiiiime~\n            this._lifeDuration = DRAGON_DEFAULT_DURATION_MILLIS;\n            this._lifeWindows.current = {\n                start: this.parser.currentTimestamp,\n                duration: this._lifeDuration,\n                nastronds: [],\n                stardivers: [],\n                timeToNextBuff: {\n                    [ACTIONS.LANCE_CHARGE.id]: this.cooldowns.getCooldownRemaining(ACTIONS.LANCE_CHARGE.id),\n                    [ACTIONS.DRAGON_SIGHT.id]: this.cooldowns.getCooldownRemaining(ACTIONS.DRAGON_SIGHT.id),\n                    [ACTIONS.BATTLE_LITANY.id]: this.cooldowns.getCooldownRemaining(ACTIONS.BATTLE_LITANY.id),\n                },\n                activeBuffs: this.getActiveDrgBuffs(),\n            };\n            this._eyes = 0;\n        }\n    }\n    _onNastrondCast(event) {\n        if (this._lifeWindows.current === null) {\n            // Nastrond outside of LotD - gentlemen, we have us a broken log\n            this.brokenLog.trigger(this, 'no lotd nastrond', (<Trans id=\"drg.blood.trigger.no-lotd-nastrond\">\n\t\t\t\t\t<ActionLink {...ACTIONS.NASTROND}/> was cast while Life of the Dragon was deemed inactive.\n\t\t\t\t</Trans>));\n            return;\n        }\n        if (!this._lifeWindows.current.nastronds.some(nastrond => nastrond.timestamp === event.timestamp)) {\n            // Dedupe Nastrond casts, since that can occasionally happen\n            this._lifeWindows.current.nastronds.push({\n                timestamp: event.timestamp,\n                buffs: this.getActiveDrgBuffs(),\n                action: ACTIONS.NASTROND,\n            });\n        }\n    }\n    _onStardiverCast(event) {\n        if (this._lifeWindows.current === null) {\n            // Stardiver outside of LotD is also a sign of a broken log\n            this.brokenLog.trigger(this, 'no lotd stardiver', (<Trans id=\"drg.blood.trigger.no-lotd-stardiver\">\n\t\t\t\t\t<ActionLink {...ACTIONS.STARDIVER}/> was cast while Life of the Dragon was deemed inactive.\n\t\t\t\t</Trans>));\n            return;\n        }\n        if (!this._lifeWindows.current.stardivers.some(stardiver => stardiver.timestamp === event.timestamp)) {\n            // Dedupe Stardiver casts, it's also AoE so it's probably going to happen on occasion too\n            this._lifeWindows.current.stardivers.push({\n                timestamp: event.timestamp,\n                buffs: this.getActiveDrgBuffs(),\n                action: ACTIONS.STARDIVER,\n            });\n        }\n    }\n    _onDeath() {\n        // RIP\n        this._bloodDuration = 0;\n        this._lifeDuration = 0;\n        this._finishLifeWindow();\n        this._eyes = 0;\n    }\n    _onRaise(event) {\n        // So floor time doesn't count against BotD uptime\n        this._lastEvent = event.timestamp;\n    }\n    _onComplete() {\n        this._finishLifeWindow();\n        const duration = this.parser.fightDuration - this.death.deadTime;\n        const uptime = ((duration - this._bloodDowntime) / duration) * 100;\n        this.checklist.add(new Rule({\n            name: <Trans id=\"drg.blood.checklist.name\">Keep Blood of the Dragon up</Trans>,\n            description: <Fragment>\n\t\t\t\t<Trans id=\"drg.blood.checklist.description\"><ActionLink {...ACTIONS.BLOOD_OF_THE_DRAGON}/> is at the heart of the DRG rotation and should be kept up at all times. Without it, your jumps are weakened and you can't use <ActionLink {...ACTIONS.NASTROND}/>.</Trans>\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name=\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<Trans id=\"drg.blood.checklist.description.warning\">As Blood of the Dragon is now a gauge instead of a buff, please bear in mind that the numbers here and in the Life of the Dragon windows below are simulated. As such, it may not line up perfectly with reality.</Trans>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t</Fragment>,\n            displayOrder: DISPLAY_ORDER.BLOOD_OF_THE_DRAGON,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"drg.blood.checklist.requirement.name\"><ActionLink {...ACTIONS.BLOOD_OF_THE_DRAGON}/> uptime</Trans>,\n                    percent: () => uptime,\n                }),\n            ],\n            target: 98,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.MIRAGE_DIVE.icon,\n            content: <Trans id=\"drg.blood.suggestions.eyes.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.MIRAGE_DIVE}/> when you already have {MAX_EYES} Eyes. Wasting Eyes will delay your Life of the Dragon windows and potentially cost you a lot of DPS.\n\t\t\t</Trans>,\n            value: this._lostEyes,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                2: SEVERITY.MAJOR,\n            },\n            why: <Trans id=\"drg.blood.suggestions.eyes.why\">\n\t\t\t\tYou used Mirage Dive <Plural value={this._lostEyes} one=\"# time\" other=\"# times\"/> when you already had {MAX_EYES} Eyes.\n\t\t\t</Trans>,\n        }));\n    }\n    _windowTable(window) {\n        const casts = window.nastronds.concat(window.stardivers);\n        casts.sort((a, b) => { return a.timestamp - b.timestamp; });\n        const rows = casts.map(cast => {\n            const buffs = cast.buffs.map(id => {\n                return <StatusLink key={id} showName={false} iconSize=\"35px\" {...getDataBy(STATUSES, 'id', id)}/>;\n            });\n            return <Table.Row key={cast.timestamp}>\n\t\t\t\t<Table.Cell>{this.createTimelineButton(cast.timestamp)}</Table.Cell>\n\t\t\t\t<Table.Cell><ActionLink {...cast.action}/></Table.Cell>\n\t\t\t\t<Table.Cell>{buffs}</Table.Cell>\n\t\t\t</Table.Row>;\n        });\n        const buffsInDelayWindow = {};\n        let canBeDelayed = window.activeBuffs.length === 0;\n        let couldBeDelayed = false;\n        for (const id in window.timeToNextBuff) {\n            buffsInDelayWindow[id] = window.timeToNextBuff[id] >= LOTD_BUFF_DELAY_MIN && window.timeToNextBuff[id] <= LOTD_BUFF_DELAY_MAX;\n            couldBeDelayed = buffsInDelayWindow[id] || couldBeDelayed;\n            canBeDelayed = window.timeToNextBuff[id] >= LOTD_BUFF_DELAY_MIN && canBeDelayed;\n        }\n        const delayBuffs = Object.keys(buffsInDelayWindow).filter(id => buffsInDelayWindow[id]).map((id, idx) => {\n            const action = getDataBy(ACTIONS, 'id', parseInt(id));\n            return <Message.Item key={idx}><Trans id=\"drg.blood.delay-buff\"><ActionLink {...action}/> in {this.parser.formatDuration(window.timeToNextBuff[id])}</Trans></Message.Item>;\n        });\n        return <Fragment>\n\t\t\t{canBeDelayed && couldBeDelayed && (<>\n\t\t\t\t\t<Message>\n\t\t\t\t\t\t<p><Trans id=\"drg.blood.delay-explain\">Life of the Dragon windows should line up with your personal buffs, if possible. You might be able to delay this window to line up with:\n\t\t\t\t\t\t</Trans></p>\n\t\t\t\t\t\t<Message.List>\n\t\t\t\t\t\t\t{delayBuffs}\n\t\t\t\t\t\t</Message.List>\n\t\t\t\t\t</Message>\n\t\t\t\t</>)}\n\t\t\t<Table>\n\t\t\t\t<Table.Header>\n\t\t\t\t\t<Table.Row key=\"header\">\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.time\">Time</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.action\">Action</Trans></Table.HeaderCell>\n\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"drg.blood.table.statuses\">Personal Buffs</Trans></Table.HeaderCell>\n\t\t\t\t\t</Table.Row>\n\t\t\t\t</Table.Header>\n\t\t\t\t{rows}\n\t\t\t</Table>\n\t\t</Fragment>;\n    }\n    output() {\n        if (this._lifeWindows.history.length > 0) {\n            const lotdPanels = this._lifeWindows.history.map(window => {\n                return {\n                    title: {\n                        key: `title-${window.start}`,\n                        content: <Fragment>\n\t\t\t\t\t\t\t{this.parser.formatTimestamp(window.start)} <span> - </span> <Trans id=\"drg.blood.windows.hits\"><Plural value={window.nastronds.length} one=\"# Nastrond\" other=\"# Nastronds\"/>, <Plural value={window.stardivers.length} one=\"# Stardiver\" other=\"# Stardivers\"/></Trans>\n\t\t\t\t\t\t</Fragment>,\n                    },\n                    content: {\n                        key: `content-${window.start}`,\n                        content: this._windowTable(window),\n                    },\n                };\n            });\n            return <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"drg.blood.windows.preface\">\n\t\t\t\t\t\tEach of the sections below represents a Life of the Dragon window, indicating when it started, how many window-restricted OGCDs it contained, and which personal buffs were active during each cast. Ideally, each 30 second window should contain a full three <ActionLink {...ACTIONS.NASTROND}/> casts and one <ActionLink {...ACTIONS.STARDIVER}/> cast, while overlapping with at least one of your personal buffs.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t\t<Accordion exclusive={false} panels={lotdPanels} styled fluid/>\n\t\t\t</Fragment>;\n        }\n        // This should really never happen but if they didn't go into LotD once, we shouldn't bother showing the section\n        return false;\n    }\n}\nBloodOfTheDragon.handle = 'bloodOfTheDragon';\nBloodOfTheDragon.title = t('drg.blood.title') `Life of the Dragon`;\nBloodOfTheDragon.dependencies = [\n    'brokenLog',\n    'checklist',\n    'combatants',\n    'cooldowns',\n    'death',\n    'suggestions',\n    'timeline',\n];\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Accordion, Header, Message } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Rotation from 'components/ui/Rotation';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst BAD_LIFE_SURGE_CONSUMERS = [\n    ACTIONS.TRUE_THRUST.id,\n    ACTIONS.RAIDEN_THRUST.id,\n    ACTIONS.VORPAL_THRUST.id,\n    ACTIONS.DISEMBOWEL.id,\n    ACTIONS.CHAOS_THRUST.id,\n    ACTIONS.PIERCING_TALON.id,\n    ACTIONS.DOOM_SPIKE.id,\n    ACTIONS.SONIC_THRUST.id,\n    ACTIONS.COERTHAN_TORMENT.id,\n];\nconst FINAL_COMBO_HITS = [\n    ACTIONS.FANG_AND_CLAW.id,\n    ACTIONS.WHEELING_THRUST.id,\n];\nconst BAD_BUFF_ACTIONS = [\n    ACTIONS.CHAOS_THRUST.id,\n    ACTIONS.FULL_THRUST.id,\n];\nconst STATUS_MAP = {\n    [ACTIONS.LANCE_CHARGE.id]: STATUSES.LANCE_CHARGE.id,\n    [ACTIONS.DRAGON_SIGHT.id]: STATUSES.RIGHT_EYE.id,\n};\nconst BUFF_GCD_TARGET = 8;\nconst BUFF_GCD_WARNING = 7;\nconst BUFF_GCD_ERROR = 0;\nexport default class Buffs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastGcd = 0;\n        this._badLifeSurges = 0;\n        this._fifthGcd = false;\n        this._soloDragonSight = false;\n        this._buffWindows = {\n            [STATUSES.LANCE_CHARGE.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.RIGHT_EYE.id]: {\n                current: null,\n                history: [],\n            },\n        };\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('cast', { by: 'player', abilityId: [ACTIONS.LANCE_CHARGE.id, ACTIONS.DRAGON_SIGHT.id] }, this._onBuffCast);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.RIGHT_EYE_SOLO.id }, () => this._soloDragonSight = true);\n        this.addHook('complete', this._onComplete);\n    }\n    _pushToWindow(event, statusId, tracker) {\n        if (this.combatants.selected.hasStatus(statusId)) {\n            if (tracker.current === null) {\n                // This can potentially happen if either LC or DS are used pre-pull\n                tracker.current = {\n                    start: this.parser.fight.start_time,\n                    casts: [],\n                    isBad: false,\n                };\n            }\n            tracker.current.casts.push(event);\n        }\n    }\n    _onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (action && action.onGcd) {\n            this._lastGcd = action.id;\n            if (BAD_LIFE_SURGE_CONSUMERS.includes(action.id)) {\n                this._fifthGcd = false; // Reset the 4-5 combo hit flag on other GCDs\n                if (this.combatants.selected.hasStatus(STATUSES.LIFE_SURGE.id)) {\n                    this._badLifeSurges++;\n                }\n            }\n            else if (FINAL_COMBO_HITS.includes(action.id)) {\n                if (!this._fifthGcd) {\n                    // If we get 2 of these in a row (4-5 combo hits), only the first one is considered bad, so set a flag to ignore the next one\n                    this._fifthGcd = true;\n                    if (this.combatants.selected.hasStatus(STATUSES.LIFE_SURGE.id)) {\n                        this._badLifeSurges++;\n                    }\n                }\n            }\n        }\n        this._pushToWindow(event, STATUSES.LANCE_CHARGE.id, this._buffWindows[STATUSES.LANCE_CHARGE.id]);\n        this._pushToWindow(event, STATUSES.RIGHT_EYE.id, this._buffWindows[STATUSES.RIGHT_EYE.id]);\n        this._pushToWindow(event, STATUSES.RIGHT_EYE_SOLO.id, this._buffWindows[STATUSES.RIGHT_EYE.id]);\n    }\n    _onBuffCast(event) {\n        const tracker = this._buffWindows[STATUS_MAP[event.ability.guid]];\n        if (tracker.current !== null) {\n            tracker.current.gcdCount = tracker.current.casts.filter(cast => {\n                const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n                return action && action.onGcd;\n            }).length;\n            tracker.history.push(tracker.current);\n        }\n        tracker.current = {\n            start: event.timestamp,\n            casts: [],\n            isBad: BAD_BUFF_ACTIONS.includes(this._lastGcd),\n        };\n    }\n    _getDisembowelUptimePercent() {\n        const statusUptime = this.combatants.getStatusUptime(STATUSES.DISEMBOWEL.id);\n        const fightUptime = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightUptime) * 100;\n    }\n    _closeLastWindow(statusId) {\n        // So we don't include partial windows\n        if (this.combatants.selected.hasStatus(statusId)) {\n            return;\n        }\n        const tracker = this._buffWindows[statusId];\n        // If there's no current cast just stop here\n        if (!tracker.current) {\n            return;\n        }\n        tracker.current.gcdCount = tracker.current.casts.filter(cast => {\n            const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n            return action && action.onGcd;\n        }).length;\n        tracker.history.push(tracker.current);\n    }\n    _onComplete() {\n        this._closeLastWindow(STATUSES.LANCE_CHARGE.id);\n        this._closeLastWindow(STATUSES.RIGHT_EYE.id);\n        this.checklist.add(new Rule({\n            name: <Trans id=\"drg.buffs.checklist.name\">Keep {ACTIONS.DISEMBOWEL.name} up</Trans>,\n            description: <Trans id=\"drg.buffs.checklist.description\">\n\t\t\t\t<ActionLink {...ACTIONS.DISEMBOWEL}/> provides a 10% boost to your personal damage and should always be kept up.\n\t\t\t</Trans>,\n            displayOrder: DISPLAY_ORDER.DISEMBOWEL,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"drg.buffs.checklist.requirement.name\"><ActionLink {...ACTIONS.DISEMBOWEL}/> uptime</Trans>,\n                    percent: () => this._getDisembowelUptimePercent(),\n                }),\n            ],\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.LIFE_SURGE.icon,\n            content: <Trans id=\"drg.buffs.suggestions.life-surge.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.LIFE_SURGE}/> on any GCD that isn't <ActionLink {...ACTIONS.FULL_THRUST}/> or a 5th combo hit. Any other combo action will have significantly less potency, losing a lot of the benefit of the guaranteed crit.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this._badLifeSurges,\n            why: <Trans id=\"drg.buffs.suggestions.life-surge.why\">\n\t\t\t\tYou used {ACTIONS.LIFE_SURGE.name} on a non-optimal GCD <Plural value={this._badLifeSurges} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n        const badLanceCharges = this._buffWindows[STATUSES.LANCE_CHARGE.id].history.filter(window => window.casts.length > 0 && window.isBad).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.LANCE_CHARGE.icon,\n            content: <Trans id=\"drg.buffs.suggestions.bad-lcs.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.LANCE_CHARGE}/> immediately after <ActionLink {...ACTIONS.CHAOS_THRUST}/> or <ActionLink {...ACTIONS.FULL_THRUST}/> in order to get the most possible damage out of each window.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                3: SEVERITY.MEDIUM,\n            },\n            value: badLanceCharges,\n            why: <Trans id=\"drg.buffs.suggestions.bad-lcs.why\">\n\t\t\t\t{badLanceCharges} of your Lance Charge windows started right after a standard combo finisher.\n\t\t\t</Trans>,\n        }));\n        // I'm not going to say how close I came to naming this variable badDragons\n        const badDragonSights = this._buffWindows[STATUSES.RIGHT_EYE.id].history.filter(window => window.casts.length > 0 && window.isBad).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DRAGON_SIGHT.icon,\n            content: <Trans id=\"drg.buffs.suggestions.bad-dss.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.DRAGON_SIGHT}/> immediately after <ActionLink {...ACTIONS.CHAOS_THRUST}/> or <ActionLink {...ACTIONS.FULL_THRUST}/> in order to get the most possible damage out of each window.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                3: SEVERITY.MEDIUM,\n            },\n            value: badDragonSights,\n            why: <Trans id=\"drg.buffs.suggestions.bad-dss.why\">\n\t\t\t\t{badDragonSights} of your Dragon Sight windows started right after a standard combo finisher.\n\t\t\t</Trans>,\n        }));\n        if (this._soloDragonSight) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.DRAGON_SIGHT.icon,\n                content: <Trans id=\"drg.buffs.suggestions.solo-ds.content\">\n\t\t\t\t\tAlthough it doesn't impact your personal DPS, try to always use Dragon Sight on a partner in group content so that someone else can benefit from the damage bonus too.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MINOR,\n                why: <Trans id=\"drg.buffs.suggestions.solo-ds.why\">\n\t\t\t\t\tAt least 1 of your Dragon Sight casts didn't have a tether partner.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n    _formatGcdCount(count) {\n        if (count === BUFF_GCD_ERROR) {\n            return <span className=\"text-error\">{count}</span>;\n        }\n        if (count <= BUFF_GCD_WARNING) {\n            return <span className=\"text-warning\">{count}</span>;\n        }\n        return count;\n    }\n    output() {\n        const lcPanels = this._buffWindows[STATUSES.LANCE_CHARGE.id].history.map(window => {\n            return {\n                title: {\n                    key: 'title-' + window.start,\n                    content: <Fragment>\n\t\t\t\t\t\t{this.parser.formatTimestamp(window.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t<Trans id=\"drg.buffs.panel-count\">\n\t\t\t\t\t\t\t{this._formatGcdCount(window.gcdCount)} <Plural value={window.gcdCount} one=\"GCD\" other=\"GCDs\"/>\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Fragment>,\n                },\n                content: {\n                    key: 'content-' + window.start,\n                    content: <Rotation events={window.casts}/>,\n                },\n            };\n        });\n        const dsPanels = this._buffWindows[STATUSES.RIGHT_EYE.id].history.map(window => {\n            return {\n                title: {\n                    key: 'title-' + window.start,\n                    content: <Fragment>\n\t\t\t\t\t\t{this.parser.formatTimestamp(window.start)}\n\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t<Trans id=\"drg.buffs.panel-count\">\n\t\t\t\t\t\t\t{this._formatGcdCount(window.gcdCount)} <Plural value={window.gcdCount} one=\"GCD\" other=\"GCDs\"/>\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Fragment>,\n                },\n                content: {\n                    key: 'content-' + window.start,\n                    content: <Rotation events={window.casts}/>,\n                },\n            };\n        });\n        return <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"drg.buffs.accordion.message\">Each of your <ActionLink {...ACTIONS.LANCE_CHARGE}/> and <ActionLink {...ACTIONS.DRAGON_SIGHT}/> windows should ideally contain {BUFF_GCD_TARGET} GCDs at minimum. In an optimal situation, you should be able to fit {BUFF_GCD_TARGET + 1}, but it may be difficult depending on ping and skill speed. Each buff window below indicates how many GCDs it contained and will display all the casts in the window if expanded.</Trans>\n\t\t\t</Message>\n\t\t\t{lcPanels.length > 0 && <>\n\t\t\t\t<Header size=\"small\">\n\t\t\t\t\t<Trans id=\"drg.buffs.accordion.lc-header\">Lance Charge</Trans>\n\t\t\t\t</Header>\n\t\t\t\t<Accordion exclusive={false} panels={lcPanels} styled fluid/>\n\t\t\t</>}\n\t\t\t{dsPanels.length > 0 && <>\n\t\t\t\t<Header size=\"small\">\n\t\t\t\t\t<Trans id=\"drg.buffs.accordion.ds-header\">Dragon Sight</Trans>\n\t\t\t\t</Header>\n\t\t\t\t<Accordion exclusive={false} panels={dsPanels} styled fluid/>\n\t\t\t</>}\n\t\t</Fragment>;\n    }\n}\nBuffs.handle = 'buffs';\nBuffs.title = t('drg.buffs.title') `Lance Charge & Dragon Sight`;\nBuffs.dependencies = [\n    'checklist',\n    'combatants',\n    'invuln',\n    'suggestions',\n];\n","import CoreCombos from 'parser/core/modules/Combos';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Combos extends CoreCombos {\n}\n// Overrides\nCombos.suggestionIcon = ACTIONS.FULL_THRUST.icon;\n","import CoreCooldowns from 'parser/core/modules/Cooldowns';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    ACTIONS.BATTLE_LITANY.id,\n    ACTIONS.DRAGON_SIGHT.id,\n    ACTIONS.LANCE_CHARGE.id,\n    ACTIONS.JUMP.id,\n    ACTIONS.HIGH_JUMP.id,\n    ACTIONS.MIRAGE_DIVE.id,\n    ACTIONS.GEIRSKOGUL.id,\n    ACTIONS.NASTROND.id,\n    ACTIONS.STARDIVER.id,\n    ACTIONS.SPINESHATTER_DIVE.id,\n    ACTIONS.DRAGONFIRE_DIVE.id,\n    ACTIONS.LIFE_SURGE.id,\n    ACTIONS.BLOOD_OF_THE_DRAGON.id,\n    ACTIONS.ELUSIVE_JUMP.id,\n];\n","import { Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport DoTs from 'parser/core/modules/DoTs';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nexport default class Debuffs extends DoTs {\n    addChecklistRules() {\n        this.checklist.add(new Rule({\n            name: <Trans id=\"drg.debuffs.checklist.name\">Keep your debuffs up</Trans>,\n            description: <Trans id=\"drg.debuffs.checklist.description\">\n\t\t\t\t<ActionLink {...ACTIONS.CHAOS_THRUST}/> provides a potent DoT which should be maintained at all times.\n\t\t\t</Trans>,\n            displayOrder: DISPLAY_ORDER.DEBUFFS,\n            target: 90,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"drg.debuffs.checklist.requirement.chaos-thrust.name\"><ActionLink {...ACTIONS.CHAOS_THRUST}/> uptime</Trans>,\n                    percent: () => this.getUptimePercent(STATUSES.CHAOS_THRUST.id),\n                }),\n            ],\n        }));\n    }\n    addClippingSuggestions(clip) {\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.CHAOS_THRUST.icon,\n            content: <Trans id=\"drg.debuffs.suggestions.clipping.content\">\n\t\t\t\tAvoid refreshing <ActionLink {...ACTIONS.CHAOS_THRUST}/> significantly before its expiration, as it usually indicates rotational errors. DRG's strict 10-GCD rotation should have you refreshing Chaos Thrust with 1-2 seconds remaining, depending on your skill speed.\n\t\t\t</Trans>,\n            tiers: {\n                5: SEVERITY.MINOR,\n                10: SEVERITY.MEDIUM,\n                15: SEVERITY.MAJOR,\n            },\n            value: this.getClippingAmount(STATUSES.CHAOS_THRUST.id),\n            why: <Trans id=\"drg.debuffs.suggestions.clipping.why\">\n\t\t\t\tYou lost {this.parser.formatDuration(clip[STATUSES.CHAOS_THRUST.id])} of Chaos Thrust to early refreshes.\n\t\t\t</Trans>,\n        }));\n    }\n}\nDebuffs.dependencies = [\n    ...DoTs.dependencies,\n    'checklist',\n    'suggestions',\n];\nDebuffs.statusesToTrack = [\n    STATUSES.CHAOS_THRUST.id,\n];\n","import ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\n// +2s start of fight buffer added for all first use\n// at high skill speeds, Battle Litany is first, so the order is a bit fluid,\n// however all are used before the third GCD\nconst BUFF_FIRST_USE_OFFSET = 7000;\n// the high sks opener delays jumps to better line up with later windows,\n// but isn't used with current sets. Timings listed here should work\n// for both openers, if the high sks build ever becomes relevant.\nconst JUMP_FIRST_USE_OFFSET = 16100; // before 7th gcd\nconst SSD_FIRST_USE_OFFSET = 20800; // before 9th gcd\nconst DFD_FIRST_USE_OFFSET = 23500; // before 10th gcd\n// always before Full Thrust, the 8th GCD\nconst LIFE_SURGE_FIRST_USE_OFFSET = 19500;\nexport default class OGCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        this.defaultFirstUseOffset = BUFF_FIRST_USE_OFFSET;\n        this.trackedCds = [\n            {\n                cooldowns: [ACTIONS.HIGH_JUMP],\n                firstUseOffset: JUMP_FIRST_USE_OFFSET,\n            },\n            {\n                cooldowns: [ACTIONS.SPINESHATTER_DIVE],\n                firstUseOffset: SSD_FIRST_USE_OFFSET,\n            },\n            {\n                cooldowns: [ACTIONS.DRAGONFIRE_DIVE],\n                firstUseOffset: DFD_FIRST_USE_OFFSET,\n            },\n            {\n                cooldowns: [ACTIONS.LIFE_SURGE],\n                firstUseOffset: LIFE_SURGE_FIRST_USE_OFFSET,\n            },\n            { cooldowns: [ACTIONS.LANCE_CHARGE] },\n            { cooldowns: [ACTIONS.DRAGON_SIGHT] },\n            { cooldowns: [ACTIONS.BATTLE_LITANY] },\n        ];\n    }\n}\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport Module from 'parser/core/Module';\nimport STATUSES from 'data/STATUSES';\nimport ACTIONS from 'data/ACTIONS';\nimport { getDataBy } from 'data';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { Table, Message, Icon, Button, Header } from 'semantic-ui-react';\nimport { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nconst ROTATION_IDS = [\n    ACTIONS.RAIDEN_THRUST.id,\n    ACTIONS.DISEMBOWEL.id,\n    ACTIONS.CHAOS_THRUST.id,\n    ACTIONS.TRUE_THRUST.id,\n    ACTIONS.VORPAL_THRUST.id,\n    ACTIONS.FULL_THRUST.id,\n];\nconst PROC_IDS = [ACTIONS.FANG_AND_CLAW.id, ACTIONS.WHEELING_THRUST.id];\nconst NEXT_COMBO = {\n    [ACTIONS.FANG_AND_CLAW.id]: ACTIONS.WHEELING_THRUST.id,\n    [ACTIONS.WHEELING_THRUST.id]: ACTIONS.FANG_AND_CLAW.id,\n};\nconst TRUE_NORTH_CHARGES = 2;\nconst TRUE_NORTH_CD_BUFFER = 200;\nconst TRUE_NORTH_CD = ACTIONS.TRUE_NORTH.cooldown * 1000 - TRUE_NORTH_CD_BUFFER;\nexport default class Positionals extends Module {\n    constructor(...args) {\n        super(...args);\n        // tracking raiden thrust procs\n        this._rtCombos = [];\n        this._currentCombo = null;\n        // true north tracking\n        this._tnCharges = 2;\n        this._tnCharging = false;\n        this.addHook('cast', { by: 'player', abilityId: ROTATION_IDS }, this._onGcd);\n        this.addHook('cast', { by: 'player', abilityId: PROC_IDS }, this._onProcGcd);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.RAIDEN_THRUST_READY.id }, this._procSuccess);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.TRUE_NORTH.id }, this._tnUsed);\n        this.addHook('complete', this._onComplete);\n    }\n    // duplicate code - eventually may want in single location\n    createTimelineButton(timestamp) {\n        return <Button circular compact icon=\"time\" size=\"small\" onClick={() => this.timeline.show(timestamp - this.parser.fight.start_time, timestamp - this.parser.fight.start_time)} content={this.parser.formatTimestamp(timestamp)}/>;\n    }\n    // end duplicate code\n    _onGcd() {\n        if (!this._currentCombo) {\n            return;\n        }\n        // close the window\n        // if next action expected is RT this should be added to the combo list, otherwise it was dropped somewhere.\n        // if it was an actually broken combo, a different module will yell. otherwise, it was probably due to invuln\n        // or downtime and thus not a possible RT proc event.\n        if (this._currentCombo.next === ACTIONS.RAIDEN_THRUST.id) {\n            this._rtCombos.push(this._currentCombo);\n        }\n        this._currentCombo = null;\n    }\n    _onProcGcd(event) {\n        if (!this._currentCombo) {\n            // if we don't have an open combo window, open one\n            this._currentCombo = {\n                next: NEXT_COMBO[event.ability.guid],\n                success: false,\n                trueNorthCharges: this._tnCharges,\n                time: event.timestamp,\n            };\n        }\n        else if (this._currentCombo) {\n            // add the time\n            this._currentCombo.time = event.timestamp;\n            // set next to RT id for determining if combo completed.\n            this._currentCombo.next = ACTIONS.RAIDEN_THRUST.id;\n            // update TN charges\n            this._currentCombo.trueNorthCharges = this._tnCharges;\n        }\n    }\n    // called exactly when the timestamp resolves\n    _updateTnCharges() {\n        this._tnCharges = Math.min(this._tnCharges + 1, TRUE_NORTH_CHARGES);\n        if (this._tnCharges < TRUE_NORTH_CHARGES) {\n            // if we're below the max, queue another charge since the cd will keep ticking\n            this.addTimestampHook(this.parser.currentTimestamp + TRUE_NORTH_CD, this._updateTnCharges);\n        }\n        else {\n            this._tnCharging = false;\n        }\n    }\n    _tnUsed(event) {\n        // remove charge\n        this._tnCharges -= 1;\n        // if we're below 0, clamp\n        if (this._tnCharges < 0) {\n            // also probably somethin busted here\n            this.brokenLog.trigger(this, 'negative true north', (<Trans id=\"drg.positionals.trigger.negative-true-north\">\n\t\t\t\t\t<ActionLink {...ACTIONS.TRUE_NORTH}/> was cast without any remaining charges detected.\n\t\t\t\t</Trans>));\n            this._tnCharges = 0;\n        }\n        // mark next recharge time, using the timestamp hook\n        if (!this._tnCharging) {\n            this._tnCharging = true;\n            this.addTimestampHook(event.timestamp + TRUE_NORTH_CD, this._updateTnCharges);\n        }\n    }\n    _procSuccess() {\n        // you did it!\n        if (this._currentCombo) {\n            this._currentCombo.success = true;\n        }\n        // don't actually close until next gcd happens\n    }\n    _onComplete() {\n        const missed = this._rtCombos.filter(combo => !combo.success).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.RAIDEN_THRUST.icon,\n            content: <Trans id=\"drg.positionals.suggestions.content\">Performing the proper positionals for <ActionLink {...ACTIONS.FANG_AND_CLAW}/> and <ActionLink {...ACTIONS.WHEELING_THRUST}/> will do more damage and let you use <ActionLink {...ACTIONS.RAIDEN_THRUST}/>. Try to land these positionals, and use <ActionLink {...ACTIONS.TRUE_NORTH}/> if it's available.</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                10: SEVERITY.MEDIUM,\n            },\n            value: missed,\n            why: <Trans id=\"drg.positionals.suggestions.why\">You missed <Plural value={missed} one=\"# proc\" other=\"# procs\"/> of Raiden Thrust.</Trans>,\n        }));\n    }\n    _checkIcon(success, size = 'large') {\n        return success ? <Icon color=\"green\" name=\"check\" size={size}/> : <Icon color=\"red\" name=\"x\" size={size}/>;\n    }\n    _procTable() {\n        return this._rtCombos.filter(combo => !combo.success).map(combo => {\n            const action = getDataBy(ACTIONS, 'id', combo.next);\n            return <Table.Row key={combo.time}>\n\t\t\t\t<Table.Cell>{this.createTimelineButton(combo.time)}</Table.Cell>\n\t\t\t\t<Table.Cell><ActionLink {...action}/></Table.Cell>\n\t\t\t\t<Table.Cell textAlign=\"center\">{this._checkIcon(combo.trueNorthCharges > 0, '')} (<Plural id=\"drg.positionals.tn-charges\" value={combo.trueNorthCharges} one=\"# charge\" other=\"# charges\"/>)</Table.Cell>\n\t\t\t</Table.Row>;\n        });\n    }\n    output() {\n        const missed = this._rtCombos.filter(combo => !combo.success).length;\n        const withTn = this._rtCombos.filter(combo => !combo.success && combo.trueNorthCharges > 0).length;\n        return <Fragment>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"drg.positionals.analysis.message\">Being at the rear when using <ActionLink {...ACTIONS.WHEELING_THRUST}/> or on the flank when using <ActionLink {...ACTIONS.FANG_AND_CLAW}/> will allow you to use <ActionLink {...ACTIONS.RAIDEN_THRUST}/> instead of <ActionLink {...ACTIONS.TRUE_THRUST}/>. You should be trying to proc this ability as much as possible, relying on <ActionLink {...ACTIONS.TRUE_NORTH}/> in situations where you cannot reach the proper position. The table below displays missed positionals (if any), and whether or not <ActionLink {...ACTIONS.TRUE_NORTH}/> was available to use.</Trans>\n\t\t\t</Message>\n\t\t\t<Message info>\n\t\t\t\t<p><Trans id=\"drg.positionals.analysis.missed\"><Icon name=\"info\"/> You missed <strong>{missed}</strong> of <strong>{this._rtCombos.length}</strong> possible <ActionLink {...ACTIONS.RAIDEN_THRUST}/> procs.</Trans></p>\n\t\t\t\t{missed > 0 && <p><Trans id=\"drg.positionals.analysis.truenorth\">Of these missed procs, <strong>{withTn}</strong> could be handled with <ActionLink {...ACTIONS.TRUE_NORTH}/>.</Trans></p>}\n\t\t\t</Message>\n\t\t\t{missed > 0 && <>\n\t\t\t\t<Header size=\"small\"><Trans id=\"drg.positionals.table.title\">Missed Positionals</Trans></Header>\n\t\t\t\t<Table>\n\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t<Table.Row key=\"pos-header\">\n\t\t\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t\t\t<Trans id=\"drg.positionals.table.time\">Time</Trans>\n\t\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t\t\t<Trans id=\"drg.positionals.table.procact\">Action</Trans>\n\t\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t\t\t<Trans id=\"drg.positionals.table.truenorth\">True North Status</Trans>\n\t\t\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t</Table.Header>\n\t\t\t\t\t{this._procTable()}\n\t\t\t\t</Table>\n\t\t\t</>}\n\t\t</Fragment>;\n    }\n}\nPositionals.handle = 'positionals';\nPositionals.title = t('drg.positionals.title') `Positionals`;\nPositionals.dependencies = [\n    'brokenLog',\n    'suggestions',\n    'timeline',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nexport default class Procs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._casts = {\n            [ACTIONS.FANG_AND_CLAW.id]: 0,\n            [ACTIONS.WHEELING_THRUST.id]: 0,\n            [ACTIONS.MIRAGE_DIVE.id]: 0,\n        };\n        this._removedProcs = {\n            [STATUSES.SHARPER_FANG_AND_CLAW.id]: 0,\n            [STATUSES.ENHANCED_WHEELING_THRUST.id]: 0,\n            [STATUSES.DIVE_READY.id]: 0,\n        };\n        this._overwrittenDiveReady = 0;\n        this.addHook('cast', { by: 'player', abilityId: Object.keys(this._casts).map(Number) }, this._onCast);\n        this.addHook('refreshbuff', { by: 'player', abilityId: STATUSES.DIVE_READY.id }, this._onReadyOverwritten); // The other two can't be overwritten due to how they drop\n        this.addHook('removebuff', { by: 'player', abilityId: Object.keys(this._removedProcs).map(Number) }, this._onProcRemoved);\n        this.addHook('complete', this._onComplete);\n    }\n    // For all of our cast/removal tracking, we only want to know if it happened outside of downtime to avoid errant penalization.\n    // The only one that doesn't need the check is overwriting Mirage Dive, since you can't get a proc from an invulnerable target.\n    _onCast(event) {\n        if (!this.downtime.isDowntime(event.timestamp)) {\n            this._casts[event.ability.guid]++;\n        }\n    }\n    _onReadyOverwritten() {\n        this._overwrittenDiveReady++;\n    }\n    _onProcRemoved(event) {\n        if (!this.downtime.isDowntime(event.timestamp)) {\n            this._removedProcs[event.ability.guid]++;\n        }\n    }\n    _onComplete() {\n        const droppedFang = this._removedProcs[STATUSES.SHARPER_FANG_AND_CLAW.id] - this._casts[ACTIONS.FANG_AND_CLAW.id];\n        const droppedWheeling = this._removedProcs[STATUSES.ENHANCED_WHEELING_THRUST.id] - this._casts[ACTIONS.WHEELING_THRUST.id];\n        const droppedMirage = this._removedProcs[STATUSES.DIVE_READY.id] - this._casts[ACTIONS.MIRAGE_DIVE.id];\n        this.suggestions.add(new TieredSuggestion({\n            icon: droppedFang >= droppedWheeling ? ACTIONS.FANG_AND_CLAW.icon : ACTIONS.WHEELING_THRUST.icon,\n            content: <Trans id=\"drg.procs.suggestions.extenders.content\">\n\t\t\t\tAvoid interrupting your combos at the <ActionLink {...ACTIONS.FANG_AND_CLAW}/> and <ActionLink {...ACTIONS.WHEELING_THRUST}/> stages, as it causes you to lose the procs that allow you to cast them, costing you both the cast and the <ActionLink {...ACTIONS.BLOOD_OF_THE_DRAGON}/> duration that comes with it.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: droppedFang + droppedWheeling,\n            why: <Trans id=\"drg.procs.suggestions.extenders.why\">\n\t\t\t\tYou dropped <Plural value={droppedFang} one=\"# Fang and Claw proc\" other=\"# Fang and Claw procs\"/> and <Plural value={droppedWheeling} one=\"# Wheeling Thrust proc\" other=\"# Wheeling Thrust procs\"/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.MIRAGE_DIVE.icon,\n            content: <Trans id=\"drg.procs.suggestions.mirage-dropped.content\">\n\t\t\t\tAvoid letting your <StatusLink {...STATUSES.DIVE_READY}/> procs fall off, as it can delay your Life of the Dragon windows and potentially cost you a lot of DPS.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: droppedMirage,\n            why: <Trans id=\"drg.procs.suggestions.mirage-dropped.why\">\n\t\t\t\tYou dropped <Plural value={droppedMirage} one=\"# Mirage Dive proc\" other=\"# Mirage Dive procs\"/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.MIRAGE_DIVE.icon,\n            content: <Trans id=\"drg.procs.suggestions.mirage-overwritten.content\">\n\t\t\t\tAvoid casting <ActionLink {...ACTIONS.JUMP}/> and <ActionLink {...ACTIONS.SPINESHATTER_DIVE}/> when you already have a <StatusLink {...STATUSES.DIVE_READY}/> procs, as it overwrites them and can delay your Life of the Dragon windows and potentially cost you a lot of DPS.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: this._overwrittenDiveReady,\n            why: <Trans id=\"drg.procs.suggestions.mirage-overwritten.why\">\n\t\t\t\tYou overwrote <Plural value={this._overwrittenDiveReady} one=\"# Mirage Dive proc\" other=\"# Mirage Dive procs\"/>.\n\t\t\t</Trans>,\n        }));\n    }\n}\nProcs.handle = 'procs';\nProcs.dependencies = [\n    'downtime',\n    'suggestions',\n];\n","import CoreWeaving from 'parser/core/modules/Weaving';\nimport ACTIONS from 'data/ACTIONS';\nconst JUMPS = [\n    ACTIONS.JUMP.id,\n    ACTIONS.HIGH_JUMP.id,\n    ACTIONS.SPINESHATTER_DIVE.id,\n    ACTIONS.DRAGONFIRE_DIVE.id,\n    ACTIONS.STARDIVER.id,\n];\nexport default class Weaving extends CoreWeaving {\n    isBadWeave(weave /*, maxWeaves*/) {\n        for (let i = 0; i < weave.weaves.length; i++) {\n            if (JUMPS.includes(weave.weaves[i].ability.guid)) {\n                // Jumps should only ever be single-woven; everything else follows the normal rules\n                return weave.weaves.length > 1;\n            }\n        }\n        return super.isBadWeave(weave);\n    }\n}\n","import BloodOfTheDragon from './BloodOfTheDragon';\nimport Buffs from './Buffs';\nimport Combos from './Combos';\nimport Cooldowns from './Cooldowns';\nimport Debuffs from './Debuffs';\nimport OGCDDowntime from './OGCDDowntime';\nimport Positionals from './Positionals';\nimport Procs from './Procs';\n//import RotationWatchdog from './RotationWatchdog'\nimport Weaving from './Weaving';\nexport default [\n    BloodOfTheDragon,\n    Buffs,\n    Combos,\n    Cooldowns,\n    Debuffs,\n    OGCDDowntime,\n    Positionals,\n    Procs,\n    //RotationWatchdog, // TODO - Restore this module after making it actually correct for ShB\n    Weaving,\n];\n"],"sourceRoot":""}
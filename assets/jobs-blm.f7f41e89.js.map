{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/Combatant.js","webpack:///./src/parser/core/modules/Combatants.js","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/jobs/blm/modules/Gauge.js","webpack:///./src/parser/jobs/blm/modules/Procs.js","webpack:///./src/parser/jobs/blm/modules/DISPLAY_ORDER.js","webpack:///./src/parser/jobs/blm/modules/Weaving.js","webpack:///./src/parser/jobs/blm/modules/Elements.js","webpack:///./src/parser/jobs/blm/modules/RotationWatchdog.tsx","webpack:///./src/parser/jobs/blm/modules/OGCDDowntime.tsx","webpack:///./src/parser/jobs/blm/modules/Speedmod.js","webpack:///./src/parser/jobs/blm/modules/Leylines.js","webpack:///./src/parser/jobs/blm/modules/NotCasting.js","webpack:///./src/parser/jobs/blm/modules/Sharpcast.js","webpack:///./src/parser/jobs/blm/modules/index.js"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","Combatant","Entity","constructor","parser","info","super","name","type","guid","Combatants","Entities","arguments","_players","getEntities","getEntity","actorId","player","report","friendlies","find","handle","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","1","2.5","WEAVING_SEVERITY","SEVERITY","MEDIUM","5","MAJOR","Weaving","Module","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","addHook","by","_onBeginCast","_onCast","_onComplete","event","action","getAction","ability","autoAttack","isOgcd","push","timestamp","_saveIfBad","badWeaves","suggestions","add","TieredSuggestion","content","href","scrollTo","message","title","why","length","tiers","value","leadingGcdEvent","fight","start_time","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","onGcd","maxWeaves","weaveCount","filter","isUntargetable","castTime","forEvent","closest","matchClosestLower","speedmod","get","gcdLength","gcd","getEstimate","output","panels","item","formatTimestamp","exclusive","styled","fluid","dependencies","GAUGE_EVENTS","BLM_GAUGE_EVENT","Symbol","ENOCHIAN_DURATION_REQUIRED","ASTRAL_UMBRAL_DURATION","MAX_ASTRAL_UMBRAL_STACKS","MAX_UMBRAL_HEART_STACKS","FLARE_MAX_HEART_CONSUMPTION","MAX_POLYGLOT_STACKS","Gauge","_astralFireStacks","_umbralIceStacks","_umbralHeartStacks","_astralUmbralStackTimer","_hasEnochian","_enochianTimer","_enochianDownTimer","stop","time","_polyglotStacks","_droppedEnoTimestamps","_lostPolyglot","_overwrittenPolyglot","_normalizeIndex","_currentTimestamp","_toAdd","_lastAdded","gaugeValuesChanged","lastGaugeEvent","astralFire","umbralIce","umbralHearts","enochian","polyglot","addEvent","lastAdded","insertAfter","normalise","updateStackTimers","includes","byPlayer","toPlayer","_onDeath","offset","sort","a","b","forEach","splice","onAstralUmbralTimeout","onEnoDropped","enoRunTime","onGainPolyglot","Math","min","onConsumePolyglot","max","onGainAstralFireStacks","stackCount","dropsElementOnSwap","onGainUmbralIceStacks","onTransposeStacks","tryGainUmbralHearts","count","tryConsumeUmbralHearts","force","_startEnoTimer","_enoDownTimerStop","_countLostPolyglots","unableToActTime","unableToAct","getDowntimes","downtime","reduce","duration","floor","ACTIONS","ENOCHIAN","brokenLog","trigger","BLIZZARD_I","BLIZZARD_II","FREEZE","BLIZZARD_III","BLIZZARD_IV","UMBRAL_SOUL","FIRE_I","FIRE_II","FIRE_III","FIRE_IV","DESPAIR","FLARE","XENOGLOSSY","FOUL","TRANSPOSE","droppedEno","drop","Suggestion","severity","THUNDER_ACTIONS","THUNDER","THUNDER_II","THUNDER_III","THUNDER_IV","PROC_BUFFS","STATUSES","THUNDERCLOUD","FIRESTARTER","STATUS_DURATION_MILLIS","ACTION_PROCS","FIRE_III_PROC","THUNDER_III_PROC","THUNDER_IV_PROC","Procs","_castingSpellId","_buffWindows","current","history","_droppedProcs","_group","abilityId","_onLoseProc","_onGainProc","_onRefreshProc","to","Group","order","nestedGroups","timeline","addGroup","getGroupIdForStatus","status","groupId","_stopAndSave","statusId","actionId","getDataBy","_tryConsumeProc","_getAffectingProcId","set","overrideAction","endTime","currentTimestamp","countDrops","tracker","buff","fightStart","window","addItem","Item","group","src","alt","OGCD_EXCEPTIONS","LUCID_DREAMING","ADDLE","SURECAST","OPENER_ENO_TIME_THRESHHOLD","MAX_BUFF_STACKS","BlmWeaving","_lastF3FastCast","_lastB3FastCast","_ctIndex","_onGaugeChange","_beginFire3","_beginBlizzard3","TRIPLECAST","_onApplyTriple","_onRemoveTriple","reset","displayOrder","DISPLAY_ORDER","FIRE_SPELLS","ICE_SPELLS","DEBUG_SHOW_ALL_CYCLES","EXPECTED_FIRE4","NO_UH_EXPECTED_FIRE4","FIRE4_FROM_MANAFONT","MIN_MP_FOR_FULL_ROTATION","THUNDERCLOUD_MILLIS","AF_UI_BUFF_MAX_STACK","ISSUE_SEVERITY_TIERS","MINOR","3","CYCLE_ENDPOINTS","MIN_ROTATION_LENGTH","CYCLE_ERRORS","NONE","priority","FINAL_OR_DOWNTIME","SHORT","MISSING_FIRE4S","MISSING_DESPAIRS","MANAFONT_BEFORE_DESPAIR","MANAFONT","EXTRA_T3","EXTRA_F1","NO_FIRE_SPELLS","DROPPED_ENOCHIAN","DIED","showName","RAISE","Cycle","gaugeState","casts","hasManafont","inFirePhase","atypicalAFStart","firePhaseStartMP","finalOrDowntime","gaugeStateBeforeFire","GaugeState","_errorCode","startTime","Object","assign","code","expectedCount","cast","expectedFire4s","actualFire4s","expectedDespairs","actualDespairs","overrideErrorCode","RotationWatchdog","currentGaugeState","currentRotation","firstEvent","missedF4s","extraF1s","extraT3s","rotationsWithoutFire","manafontBeforeDespair","astralFiresMissingDespairs","thunder3Casts","init","onCast","onComplete","onGaugeEvent","onDeath","combatants","selected","resources","mp","errorCode","primaryTargetId","targetID","startRecording","getThunderUptime","enemies","getStatusUptime","fightDuration","getInvulnerableUptime","stopRecording","cycle","showIcon","2","THUNDER_III_FALSE","uptime","maxThunders","checklist","Rule","description","requirements","Requirement","percent","processCycle","missingDespairs","findIndex","fire1Count","processDowntimeCycle","processNormalCycle","hardT3Count","missingFire4s","outliers","Message","warning","Icon","Content","fire4s","despairs","reason","show","__decorate","dependency","__metadata","Checklist","prototype","Suggestions","Invulnerability","Enemies","Timeline","UnableToAct","ALLOWEDDOWNTIMEALL","FIRSTUSEOFFSETALL","TARGETPERCENT","OGCDDowntime","CooldownDowntime","defaultAllowedAverageDowntimeDowntime","defaultFirstUseOffset","trackedCds","cooldowns","LEY_LINES","SHARPCAST","firstUseOffset","checklistTarget","checklistDescription","FAST_CAST_SCALAR","Speedmod","CoreSpeedmod","_isFastCast","SPEED_BUFF_STATUS_IDS","CIRCLE_OF_POWER","jobSpecificNormaliseLogic","recalcSpeedmodAndSaveHistory","getJobAdditionalSpeedbuffScalar","LL_BUFFS","Leylines","_onGain","_onDrop","_dontMovePercent","power","lines","copDuration","cop","linesDuration","Table","leyLinesEvent","thisCoPUptime","cops","thisPercent","toFixed","Button","GCD_ERROR_OFFSET","SLIDECAST_OFFSET","NotCasting","_noCastWindows","_hardCast","_onBegin","timeStamp","windows","getInvulns","notCasting","SHARPCAST_DURATION_MILLIS","SHARPCAST_CONSUMER_IDS","SCATHE","Sharpcast","_droppedSharpcasts","_sharpedScathes","_onRemoveSharpcast","_onGainSharpcast","_tryConsumeSharpcast","procs","4","6"],"mappings":"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","file":"assets/jobs-blm.f7f41e89.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import Entity from './Entity';\n// This is basically a copy of Enemy - XIV doesn't really have as much on Combatants as WoW.\n// TODO: Should I just merge all this crap into the Entity handlers and call it a day?\nexport default class Combatant extends Entity {\n    constructor(parser, info) {\n        super(parser);\n        this.info = null;\n        this.info = info;\n    }\n    get name() { return this.info.name; }\n    get type() { return this.info.type; }\n    get guid() { return this.info.guid; }\n    get id() { return this.info.id; }\n}\n","import Entities from './Entities';\nimport Combatant from '../Combatant';\nexport default class Combatants extends Entities {\n    constructor() {\n        super(...arguments);\n        this._players = {};\n    }\n    getEntities() {\n        return this._players;\n    }\n    getEntity(actorId) {\n        let player = this._players[actorId];\n        if (!player) {\n            const info = this.parser.report.friendlies.find(player => player.id === actorId);\n            if (!info) {\n                return null;\n            }\n            this._players[actorId] = player = new Combatant(this.parser, info);\n        }\n        return player;\n    }\n    get selected() {\n        return this.getEntity(this.parser.player.id);\n    }\n}\nCombatants.handle = 'combatants';\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","//I've heard it's cool to build your own job gauge.\nimport { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nconst GAUGE_EVENTS = [\n    'begincast',\n    'cast',\n    'damage',\n    'death',\n];\nexport const BLM_GAUGE_EVENT = Symbol('blmgauge');\nconst ENOCHIAN_DURATION_REQUIRED = 30000;\nconst ASTRAL_UMBRAL_DURATION = 15000;\nconst MAX_ASTRAL_UMBRAL_STACKS = 3;\nconst MAX_UMBRAL_HEART_STACKS = 3;\nconst FLARE_MAX_HEART_CONSUMPTION = 3;\nconst MAX_POLYGLOT_STACKS = 2;\nexport default class Gauge extends Module {\n    constructor(...args) {\n        super(...args);\n        this._astralFireStacks = 0;\n        this._umbralIceStacks = 0;\n        this._umbralHeartStacks = 0;\n        this._astralUmbralStackTimer = 0;\n        this._hasEnochian = false;\n        this._enochianTimer = 0;\n        this._enochianDownTimer = {\n            start: 0,\n            stop: 0,\n            time: 0,\n        };\n        //_hasPolyglot = false\n        this._polyglotStacks = 0;\n        this._droppedEnoTimestamps = [];\n        this._lostPolyglot = 0;\n        this._overwrittenPolyglot = 0;\n        this._normalizeIndex = 0;\n        this._currentTimestamp = 0;\n        this._toAdd = [];\n        this._lastAdded = null;\n        this.addHook('complete', this._onComplete);\n    }\n    gaugeValuesChanged(lastGaugeEvent) {\n        if (!lastGaugeEvent) {\n            return true;\n        }\n        if (lastGaugeEvent.astralFire !== this._astralFireStacks ||\n            lastGaugeEvent.umbralIce !== this._umbralIceStacks ||\n            lastGaugeEvent.umbralHearts !== this._umbralHeartStacks ||\n            lastGaugeEvent.enochian !== this._hasEnochian ||\n            lastGaugeEvent.polyglot !== this._polyglotStacks) {\n            return true;\n        }\n        return false;\n    }\n    addEvent() {\n        const lastAdded = this._toAdd.length > 0 ? this._toAdd[this._toAdd.length - 1] : null;\n        if (this.gaugeValuesChanged(lastAdded)) {\n            this._toAdd.push({\n                type: BLM_GAUGE_EVENT,\n                timestamp: this._currentTimestamp,\n                insertAfter: this._normalizeIndex,\n                astralFire: this._astralFireStacks,\n                umbralIce: this._umbralIceStacks,\n                umbralHearts: this._umbralHeartStacks,\n                enochian: this._hasEnochian,\n                polyglot: this._polyglotStacks,\n                lastGaugeEvent: this._lastAdded,\n            });\n            this._lastAdded = this._toAdd[this._toAdd.length - 1];\n        }\n    }\n    normalise(events) {\n        // Add initial event\n        this._currentTimestamp = events[0].timestamp;\n        this.addEvent();\n        for (this._normalizeIndex = 0; this._normalizeIndex < events.length; this._normalizeIndex++) {\n            const event = events[this._normalizeIndex];\n            this._currentTimestamp = event.timestamp;\n            this.updateStackTimers(event);\n            if (!GAUGE_EVENTS.includes(event.type)) {\n                continue;\n            }\n            if (this.parser.byPlayer(event)) {\n                switch (event.type) {\n                    case 'begincast':\n                        break;\n                    case 'cast':\n                        this._onCast(event);\n                        break;\n                    case 'damage':\n                        break;\n                }\n            }\n            if (event.type === 'death' && this.parser.toPlayer(event)) {\n                this._onDeath(event);\n            }\n        }\n        // Add all the events we gathered up in, in order\n        let offset = 0;\n        this._toAdd.sort((a, b) => a.insertAfter - b.insertAfter).forEach(event => {\n            events.splice(event.insertAfter + 1 + offset, 0, event);\n            offset++;\n        });\n        return events;\n    }\n    onAstralUmbralTimeout(event) {\n        this._astralFireStacks = 0;\n        this._umbralIceStacks = 0;\n        this._astralUmbralStackTimer = 0;\n        this.onEnoDropped(event);\n    }\n    onEnoDropped(event) {\n        if (this._hasEnochian) {\n            this._enochianDownTimer.start = event.timestamp;\n            const enoRunTime = event.timestamp - this._enochianTimer;\n            //add the time remaining on the eno timer to total downtime\n            this._enochianDownTimer.time += enoRunTime;\n            this._droppedEnoTimestamps.push(event.timestamp);\n        }\n        this._hasEnochian = false;\n        this._enochianTimer = 0;\n        this._umbralHeartStacks = 0;\n        this.addEvent();\n    }\n    onGainPolyglot() {\n        this._polyglotStacks++;\n        if (this._polyglotStacks > MAX_POLYGLOT_STACKS) {\n            this._overwrittenPolyglot++;\n        }\n        this._polyglotStacks = Math.min(this._polyglotStacks, MAX_POLYGLOT_STACKS);\n        this.addEvent();\n    }\n    onConsumePolyglot() {\n        if (!this._polyglotStacks > 0 && this._overwrittenPolyglot > 0) {\n            // Safety to catch ordering issues where Foul is used late enough to trigger our overwrite check but happens before Poly actually overwrites\n            this._overwrittenPolyglot--;\n        }\n        this._polyglotStacks = Math.max(this._polyglotStacks - 1, 0);\n        this.addEvent();\n    }\n    onGainAstralFireStacks(event, stackCount, dropsElementOnSwap = true) {\n        if (this._umbralIceStacks > 0 && dropsElementOnSwap) {\n            this.onAstralUmbralTimeout(event);\n        }\n        else {\n            this._umbralIceStacks = 0;\n            this._astralUmbralStackTimer = event.timestamp;\n            this._astralFireStacks = Math.min(this._astralFireStacks + stackCount, MAX_ASTRAL_UMBRAL_STACKS);\n            this.addEvent();\n        }\n    }\n    onGainUmbralIceStacks(event, stackCount, dropsElementOnSwap = true) {\n        if (this._astralFireStacks > 0 && dropsElementOnSwap) {\n            this.onAstralUmbralTimeout(event);\n        }\n        else {\n            this._astralFireStacks = 0;\n            this._astralUmbralStackTimer = event.timestamp;\n            this._umbralIceStacks = Math.min(this._umbralIceStacks + stackCount, MAX_ASTRAL_UMBRAL_STACKS);\n            this.addEvent();\n        }\n    }\n    onTransposeStacks(event) {\n        if (this._astralFireStacks > 0 || this._umbralIceStacks > 0) {\n            this._astralUmbralStackTimer = event.timestamp;\n            if (this._astralFireStacks > 0) {\n                this._astralFireStacks = 0;\n                this._umbralIceStacks = 1;\n            }\n            else {\n                this._astralFireStacks = 1;\n                this._umbralIceStacks = 0;\n            }\n            this.addEvent();\n        }\n    }\n    tryGainUmbralHearts(event, count) {\n        if (this._umbralIceStacks > 0) {\n            this._umbralHeartStacks = Math.min(this._umbralHeartStacks + count, MAX_UMBRAL_HEART_STACKS);\n            this.addEvent();\n        }\n    }\n    tryConsumeUmbralHearts(event, count, force = false) {\n        if (this._umbralHeartStacks > 0 && (this._astralFireStacks > 0 || force)) {\n            this._umbralHeartStacks = Math.max(this._umbralHeartStacks - count, 0);\n            this.addEvent();\n        }\n    }\n    updateStackTimers(event) {\n        if ((this._astralFireStacks > 0 || this._umbralIceStacks > 0) &&\n            (event.timestamp - this._astralUmbralStackTimer > ASTRAL_UMBRAL_DURATION)) {\n            this.onAstralUmbralTimeout(event);\n        }\n        if (this._hasEnochian) {\n            const enoRunTime = event.timestamp - this._enochianTimer;\n            if (enoRunTime >= ENOCHIAN_DURATION_REQUIRED) {\n                this._enochianTimer = event.timestamp - (enoRunTime - ENOCHIAN_DURATION_REQUIRED);\n                this.onGainPolyglot();\n            }\n        }\n    }\n    _startEnoTimer(event) {\n        this._hasEnochian = true;\n        this._enochianTimer = event.timestamp;\n        if (this._enochianDownTimer.start) {\n            this._enoDownTimerStop(event);\n        }\n    }\n    _enoDownTimerStop(event) {\n        this._enochianDownTimer.stop = event.timestamp;\n        this._enochianDownTimer.time += Math.max(this._enochianDownTimer.stop - this._enochianDownTimer.start, 0);\n        //reset the timer again to prevent weirdness/errors\n        this._enochianDownTimer.start = 0;\n        this._enochianDownTimer.stop = 0;\n    }\n    // Refund unable-to-act time if the downtime window was longer than the AF/UI timer\n    _countLostPolyglots(time) {\n        const unableToActTime = this.unableToAct.getDowntimes().filter(downtime => Math.max(0, downtime.end - downtime.start) >= ASTRAL_UMBRAL_DURATION).reduce((duration, downtime) => duration + Math.max(0, downtime.end - downtime.start), 0);\n        return Math.floor((time - unableToActTime) / ENOCHIAN_DURATION_REQUIRED);\n    }\n    _onCast(event) {\n        const abilityId = event.ability.guid;\n        switch (abilityId) {\n            case ACTIONS.ENOCHIAN.id:\n                if (!this._astralFireStacks && !this._umbralIceStacks) {\n                    this.brokenLog.trigger(this, 'no stack eno', (<Trans id=\"blm.gauge.trigger.no-stack-eno\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.ENOCHIAN}/> was cast without any Astral Fire or Umbral Ice stacks detected.\n\t\t\t\t\t</Trans>));\n                }\n                if (!this._hasEnochian) {\n                    this._startEnoTimer(event);\n                    this.addEvent();\n                }\n                break;\n            case ACTIONS.BLIZZARD_I.id:\n            case ACTIONS.BLIZZARD_II.id:\n            case ACTIONS.FREEZE.id:\n                this.onGainUmbralIceStacks(event, MAX_ASTRAL_UMBRAL_STACKS, false);\n                this.tryGainUmbralHearts(event, 1);\n                break;\n            case ACTIONS.BLIZZARD_III.id:\n                this.onGainUmbralIceStacks(event, MAX_ASTRAL_UMBRAL_STACKS, false);\n                break;\n            case ACTIONS.BLIZZARD_IV.id:\n                if (!this._hasEnochian) {\n                    this.brokenLog.trigger(this, 'no eno b4', (<Trans id=\"blm.gauge.trigger.no-eno-b4\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.BLIZZARD_IV}/> was cast while <ActionLink {...ACTIONS.ENOCHIAN}/> was deemed inactive.\n\t\t\t\t\t</Trans>));\n                    this._startEnoTimer(event);\n                }\n                this._umbralHeartStacks = MAX_UMBRAL_HEART_STACKS;\n                this.addEvent();\n                break;\n            case ACTIONS.UMBRAL_SOUL.id:\n                this.onGainUmbralIceStacks(event, 1);\n                this.tryGainUmbralHearts(event, 1);\n                break;\n            case ACTIONS.FIRE_I.id:\n            case ACTIONS.FIRE_II.id:\n                this.tryConsumeUmbralHearts(event, 1);\n                this.onGainAstralFireStacks(event, 1);\n                break;\n            case ACTIONS.FIRE_III.id:\n                this.tryConsumeUmbralHearts(event, 1);\n                this.onGainAstralFireStacks(event, MAX_ASTRAL_UMBRAL_STACKS, false);\n                break;\n            case ACTIONS.FIRE_IV.id:\n                if (!this._hasEnochian) {\n                    this.brokenLog.trigger(this, 'no eno f4', (<Trans id=\"blm.gauge.trigger.no-eno-f4\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.FIRE_IV}/> was cast while <ActionLink {...ACTIONS.ENOCHIAN}/> was deemed inactive.\n\t\t\t\t\t</Trans>));\n                    this._startEnoTimer(event);\n                }\n                this.tryConsumeUmbralHearts(event, 1);\n                break;\n            case ACTIONS.DESPAIR.id:\n                this.onGainAstralFireStacks(event, MAX_ASTRAL_UMBRAL_STACKS, false);\n                break;\n            case ACTIONS.FLARE.id:\n                this.tryConsumeUmbralHearts(event, FLARE_MAX_HEART_CONSUMPTION, true);\n                this.onGainAstralFireStacks(event, MAX_ASTRAL_UMBRAL_STACKS, false);\n                break;\n            case ACTIONS.XENOGLOSSY.id:\n            case ACTIONS.FOUL.id:\n                this.onConsumePolyglot();\n                break;\n            case ACTIONS.TRANSPOSE.id:\n                this.onTransposeStacks(event);\n                break;\n        }\n    }\n    _onDeath() {\n        // Not counting the loss towards the rest of the gauge loss, that'll just double up on the suggestions\n        this._astralFireStacks = 0;\n        this._umbralIceStacks = 0;\n        this._umbralHeartStacks = 0;\n        this._astralUmbralStackTimer = 0;\n        this._hasEnochian = false;\n        this._polyglotStacks = 0;\n        this._enochianTimer = 0;\n        this.addEvent();\n    }\n    _onComplete(event) {\n        if (this._enochianDownTimer.start) {\n            this._enoDownTimerStop(event);\n        }\n        this._lostPolyglot = this._countLostPolyglots(this._enochianDownTimer.time);\n        // Find out how many of the enochian drops ocurred during times where the player could not act for longer than the AF/UI buff timer. If they could act, they could've kept it going, so warn about those.\n        const droppedEno = this._droppedEnoTimestamps.filter(drop => this.unableToAct.getDowntimes(drop, drop).filter(downtime => Math.max(0, downtime.end - downtime.start) >= ASTRAL_UMBRAL_DURATION).length === 0).length;\n        if (droppedEno) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.ENOCHIAN.icon,\n                content: <Trans id=\"blm.gauge.suggestions.dropped-enochian.content\">\n\t\t\t\t\tDropping <ActionLink {...ACTIONS.ENOCHIAN}/> may lead to lost <ActionLink {...ACTIONS.XENOGLOSSY}/> or <ActionLink {...ACTIONS.FOUL}/> casts, more clipping because of additional <ActionLink {...ACTIONS.ENOCHIAN}/> casts, unavailability of <ActionLink {...ACTIONS.FIRE_IV}/> and <ActionLink {...ACTIONS.BLIZZARD_IV}/> or straight up missing out on the 15% damage bonus that <ActionLink {...ACTIONS.ENOCHIAN}/> provides.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"blm.gauge.suggestions.dropped-enochian.why\">\n\t\t\t\t\t{droppedEno} dropped Enochian <Plural value={droppedEno} one=\"buff\" other=\"buffs\"/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._lostPolyglot) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.XENOGLOSSY.icon,\n                content: <Trans id=\"blm.gauge.suggestions.lost-polyglot.content\">\n\t\t\t\t\tYou lost Polyglot due to dropped <ActionLink {...ACTIONS.ENOCHIAN}/>. <ActionLink {...ACTIONS.XENOGLOSSY}/> and <ActionLink {...ACTIONS.FOUL}/> are your strongest GCDs, so always maximize their casts.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"blm.gauge.suggestions.lost-polyglot.why\">\n\t\t\t\t\t<Plural value={this._lostPolyglot} one=\"# Polyglot stack was\" other=\"# Polyglot stacks were\"/> lost.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._overwrittenPolyglot) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.XENOGLOSSY.icon,\n                content: <Trans id=\"blm.gauge.suggestions.overwritten-polyglot.content\">\n\t\t\t\t\tYou overwrote Polyglot due to not casting <ActionLink {...ACTIONS.XENOGLOSSY}/> or <ActionLink {...ACTIONS.FOUL}/> for 30s after gaining a second stack. <ActionLink {...ACTIONS.XENOGLOSSY}/> and <ActionLink {...ACTIONS.FOUL}/> are your strongest GCDs, so always maximize their casts.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"blm.gauge.suggestions.overwritten-polyglot.why\">\n\t\t\t\t\tXenoglossy got overwritten <Plural value={this._overwrittenPolyglot} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nGauge.handle = 'gauge';\nGauge.title = t('blm.gauge.title') `Gauge`;\nGauge.dependencies = [\n    'precastAction',\n    'suggestions',\n    'brokenLog',\n    'unableToAct',\n];\n","import { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport React from 'react';\nimport { Group, Item } from 'parser/core/modules/Timeline';\nimport { Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { Trans, Plural } from '@lingui/react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\n// TODO: Very certain this doesn't catch all procs correctly\n// Use DEBUG_LOG_ALL_FIRE_COUNTS to display procs more easily and figure out why some aren't flagged correctly\nconst THUNDER_ACTIONS = [\n    ACTIONS.THUNDER.id,\n    ACTIONS.THUNDER_II.id,\n    ACTIONS.THUNDER_III.id,\n    ACTIONS.THUNDER_IV.id,\n];\nconst PROC_BUFFS = [\n    STATUSES.THUNDERCLOUD.id,\n    STATUSES.FIRESTARTER.id,\n];\nconst STATUS_DURATION_MILLIS = {\n    [STATUSES.THUNDERCLOUD.id]: STATUSES.THUNDERCLOUD.duration * 1000,\n    [STATUSES.FIRESTARTER.id]: STATUSES.FIRESTARTER.duration * 1000,\n};\nconst ACTION_PROCS = {\n    [ACTIONS.FIRE_III.id]: ACTIONS.FIRE_III_PROC,\n    [ACTIONS.THUNDER_III.id]: ACTIONS.THUNDER_III_PROC,\n    [ACTIONS.THUNDER_IV.id]: ACTIONS.THUNDER_IV_PROC,\n};\nexport default class Procs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._castingSpellId = null;\n        this._buffWindows = {\n            [STATUSES.THUNDERCLOUD.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.FIRESTARTER.id]: {\n                current: null,\n                history: [],\n            },\n        };\n        this._droppedProcs = {\n            [STATUSES.THUNDERCLOUD.id]: 0,\n            [STATUSES.FIRESTARTER.id]: 0,\n        };\n        this._group = null;\n        this.addHook('removebuff', { by: 'player', abilityId: PROC_BUFFS }, this._onLoseProc);\n        this.addHook('applybuff', { by: 'player', abilityId: PROC_BUFFS }, this._onGainProc);\n        this.addHook('refreshbuff', { by: 'player', abilityId: PROC_BUFFS }, this._onRefreshProc);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n        this._group = new Group({\n            id: 'procbuffs',\n            content: 'Procs',\n            order: 0,\n            nestedGroups: [],\n        });\n        this.timeline.addGroup(this._group); // Group for showing procs on the timeline\n    }\n    getGroupIdForStatus(status) {\n        const groupId = 'procbuffs-' + status.id;\n        // Make sure a timeline group exists for this buff\n        if (!this._group.nestedGroups.includes(groupId)) {\n            this.timeline.addGroup(new Group({\n                id: groupId,\n                content: status.name,\n            }));\n            this._group.nestedGroups.push(groupId);\n        }\n        return groupId;\n    }\n    _onLoseProc(event) {\n        this._stopAndSave(event.ability.guid, event.timestamp);\n    }\n    _onGainProc(event) {\n        const statusId = event.ability.guid;\n        const tracker = this._buffWindows[statusId];\n        tracker.current = {\n            start: event.timestamp,\n        };\n    }\n    _onRefreshProc(event) {\n        this._stopAndSave(event.ability.guid, event.timestamp);\n        this._onGainProc(event);\n    }\n    // Keep track of casts we start to help look for instant casts\n    _onBeginCast(event) {\n        this._castingSpellId = event.ability.guid;\n    }\n    // Consolidate old onCast functions into one central function\n    _onCast(event) {\n        const actionId = event.ability.guid;\n        // Skip proc checking if we had a corresponding begincast event or the begincast we recorded isn't the same as this spell (ie. cancelled a cast, used a proc)\n        const action = getDataBy(ACTIONS, 'id', actionId);\n        if (action && action.onGcd && (!this._castingSpellId || this._castingSpellId !== actionId)) {\n            this._tryConsumeProc(event);\n        }\n        this._castingSpellId = null;\n    }\n    _tryConsumeProc(event) {\n        const actionId = event.ability.guid;\n        const statusId = this._getAffectingProcId(actionId);\n        // If this action isn't affected by a proc (or something is wrong), bail out\n        if (!statusId) {\n            return;\n        }\n        // If this proc is active, consume it\n        if (this._buffWindows[statusId].current) {\n            // Procs have 0 cast time\n            this.castTime.set([actionId], 0, event.timestamp, event.timestamp);\n            // Set overrideAction if we're tracking it for this spell\n            if (ACTION_PROCS[actionId]) {\n                event.ability.overrideAction = ACTION_PROCS[actionId];\n            }\n            // Stop the buff window, and ensure it's not marked as a drop\n            this._stopAndSave(statusId, event.timestamp, false);\n        }\n    }\n    _getAffectingProcId(actionId) {\n        if (THUNDER_ACTIONS.includes(actionId)) {\n            return STATUSES.THUNDERCLOUD.id;\n        }\n        if (actionId === ACTIONS.FIRE_III.id) {\n            return STATUSES.FIRESTARTER.id;\n        }\n        return null;\n    }\n    _onDeath(event) {\n        this._stopAndSave(STATUSES.THUNDERCLOUD.id, event.timestamp);\n        this._stopAndSave(STATUSES.FIRESTARTER.id, event.timestamp);\n    }\n    _stopAndSave(statusId, endTime = this.parser.currentTimestamp, countDrops = true) {\n        const tracker = this._buffWindows[statusId];\n        if (!tracker.current) {\n            return;\n        }\n        tracker.current.stop = endTime;\n        if (tracker.current.stop - tracker.current.start >= STATUS_DURATION_MILLIS[statusId] && countDrops) {\n            this._droppedProcs[statusId]++;\n        }\n        tracker.history.push(tracker.current);\n        tracker.current = null;\n    }\n    _onComplete() {\n        PROC_BUFFS.forEach(buff => {\n            const status = getDataBy(STATUSES, 'id', buff);\n            const groupId = this.getGroupIdForStatus(status);\n            const fightStart = this.parser.fight.start_time;\n            // Finalise the buff if it was still active\n            if (this._buffWindows[buff].current) {\n                this._stopAndSave(buff);\n            }\n            // Add buff windows to the timeline\n            this._buffWindows[buff].history.forEach(window => {\n                this.timeline.addItem(new Item({\n                    type: 'background',\n                    start: window.start - fightStart,\n                    end: window.stop - fightStart,\n                    group: groupId,\n                    content: <img src={status.icon} alt={status.name}/>,\n                }));\n            });\n        });\n        // Suggestions to use procs that wore off.\n        if (this._droppedProcs[STATUSES.THUNDERCLOUD.id]) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.THUNDER_III_PROC.icon,\n                content: <Trans id=\"blm.procs.suggestions.dropped-t3ps.content\">\n\t\t\t\t\tYou lost at least one <ActionLink {...ACTIONS.THUNDER_III}/> proc by allowing <StatusLink {...STATUSES.THUNDERCLOUD}/> to expire without using it.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"blm.procs.suggestions.dropped-t3ps.why\">\n\t\t\t\t\t<Plural value={this._droppedProcs[STATUSES.THUNDERCLOUD.id]} one=\"# Thundercloud proc\" other=\"# Thundercloud procs\"/> expired.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this._droppedProcs[STATUSES.FIRESTARTER.id]) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FIRE_III_PROC.icon,\n                content: <Trans id=\"blm.procs.suggestions.dropped-f3ps.content\">\n\t\t\t\t\tYou lost at least  one <ActionLink {...ACTIONS.FIRE_III}/> proc by allowing <StatusLink {...STATUSES.FIRESTARTER}/> to expire without using it.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"blm.procs.suggestions.dropped-f3ps.why\">\n\t\t\t\t\t<Plural value={this._droppedProcs[STATUSES.FIRESTARTER.id]} one=\"# Firestarter proc\" other=\"# Firestarter procs\"/> expired.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nProcs.handle = 'procs';\nProcs.dependencies = [\n    'castTime',\n    'timeline',\n    'suggestions',\n];\n","export default {\n    ROTATION: 1,\n    NOTCASTING: 2,\n    LEY_LINES: 3,\n    WEAVING: 4,\n};\n","import Weaving from 'parser/core/modules/Weaving';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { BLM_GAUGE_EVENT } from './Gauge';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst OGCD_EXCEPTIONS = [\n    ACTIONS.LUCID_DREAMING.id,\n    ACTIONS.ADDLE.id,\n    ACTIONS.SURECAST.id,\n    ACTIONS.TRANSPOSE.id,\n];\nconst OPENER_ENO_TIME_THRESHHOLD = 10000;\n//max number of AFUI stacks\nconst MAX_BUFF_STACKS = 3;\nexport default class BlmWeaving extends Weaving {\n    constructor(...args) {\n        super(...args);\n        this._astralFireStacks = 0;\n        this._umbralIceStacks = 0;\n        this._lastF3FastCast = false;\n        this._lastB3FastCast = false;\n        this._ctIndex = null;\n        this.addHook(BLM_GAUGE_EVENT, this._onGaugeChange);\n        this.addHook('begincast', { by: 'player', abilityId: ACTIONS.FIRE_III.id }, this._beginFire3);\n        this.addHook('begincast', { by: 'player', abilityId: ACTIONS.BLIZZARD_III.id }, this._beginBlizzard3);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.TRIPLECAST.id }, this._onApplyTriple);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.TRIPLECAST.id }, this._onRemoveTriple);\n    }\n    _beginFire3() {\n        this._lastF3FastCast = this._umbralIceStacks === MAX_BUFF_STACKS;\n    }\n    _beginBlizzard3() {\n        this._lastB3FastCast = this._astralFireStacks === MAX_BUFF_STACKS;\n    }\n    _onGaugeChange(event) {\n        this._astralFireStacks = event.astralFire;\n        this._umbralIceStacks = event.umbralIce;\n    }\n    _onApplyTriple() {\n        this._ctIndex = this.castTime.set('all', 0);\n    }\n    _onRemoveTriple() {\n        this.castTime.reset(this._ctIndex);\n    }\n    //check for fast casted F3/B3 and allow 1 weave if you get one\n    isBadWeave(weave, maxWeaves) {\n        if (weave.leadingGcdEvent.ability) {\n            const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n            //allow a single weave of the OGCD exceptions\n            if (weaveCount === 1 && OGCD_EXCEPTIONS.includes(weave.weaves[0].ability.guid)) {\n                return false;\n            }\n            //allow first eno to be ignored because it's a neccessary weave. 10s for that to happen because of O5s Eno delay.\n            if (weaveCount === 1) {\n                const ogcdTime = weave.weaves[0].timestamp - this.parser.fight.start_time;\n                if (ogcdTime < OPENER_ENO_TIME_THRESHHOLD && weave.weaves[0].ability.guid === ACTIONS.ENOCHIAN.id) {\n                    return false;\n                }\n            }\n            //allow single weave under fast B3/F3\n            if ((weave.leadingGcdEvent.ability.guid === ACTIONS.FIRE_III.id && this._lastF3FastCast) ||\n                (weave.leadingGcdEvent.ability.guid === ACTIONS.BLIZZARD_III.id && this._lastB3FastCast)) {\n                if (weaveCount === 1) {\n                    return false;\n                }\n            }\n        }\n        return super.isBadWeave(weave, maxWeaves);\n    }\n}\nBlmWeaving.handle = 'weaving';\nBlmWeaving.displayOrder = DISPLAY_ORDER.WEAVING;\nBlmWeaving.dependencies = [\n    ...Weaving.dependencies,\n    'invuln',\n    'gauge',\n    'castTime',\n];\n","import ACTIONS from 'data/ACTIONS';\nexport const FIRE_SPELLS = [\n    ACTIONS.FIRE_I.id,\n    ACTIONS.FIRE_II.id,\n    ACTIONS.FIRE_III.id,\n    ACTIONS.FIRE_IV.id,\n    ACTIONS.FLARE.id,\n    ACTIONS.DESPAIR.id,\n];\nexport const ICE_SPELLS = [\n    ACTIONS.BLIZZARD_I.id,\n    ACTIONS.BLIZZARD_II.id,\n    ACTIONS.BLIZZARD_III.id,\n    ACTIONS.BLIZZARD_IV.id,\n    ACTIONS.FREEZE.id,\n    ACTIONS.UMBRAL_SOUL.id,\n];\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Enemies from 'parser/core/modules/Enemies';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, Suggestion, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport UnableToAct from 'parser/core/modules/UnableToAct';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport { FIRE_SPELLS } from './Elements';\nimport { BLM_GAUGE_EVENT } from './Gauge';\nconst DEBUG_SHOW_ALL_CYCLES = false && process.env.NODE_ENV !== 'production';\nconst EXPECTED_FIRE4 = 6;\nconst NO_UH_EXPECTED_FIRE4 = 5;\nconst FIRE4_FROM_MANAFONT = 1;\nconst MIN_MP_FOR_FULL_ROTATION = 9600;\nconst THUNDERCLOUD_MILLIS = 18000;\nconst ASTRAL_UMBRAL_DURATION = 15000;\nconst AF_UI_BUFF_MAX_STACK = 3;\nconst ISSUE_SEVERITY_TIERS = {\n    1: SEVERITY.MINOR,\n    3: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nconst CYCLE_ENDPOINTS = [\n    ACTIONS.BLIZZARD_III.id,\n    ACTIONS.TRANSPOSE.id,\n    ACTIONS.FREEZE.id,\n];\n// This is feelycraft at the moment. Rotations shorter than this won't be processed for errors.\nconst MIN_ROTATION_LENGTH = 3;\n/**\n * Error type codes, higher values indicate higher priority errors. If you add more, adjust the IDs to ensure correct priorities.\n * Only the highest priority error will be displayed in the 'Reason' column.\n * NOTE: Cycles with values below ERROR_CODES.SHORT will be filtered out of the RotationTable display\n * unless the DEBUG_SHOW_ALL_CYCLES variable is set to true\n */\nconst CYCLE_ERRORS = {\n    NONE: { priority: 0, message: 'No errors' },\n    FINAL_OR_DOWNTIME: { priority: 1, message: 'Ended with downtime, or last cycle' },\n    SHORT: { priority: 2, message: 'Too short, won\\'t process' },\n    // Messages below should be Trans objects since they'll be displayed to end users\n    MISSING_FIRE4S: { priority: 10, message: <Trans id=\"blm.rotation-watchdog.error-messages.missing-fire4s\">Missing one or more <ActionLink {...ACTIONS.FIRE_IV}/>s</Trans> },\n    MISSING_DESPAIRS: { priority: 15, message: <Trans id=\"blm.rotation-watchdog.error-messages.missing-despair\">Missing one or more <ActionLink {...ACTIONS.DESPAIR}/>s</Trans> },\n    MANAFONT_BEFORE_DESPAIR: { priority: 30, message: <Trans id=\"blm.rotation-watchdog.error-messages.manafont-before-despair\"><ActionLink {...ACTIONS.MANAFONT}/> used before <ActionLink {...ACTIONS.DESPAIR}/></Trans> },\n    EXTRA_T3: { priority: 49, message: <Trans id=\"blm.rotation-watchdog.error-messages.extra-t3\">Extra <ActionLink {...ACTIONS.THUNDER_III}/>s</Trans> },\n    EXTRA_F1: { priority: 50, message: <Trans id=\"blm.rotation-watchdog.error-messages.extra-f1\">Extra <ActionLink {...ACTIONS.FIRE_I}/></Trans> },\n    NO_FIRE_SPELLS: { priority: 75, message: <Trans id=\"blm.rotation-watchdog.error-messages.no-fire-spells\">Rotation included no Fire spells</Trans> },\n    DROPPED_ENOCHIAN: { priority: 100, message: <Trans id=\"blm.rotation-watchdog.error-messages.dropped-enochian\">Dropped <ActionLink {...ACTIONS.ENOCHIAN}/></Trans> },\n    DIED: { priority: 101, message: <Trans id=\"blm.rotation-watchdog.error-messages.died\"><ActionLink showName={false} {...ACTIONS.RAISE}/> Died</Trans> },\n};\nclass Cycle {\n    constructor(start, gaugeState) {\n        // TS CastEvent Ability interface doesn't include the overrideAbility property that BLM Procs sets to denote T3P/F3P\n        this.casts = [];\n        this.hasManafont = false;\n        this.inFirePhase = false;\n        this.atypicalAFStart = false;\n        this.firePhaseStartMP = 0;\n        this.finalOrDowntime = false;\n        this.gaugeStateBeforeFire = new GaugeState();\n        this._errorCode = CYCLE_ERRORS.NONE;\n        this.startTime = start,\n            // Object.assign because this needs to be a by-value assignment, not by-reference\n            this.gaugeStateBeforeFire = Object.assign(this.gaugeStateBeforeFire, gaugeState);\n    }\n    set errorCode(code) {\n        if (code.priority > this._errorCode.priority) {\n            this._errorCode = code;\n        }\n    }\n    get errorCode() {\n        return this._errorCode;\n    }\n    /**\n     * Greatly simplified from the pre-Shadowbringers version of this function. Because Umbral Soul gives us\n     * a proper downtime action to build UH/UI, it should be possible to enter every fire phase with a normal\n     * gauge state, so we're no longer going to reduce the expected count based on the actual gauge state on\n     * entering fire phase. We're still tracking the data necessary to do this again in the future if there is\n     * value in doing so.\n     */\n    get expectedFire4s() {\n        if (this.finalOrDowntime) {\n            return;\n        }\n        // Account for the no-UH opener/LeyLines optimization when determining the expected count of Fire 4s\n        let expectedCount = (this.gaugeStateBeforeFire.umbralHearts === 0 && this.casts.filter(cast => cast.ability.guid === ACTIONS.FIRE_I.id).length === 0)\n            ? NO_UH_EXPECTED_FIRE4 : EXPECTED_FIRE4;\n        // Adjust expected count if the cycle included manafont\n        expectedCount += this.hasManafont ? FIRE4_FROM_MANAFONT : 0;\n        return expectedCount;\n    }\n    get actualFire4s() {\n        return this.casts.filter(cast => cast.ability.guid === ACTIONS.FIRE_IV.id).length;\n    }\n    get missingFire4s() {\n        if (!this.expectedFire4s) {\n            return;\n        }\n        return Math.max(this.expectedFire4s - this.actualFire4s, 0);\n    }\n    get expectedDespairs() {\n        return this.hasManafont ? 2 : 1;\n    }\n    get actualDespairs() {\n        return this.casts.filter(cast => cast.ability.guid === ACTIONS.DESPAIR.id).length;\n    }\n    get missingDespairs() {\n        return Math.max(this.expectedDespairs - this.actualDespairs, 0);\n    }\n    overrideErrorCode(code) {\n        this._errorCode = code;\n    }\n}\n// typedef for the subset of the data contained in BLMGaugeEvent that we're going to keep track of for suggestions\nclass GaugeState {\n    constructor() {\n        this.astralFire = 0;\n        this.umbralIce = 0;\n        this.umbralHearts = 0;\n        this.enochian = false;\n    }\n}\nexport default class RotationWatchdog extends Module {\n    constructor() {\n        super(...arguments);\n        this.currentGaugeState = new GaugeState();\n        this.currentRotation = new Cycle(this.parser.fight.start_time, this.currentGaugeState);\n        this.history = [];\n        this.firstEvent = true;\n        // counters for suggestions\n        this.missedF4s = 0;\n        this.extraF1s = 0;\n        this.extraT3s = 0;\n        this.rotationsWithoutFire = 0;\n        this.manafontBeforeDespair = 0;\n        this.astralFiresMissingDespairs = 0;\n        this.thunder3Casts = 0;\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n        this.addHook(BLM_GAUGE_EVENT, this.onGaugeEvent);\n        this.addHook('death', { to: 'player' }, this.onDeath);\n    }\n    // Handle events coming from BLM's Gauge module\n    onGaugeEvent(event) {\n        // If we're beginning the fire phase of this cycle, note it and save some data\n        if (this.currentGaugeState.astralFire === 0 && event.astralFire > 0) {\n            this.currentRotation.inFirePhase = true;\n            this.currentRotation.firePhaseStartMP = this.combatants.selected.resources.mp;\n            // If we didn't enter fire phase with a normal gauge state of 3 UI/UH stacks, note it\n            if (this.currentRotation.gaugeStateBeforeFire.umbralIce !== AF_UI_BUFF_MAX_STACK ||\n                this.currentRotation.gaugeStateBeforeFire.umbralHearts !== AF_UI_BUFF_MAX_STACK) {\n                this.currentRotation.atypicalAFStart = true;\n            }\n        }\n        // If we no longer have enochian, flag it for display\n        if (this.currentGaugeState.enochian && !event.enochian) {\n            this.currentRotation.errorCode = CYCLE_ERRORS.DROPPED_ENOCHIAN;\n        }\n        // Retrieve the GaugeState from the event\n        this.currentGaugeState.astralFire = event.astralFire;\n        this.currentGaugeState.umbralIce = event.umbralIce;\n        this.currentGaugeState.umbralHearts = event.umbralHearts;\n        this.currentGaugeState.enochian = event.enochian;\n        // If we're in fire phase, stop processing\n        if (this.currentRotation.inFirePhase) {\n            return;\n        }\n        // If we're in ice phase, set the current gauge state into the pre-fire cache for later recording\n        // Still need by-value assignment here\n        this.currentRotation.gaugeStateBeforeFire = Object.assign(this.currentRotation.gaugeStateBeforeFire, this.currentGaugeState);\n    }\n    // Handle cast events and updated recording data accordingly\n    onCast(event) {\n        const actionId = event.ability.guid;\n        // For right now, we're assuming the main boss of an encounter is the first thing you hit. This isn't the case for Ultimates\n        // but we'll deal with that in the future (TODO)\n        if (!this.primaryTargetId && event.targetID) {\n            this.primaryTargetId = event.targetID;\n        }\n        // If this action is signifies the beginning of a new cycle, unless this is the first\n        // cast of the log, stop the current cycle, and begin a new one. If Transposing from ice\n        // to fire, keep this cycle going\n        if (CYCLE_ENDPOINTS.includes(actionId) && !this.firstEvent &&\n            !(actionId === ACTIONS.TRANSPOSE.id && this.currentGaugeState.umbralIce > 0)) {\n            this.startRecording(event);\n        }\n        // Add actions other than auto-attacks to the rotation cast list\n        const action = getDataBy(ACTIONS, 'id', actionId);\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // Note that we've recorded our first damage event once we have one\n        if (this.firstEvent && action.onGcd) {\n            this.firstEvent = false;\n        }\n        this.currentRotation.casts.push(event);\n        // If this is manafont, note that we used it so we don't have to cast.filter(...).length to find out\n        if (actionId === ACTIONS.MANAFONT.id) {\n            this.currentRotation.hasManafont = true;\n        }\n        // Keep track of total thunder casts so we can include that in the thunder uptime checklist item\n        if (actionId === ACTIONS.THUNDER_III.id && event.targetID === this.primaryTargetId) {\n            this.thunder3Casts++;\n        }\n    }\n    onDeath() {\n        this.currentRotation.errorCode = CYCLE_ERRORS.DIED;\n    }\n    // Get the uptime percentage for the Thunder status defbuff\n    getThunderUptime() {\n        const statusTime = this.enemies.getStatusUptime(STATUSES.THUNDER_III.id);\n        const uptime = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusTime / uptime) * 100;\n    }\n    // Finish this parse and add the suggestions and checklist items\n    onComplete() {\n        this.stopRecording(undefined);\n        // Override the error code for cycles that dropped enochian, when the cycle contained an unabletoact time long enough to kill it.\n        // Couldn't do this at the time of code assignment, since the downtime data wasn't fully available yet\n        this.history.filter(cycle => cycle.errorCode === CYCLE_ERRORS.DROPPED_ENOCHIAN).forEach(cycle => {\n            if (this.unableToAct.getDowntimes(cycle.startTime, cycle.endTime).filter(downtime => Math.max(0, downtime.end - downtime.start) >= ASTRAL_UMBRAL_DURATION).length > 0) {\n                cycle.overrideErrorCode(CYCLE_ERRORS.FINAL_OR_DOWNTIME);\n            }\n        });\n        // Suggestion for skipping B4 on rotations that are cut short by the end of the parse or downtime\n        if (this.missedF4s) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FIRE_IV.icon,\n                content: <Trans id=\"blm.rotation-watchdog.suggestions.missed-f4s.content\">\n\t\t\t\t\tYou lost at least one <ActionLink {...ACTIONS.FIRE_IV}/> by not skipping <ActionLink {...ACTIONS.BLIZZARD_IV}/> in the Umbral Ice phase before the fight finished.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MEDIUM,\n                why: <Trans id=\"blm.rotation-watchdog.suggestions.missed-f4s.why\">\n\t\t\t\t\t<Plural value={this.missedF4s} one=\"# Fire IV was\" other=\"# Fire IVs were\"/> missed.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // Suggestion for unneccessary extra F1s\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FIRE_I.icon,\n            content: <Trans id=\"blm.rotation-watchdog.suggestions.extra-f1s.content\">\n\t\t\t\tCasting more than one <ActionLink {...ACTIONS.FIRE_I}/> per Astral Fire cycle is a crutch that should be avoided by better pre-planning of the encounter.\n\t\t\t</Trans>,\n            tiers: ISSUE_SEVERITY_TIERS,\n            value: this.extraF1s,\n            why: <Trans id=\"blm.rotation-watchdog.suggestions.extra-f1s.why\">\n\t\t\t\t<Plural value={this.extraF1s} one=\"# extra Fire I was\" other=\"# extra Fire Is were\"/> cast.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to end Astral Fires with Despair\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DESPAIR.icon,\n            content: <Trans id=\"blm.rotation-watchdog.suggestions.end-with-despair.content\">\n\t\t\t\tOnce you can no longer cast another spell in Astral Fire and remain above 800 MP, you should use your remaining MP by casting <ActionLink {...ACTIONS.DESPAIR}/>.\n\t\t\t</Trans>,\n            tiers: ISSUE_SEVERITY_TIERS,\n            value: this.astralFiresMissingDespairs,\n            why: <Trans id=\"blm.rotation-watchdog.suggestions.end-with-despair.why\">\n\t\t\t\t<Plural value={this.astralFiresMissingDespairs} one=\"# Astral Fire phase was\" other=\"# Astral Fire phases were\"/> missing at least one <ActionLink showIcon={false} {...ACTIONS.DESPAIR}/>.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to not use Manafont before Despair\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.MANAFONT.icon,\n            content: <Trans id=\"blm.rotation-watchdog.suggestions.mf-before-despair.content\">\n\t\t\t\tUsing <ActionLink {...ACTIONS.MANAFONT}/> before <ActionLink {...ACTIONS.DESPAIR}/> leads to fewer <ActionLink showIcon={false} {...ACTIONS.DESPAIR}/>s than possible being cast. Try to avoid that since <ActionLink showIcon={false} {...ACTIONS.DESPAIR}/> is stronger than <ActionLink {...ACTIONS.FIRE_IV}/>.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: this.manafontBeforeDespair,\n            why: <Trans id=\"blm.rotation-watchdog.suggestions.mf-before-despair.why\">\n\t\t\t\t<Plural value={this.manafontBeforeDespair} one=\"# Manafont was\" other=\"# Manafonts were\"/> used before <ActionLink {...ACTIONS.DESPAIR}/>.\n\t\t\t</Trans>,\n        }));\n        // Suggestion for hard T3s under AF. Should only have one per cycle\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.THUNDER_III_FALSE.icon,\n            content: <Trans id=\"blm.rotation-watchdog.suggestions.wrong-t3.content\">\n\t\t\t\tDon't hard cast more than one <ActionLink {...ACTIONS.THUNDER_III}/> in your Astral Fire phase, since that costs MP which could be used for more <ActionLink {...ACTIONS.FIRE_IV}/>s.\n\t\t\t</Trans>,\n            tiers: ISSUE_SEVERITY_TIERS,\n            value: this.extraT3s,\n            why: <Trans id=\"blm.rotation-watchdog.suggestions.wrong-t3.why\">\n\t\t\t\t<Plural value={this.extraT3s} one=\"# extra Thunder III was\" other=\"# extra Thunder IIIs were\"/> hard casted under Astral Fire.\n\t\t\t</Trans>,\n        }));\n        // Suggestion not to icemage... :(\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.BLIZZARD_II.icon,\n            content: <Trans id=\"blm.rotation-watchdog.suggestions.icemage.content\">\n\t\t\t\tAvoid spending significant amounts of time in Umbral Ice. The majority of your damage comes from your Astral Fire phase, so you should maximize the number of <ActionLink {...ACTIONS.FIRE_IV}/>s cast during the fight.\n\t\t\t</Trans>,\n            tiers: ISSUE_SEVERITY_TIERS,\n            value: this.rotationsWithoutFire,\n            why: <Trans id=\"blm.rotation-watchdog.suggestions.icemage.why\">\n\t\t\t\t<Plural value={this.rotationsWithoutFire} one=\"# rotation was\" other=\"# rotations were\"/> performed with no fire spells.\n\t\t\t</Trans>,\n        }));\n        // Suggestions to not spam T3 too much\n        const uptime = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        const maxThunders = Math.floor(uptime / THUNDERCLOUD_MILLIS);\n        if (this.thunder3Casts > maxThunders) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.THUNDER_III.icon,\n                content: <Trans id=\"blm.rotation-watchdog.suggestions.excess-thunder.content\">\n\t\t\t\t\tCasting <ActionLink {...ACTIONS.THUNDER_III}/> too many times can cause you to lose DPS by casting fewer <ActionLink {...ACTIONS.FIRE_IV}/>. Try not to cast <ActionLink showIcon={false} {...ACTIONS.THUNDER_III}/> unless your <StatusLink {...STATUSES.THUNDER_III}/> DoT or <StatusLink {...STATUSES.THUNDERCLOUD}/> proc are about to wear off.\n\t\t\t\t</Trans>,\n                severity: this.thunder3Casts > 2 * maxThunders ? SEVERITY.MAJOR : SEVERITY.MEDIUM,\n                why: <Trans id=\"blm.rotation-watchdog.suggestions.excess-thunder.why\">\n\t\t\t\t\tAt least <Plural value={this.thunder3Casts - maxThunders} one=\"# extra Thunder III was\" other=\"# extra Thunder III were\"/> cast.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // Checklist item for keeping Thunder 3 DoT rolling\n        this.checklist.add(new Rule({\n            name: <Trans id=\"blm.rotation-watchdog.checklist.dots.name\">Keep your <StatusLink {...STATUSES.THUNDER_III}/> DoT up</Trans>,\n            description: <Trans id=\"blm.rotation-watchdog.checklist.dots.description\">\n\t\t\t\tYour <StatusLink {...STATUSES.THUNDER_III}/> DoT contributes significantly to your overall damage, both on its own, and from additional <StatusLink {...STATUSES.THUNDERCLOUD}/> procs. Try to keep the DoT applied.\n\t\t\t</Trans>,\n            target: 95,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"blm.rotation-watchdog.checklist.dots.requirement.name\"><StatusLink {...STATUSES.THUNDER_III}/> uptime</Trans>,\n                    percent: () => this.getThunderUptime(),\n                }),\n            ],\n        }));\n    }\n    // Complete the previous cycle and start a new one\n    startRecording(event) {\n        this.stopRecording(event);\n        // Pass in whether we've seen the first cycle endpoint to account for pre-pull buff executions (mainly Sharpcast)\n        this.currentRotation = new Cycle(event.timestamp, this.currentGaugeState);\n    }\n    // End the current cycle, send it off to error processing, and add it to the history list\n    stopRecording(event) {\n        this.currentRotation.endTime = this.parser.currentTimestamp;\n        // If an event object wasn't passed, or the event was a transpose that occurred during downtime,\n        // treat this as a rotation that ended with some kind of downtime\n        if (!event || (event && event.ability.guid === ACTIONS.TRANSPOSE.id &&\n            this.invuln.isUntargetable('all', event.timestamp))) {\n            this.currentRotation.finalOrDowntime = true;\n        }\n        this.processCycle(this.currentRotation);\n        this.history.push(this.currentRotation);\n    }\n    // Process errors for this cycle\n    // TODO: Handle aoe things?\n    // TODO: Handle Flare?\n    processCycle(currentRotation) {\n        // Only process errors for rotations with more than the minimum number of casts,\n        // since fewer than that usually indicates something weird happening\n        if (currentRotation.casts.length <= MIN_ROTATION_LENGTH) {\n            currentRotation.errorCode = CYCLE_ERRORS.SHORT;\n            return;\n        }\n        // Check for errors that apply for all cycles\n        // Check if the rotation included the expected number of Despair casts\n        if (currentRotation.missingDespairs) {\n            this.astralFiresMissingDespairs++;\n            currentRotation.errorCode = CYCLE_ERRORS.MISSING_DESPAIRS;\n        }\n        // Check whether manafont was used before despair\n        if (currentRotation.hasManafont && currentRotation.actualDespairs > 0 &&\n            currentRotation.casts.findIndex(cast => cast.ability.guid === ACTIONS.MANAFONT.id) <\n                currentRotation.casts.findIndex(cast => cast.ability.guid === ACTIONS.DESPAIR.id)) {\n            this.manafontBeforeDespair++;\n            currentRotation.errorCode = CYCLE_ERRORS.MANAFONT_BEFORE_DESPAIR;\n        }\n        // Check if the rotation included more than one Fire 1\n        const fire1Count = currentRotation.casts.filter(cast => cast.ability.guid === ACTIONS.FIRE_I.id).length;\n        if (fire1Count > 1) {\n            currentRotation.errorCode = CYCLE_ERRORS.EXTRA_F1;\n            this.extraF1s += Math.max(0, fire1Count - 1);\n        }\n        // If this cycle ends with downtime or is the last cycle, many of the errors we normally check for\n        // don't apply, so split the processing pathway here\n        if (currentRotation.finalOrDowntime) {\n            this.processDowntimeCycle(currentRotation);\n            return;\n        }\n        this.processNormalCycle(currentRotation);\n    }\n    // Process errors for a normal mid-fight cycle\n    processNormalCycle(currentRotation) {\n        // Check to make sure we didn't lose Fire 4 casts due to spending MP on T3 hardcasts\n        const hardT3Count = currentRotation.casts.filter(cast => cast.ability.overrideAction)\n            .filter(cast => cast.ability.overrideAction.id === ACTIONS.THUNDER_III_FALSE.id).length;\n        if (hardT3Count > 1 || (hardT3Count > 0 && currentRotation.firePhaseStartMP < MIN_MP_FOR_FULL_ROTATION)) {\n            this.extraT3s++;\n            currentRotation.errorCode = CYCLE_ERRORS.EXTRA_T3;\n        }\n        // Why so icemage?\n        if (!currentRotation.casts.filter(cast => FIRE_SPELLS.includes(cast.ability.guid)).length) {\n            this.rotationsWithoutFire++;\n            currentRotation.errorCode = CYCLE_ERRORS.NO_FIRE_SPELLS;\n        }\n        // If they're just missing Fire 4 because derp, note it\n        if (currentRotation.missingFire4s) {\n            currentRotation.errorCode = CYCLE_ERRORS.MISSING_FIRE4S;\n        }\n    }\n    // Process errors for a cycle that was cut short by downtime or by the fight ending\n    processDowntimeCycle(currentRotation) {\n        currentRotation.errorCode = CYCLE_ERRORS.FINAL_OR_DOWNTIME;\n        // Check if more Fire 4s could've been cast by skipping Blizzard 4 before this downtime\n        if (currentRotation.gaugeStateBeforeFire.umbralHearts > 0 && currentRotation.missingFire4s === 2) {\n            this.missedF4s++;\n        }\n        // TODO: Check for hardcast T3s, if this cycle ends in downtime, that cast time should've been a fire spell\n    }\n    output() {\n        const outliers = this.history.filter(cycle => cycle.errorCode.priority >\n            CYCLE_ERRORS.SHORT.priority || DEBUG_SHOW_ALL_CYCLES);\n        if (outliers.length > 0) {\n            return <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"blm.rotation-watchdog.rotation-table.message\">\n\t\t\t\t\t\tThe core of BLM consists of six <ActionLink {...ACTIONS.FIRE_IV}/>s and one <ActionLink {...ACTIONS.DESPAIR}/> per rotation (seven <ActionLink {...ACTIONS.FIRE_IV}/>s and two <ActionLink {...ACTIONS.DESPAIR}/>s with <ActionLink {...ACTIONS.MANAFONT}/>).<br />\n\t\t\t\t\t\tAvoid missing Fire IV casts where possible.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t\t<Message warning icon>\n\t\t\t\t\t<Icon name=\"warning sign\"/>\n\t\t\t\t\t<Message.Content>\n\t\t\t\t\t\t<Trans id=\"blm.rotation-watchdog.rotation-table.disclaimer\">This module assumes you are following the standard BLM playstyle.<br />\n\t\t\t\t\t\t\tIf you are following the Megumin playstyle, this report and many of the suggestions may not be applicable.\n\t\t\t\t\t\t</Trans>\n\t\t\t\t\t</Message.Content>\n\t\t\t\t</Message>\n\t\t\t\t<RotationTable targets={[\n                {\n                    header: <ActionLink showName={false} {...ACTIONS.FIRE_IV}/>,\n                    accessor: 'fire4s',\n                },\n                {\n                    header: <ActionLink showName={false} {...ACTIONS.DESPAIR}/>,\n                    accessor: 'despairs',\n                },\n            ]} notes={[\n                {\n                    header: <Trans id=\"blm.rotation-watchdog.rotation-table.header.reason\">Why Outlier</Trans>,\n                    accessor: 'reason',\n                },\n            ]} data={outliers.map(cycle => {\n                return ({\n                    start: cycle.startTime - this.parser.fight.start_time,\n                    end: cycle.endTime != null ?\n                        cycle.endTime - this.parser.fight.start_time :\n                        cycle.startTime - this.parser.fight.start_time,\n                    targetsData: {\n                        fire4s: {\n                            actual: cycle.actualFire4s,\n                            expected: cycle.expectedFire4s,\n                        },\n                        despairs: {\n                            actual: cycle.actualDespairs,\n                            expected: cycle.expectedDespairs,\n                        },\n                    },\n                    notesMap: {\n                        reason: <>{cycle.errorCode.message}</>,\n                    },\n                    rotation: cycle.casts,\n                });\n            })} onGoto={this.timeline.show}/>\n\t\t\t</Fragment>;\n        }\n    }\n}\nRotationWatchdog.handle = 'RotationWatchdog';\nRotationWatchdog.title = t('blm.rotation-watchdog.title') `Rotation Outliers`;\nRotationWatchdog.displayOrder = DISPLAY_ORDER.ROTATION;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], RotationWatchdog.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], RotationWatchdog.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability)\n], RotationWatchdog.prototype, \"invuln\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Enemies)\n], RotationWatchdog.prototype, \"enemies\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], RotationWatchdog.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], RotationWatchdog.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", UnableToAct)\n], RotationWatchdog.prototype, \"unableToAct\", void 0);\n","import { Trans } from '@lingui/react';\nimport ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\nimport React from 'react';\nconst ALLOWEDDOWNTIMEALL = 1250;\nconst FIRSTUSEOFFSETALL = 15000;\nconst TARGETPERCENT = 95;\nexport default class OGCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        // Time in ms that Laqi deems ok for a OGCD to be down : ^)\n        this.defaultAllowedAverageDowntimeDowntime = ALLOWEDDOWNTIMEALL;\n        this.defaultFirstUseOffset = FIRSTUSEOFFSETALL;\n        this.trackedCds = [\n            { cooldowns: [ACTIONS.LEY_LINES] },\n            { cooldowns: [ACTIONS.SHARPCAST] },\n            {\n                cooldowns: [ACTIONS.MANAFONT],\n                firstUseOffset: 25000,\n            },\n            { cooldowns: [ACTIONS.TRIPLECAST] },\n        ];\n        this.checklistTarget = TARGETPERCENT;\n        this.checklistDescription = <Trans id=\"blm.ogcd-downtime.ogcd-cd-metric\">Always make sure to use your OGCDs when they are up but don't clip them. Utilize your procs or fast Blizzard IIIs or Fire IIIs to weave them. <Trans id=\"blm.ogcd-downtime.ogcd-cd-buffer\">To account for random factors you are given a buffer of {ALLOWEDDOWNTIMEALL} seconds per instance to hold your cooldowns.</Trans></Trans>;\n    }\n}\n","import CoreSpeedmod from 'parser/core/modules/Speedmod';\nimport STATUSES from 'data/STATUSES';\nimport { BLM_GAUGE_EVENT } from './Gauge';\nimport { FIRE_SPELLS, ICE_SPELLS } from './Elements';\nconst MAX_ASTRAL_UMBRAL_STACKS = 3;\nconst FAST_CAST_SCALAR = 0.5;\nexport default class Speedmod extends CoreSpeedmod {\n    constructor(...args) {\n        super(...args);\n        this._astralFireStacks = 0;\n        this._umbralIceStacks = 0;\n        this._isFastCast = false;\n        this.SPEED_BUFF_STATUS_IDS.push(STATUSES.CIRCLE_OF_POWER.id);\n    }\n    jobSpecificNormaliseLogic(event) {\n        const types = [BLM_GAUGE_EVENT, 'begincast', 'cast'];\n        if (!types.includes(event.type)) {\n            return;\n        }\n        switch (event.type) {\n            case BLM_GAUGE_EVENT:\n                this._astralFireStacks = event.astralFire;\n                this._umbralIceStacks = event.umbralIce;\n                break;\n            case 'begincast':\n                if ((this._umbralIceStacks === MAX_ASTRAL_UMBRAL_STACKS && FIRE_SPELLS.includes(event.ability.guid)) ||\n                    (this._astralFireStacks === MAX_ASTRAL_UMBRAL_STACKS && ICE_SPELLS.includes(event.ability.guid))) {\n                    this._isFastCast = true;\n                    this.recalcSpeedmodAndSaveHistory(event);\n                }\n                break;\n            case 'cast':\n                if (this._isFastCast) {\n                    this._isFastCast = false;\n                    this.recalcSpeedmodAndSaveHistory(event);\n                }\n                break;\n        }\n    }\n    getJobAdditionalSpeedbuffScalar() {\n        if (this._isFastCast) {\n            return FAST_CAST_SCALAR;\n        }\n        return 1.0;\n    }\n}\nSpeedmod.dependencies = [\n    ...CoreSpeedmod.dependencies,\n    'gauge',\n];\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { Table, Button } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { Group, Item } from 'parser/core/modules/Timeline';\nimport Module from 'parser/core/Module';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst LL_BUFFS = [\n    STATUSES.LEY_LINES.id,\n    STATUSES.CIRCLE_OF_POWER.id,\n];\nexport default class Leylines extends Module {\n    constructor(...args) {\n        super(...args);\n        this._buffWindows = {\n            [STATUSES.LEY_LINES.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.CIRCLE_OF_POWER.id]: {\n                current: null,\n                history: [],\n            },\n        };\n        this._group = null;\n        this.addHook('applybuff', { by: 'player', abilityId: LL_BUFFS }, this._onGain);\n        this.addHook('removebuff', { by: 'player', abilityId: LL_BUFFS }, this._onDrop);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n        this._group = new Group({\n            id: 'leybuffs',\n            content: 'Ley Lines Buffs',\n            order: 0,\n            nestedGroups: [],\n        });\n        this.timeline.addGroup(this._group);\n    }\n    // Manage buff windows\n    _onGain(event) {\n        const status = getDataBy(STATUSES, 'id', event.ability.guid);\n        // Something is not right\n        if (!status) {\n            return;\n        }\n        // Track the new window\n        const tracker = this._buffWindows[status.id];\n        tracker.current = {\n            start: event.timestamp,\n        };\n        // Manage timeline group\n        const groupId = 'leybuffs-' + status.id;\n        if (!this._group.nestedGroups.includes(groupId)) {\n            this.timeline.addGroup(new Group({\n                id: groupId,\n                content: status.name,\n            }));\n            this._group.nestedGroups.push(groupId);\n        }\n    }\n    _onDrop(event) {\n        this._stopAndSave(event.ability.guid, event.timestamp);\n    }\n    // We died, close windows\n    _onDeath(event) {\n        this._stopAndSave(STATUSES.LEY_LINES.id, event.timestamp);\n    }\n    // Finalise a buff window\n    _stopAndSave(statusId, endTime = this.parser.currentTimestamp) {\n        const tracker = this._buffWindows[statusId];\n        // Already closed, nothing to do here\n        if (!tracker.current) {\n            return;\n        }\n        // Close the window\n        tracker.current.stop = endTime;\n        tracker.history.push(tracker.current);\n        tracker.current = null;\n        // Close dependency windows\n        if (statusId === STATUSES.LEY_LINES.id) {\n            this._stopAndSave(STATUSES.CIRCLE_OF_POWER.id, endTime);\n        }\n    }\n    // A reminder of man's ability to generate electricity\n    _dontMovePercent(power, lines) {\n        return (power / lines) * 100;\n    }\n    _onComplete() {\n        // Current time will be end of fight so no need to pass it here\n        if (this._buffWindows[STATUSES.LEY_LINES.id].current) {\n            this._stopAndSave(STATUSES.LEY_LINES.id);\n        }\n        // For each buff, add it to timeline\n        LL_BUFFS.forEach(buff => {\n            const status = getDataBy(STATUSES, 'id', buff);\n            const groupId = 'leybuffs-' + status.id;\n            const fightStart = this.parser.fight.start_time;\n            this._buffWindows[buff].history.forEach(window => {\n                this.timeline.addItem(new Item({\n                    type: 'background',\n                    start: window.start - fightStart,\n                    end: window.stop - fightStart,\n                    group: groupId,\n                    content: <img src={status.icon} alt={status.name}/>,\n                }));\n            });\n        });\n        // Get the total duration of CoP uptime and Ley Lines, so we can get the overall percentage uptime\n        const copDuration = this._buffWindows[STATUSES.CIRCLE_OF_POWER.id].history.reduce((duration, cop) => duration + Math.max(cop.stop - cop.start, 0), 0);\n        const linesDuration = this._buffWindows[STATUSES.LEY_LINES.id].history.reduce((duration, lines) => duration + Math.max(lines.stop - lines.start, 0), 0);\n        this.checklist.add(new Rule({\n            name: <Trans id=\"blm.leylines.checklist-caption\">Stay in your Ley Lines</Trans>,\n            description: <Trans id=\"blm.leylines.checklist\">Try to avoid leaving your Ley Lines after placing them. Take advantage of Ley Lines' size to stay in them while dodging AOEs and being in range of healers. If you can't stay in them for the majority of a Ley Lines' duration, consider changing where they're placed in the fight.</Trans>,\n            requirements: [\n                new Requirement({\n                    name: <ActionLink {...ACTIONS.LEY_LINES}/>,\n                    percent: this._dontMovePercent(copDuration, linesDuration),\n                }),\n            ],\n            //pretty random. Should be revised, maybe based on fights? 10% is ~ 1 GCD. So we allow that.\n            target: 90,\n        }));\n    }\n    output() {\n        return <Table collapsing unstackable compact=\"very\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.leylines.timestamp-header\">Timestamp</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.leylines.uptime-header\">Uptime</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this._buffWindows[STATUSES.LEY_LINES.id].history.map(leyLinesEvent => {\n            // Find the CoPs that were inside this Ley Lines\n            const thisCoPHistory = this._buffWindows[STATUSES.CIRCLE_OF_POWER.id].history.filter(cops => ((cops.start >= leyLinesEvent.start) & (cops.stop <= leyLinesEvent.stop)));\n            // For this set of CoPs, get the uptime\n            const thisCoPUptime = thisCoPHistory.reduce((duration, cop) => duration + Math.max(cop.stop - cop.start, 0), 0);\n            // Note that since we're getting the actual duration, rather than the expected duration,\n            // technically we'll call it 100% uptime if you stay in the lines and die halfway through...\n            // However, since that'll get flagged as a morbid checklist item, that's probably ok.\n            const thisPercent = this._dontMovePercent(thisCoPUptime, leyLinesEvent.stop - leyLinesEvent.start).toFixed(2);\n            return <Table.Row key={leyLinesEvent.start}>\n\t\t\t\t\t\t<Table.Cell>{this.parser.formatTimestamp(leyLinesEvent.start)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{thisPercent}%</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Button onClick={() => this.timeline.show(leyLinesEvent.start - this.parser.fight.start_time, leyLinesEvent.stop - this.parser.fight.start_time)}>\n\t\t\t\t\t\t\t\t<Trans id=\"blm.leylines.timelinelink-button\">Jump to Timeline</Trans>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nLeylines.handle = 'leylines';\nLeylines.title = t('blm.leylines.title') `Ley Lines`;\nLeylines.displayOrder = DISPLAY_ORDER.LEY_LINES;\nLeylines.dependencies = [\n    'timeline',\n    'checklist',\n];\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { Table, Button } from 'semantic-ui-react';\nimport Module from 'parser/core/Module';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\n//value to be added to the gcd to avoid false positives. 100ms for caster tax, 50ms for gcd jitter.\nconst GCD_ERROR_OFFSET = 150;\n//slide cast period is 500 ms.\nconst SLIDECAST_OFFSET = 500;\nexport default class NotCasting extends Module {\n    constructor(...args) {\n        super(...args);\n        this._noCastWindows = {\n            current: null,\n            history: [],\n        };\n        this._hardCast = false;\n        this.addHook('begincast', { by: 'player' }, this._onBegin);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    _onCast(event) {\n        //better than using 2.5s I guess\n        const gcdLength = this.gcd.getEstimate(true);\n        let timeStamp = event.timestamp;\n        //coming from a hard cast, adjust for slidecasting\n        if (this._hardCast) {\n            timeStamp = event.timestamp + SLIDECAST_OFFSET;\n            this._hardCast = false;\n        }\n        //don't check the time that you actually spent casting\n        if (!this._noCastWindows.current) {\n            this._noCastWindows.current = {\n                start: timeStamp,\n            };\n            return;\n        }\n        //check if it's been more than a gcd length\n        if (timeStamp - this._noCastWindows.current.start > gcdLength + GCD_ERROR_OFFSET) {\n            this._stopAndSave(timeStamp);\n        }\n        //this cast is our new last cast\n        this._noCastWindows.current = {\n            start: timeStamp,\n        };\n    }\n    _onBegin(event) {\n        const gcdLength = this.gcd.getEstimate(true);\n        if (this._noCastWindows.current) {\n            if (event.timestamp - this._noCastWindows.current.start > gcdLength + GCD_ERROR_OFFSET) {\n                this._stopAndSave(event.timestamp);\n            }\n            this._noCastWindows.current = null;\n            this._hardCast = true;\n        }\n    }\n    //reset to not count the time you lie on the ground as time you aren't casting : ^)\n    _onDeath() { this._noCastWindows.current = null; }\n    _stopAndSave(endTime) {\n        const tracker = this._noCastWindows;\n        // Already closed, nothing to do here\n        if (!tracker.current) {\n            return;\n        }\n        // Close the window\n        tracker.current.stop = endTime;\n        tracker.history.push(tracker.current);\n        tracker.current = null;\n    }\n    _onComplete(event) {\n        const gcdLength = this.gcd.getEstimate(true);\n        //finish up\n        this._stopAndSave(event.timestamp);\n        //filter out invuln periods\n        this._noCastWindows.history = this._noCastWindows.history.filter(windows => {\n            return this.invuln.getInvulns('all', windows.start, windows.stop).length === 0;\n        });\n        //filter out negative durations\n        this._noCastWindows.history = this._noCastWindows.history.filter(windows => windows.stop - windows.start > gcdLength + GCD_ERROR_OFFSET);\n    }\n    output() {\n        const gcdLength = this.gcd.getEstimate(true);\n        if (this._noCastWindows.history.length === 0) {\n            return;\n        }\n        return <Table collapsing unstackable compact=\"very\">\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.notcasting.timestamp-header\">Timestamp</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"blm.notcasting.duration-header\">Duration</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this._noCastWindows.history.map(notCasting => {\n            return <Table.Row key={notCasting.start}>\n\t\t\t\t\t\t<Table.Cell>{this.parser.formatTimestamp(notCasting.start)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>&ge;{this.parser.formatDuration(notCasting.stop - notCasting.start - gcdLength - GCD_ERROR_OFFSET)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t\t<Button onClick={() => this.timeline.show(notCasting.start - this.parser.fight.start_time, notCasting.stop - this.parser.fight.start_time)}>\n\t\t\t\t\t\t\t\t<Trans id=\"blm.notcasting.timelinelink-button\">Jump to Timeline</Trans>\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nNotCasting.handle = 'notcasting';\nNotCasting.title = t('blm.notcasting.title') `Times you did literally nothing`;\nNotCasting.displayOrder = DISPLAY_ORDER.NOTCASTING;\nNotCasting.dependencies = [\n    'timeline',\n    'gcd',\n    'invuln',\n];\n","import { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport React from 'react';\nimport { Item } from 'parser/core/modules/Timeline';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { Trans, Plural } from '@lingui/react';\nimport { StatusLink, ActionLink } from 'components/ui/DbLink';\nconst SHARPCAST_DURATION_MILLIS = STATUSES.SHARPCAST.duration * 1000;\nconst SHARPCAST_CONSUMER_IDS = [\n    ACTIONS.FIRE_I.id,\n    ACTIONS.THUNDER_III.id,\n    ACTIONS.THUNDER_IV.id,\n    ACTIONS.SCATHE.id,\n];\nexport default class Sharpcast extends Module {\n    constructor(...args) {\n        super(...args);\n        this._buffWindows = {\n            current: null,\n            history: [],\n        };\n        this._droppedSharpcasts = 0;\n        this._sharpedScathes = 0;\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.SHARPCAST.id }, this._onRemoveSharpcast);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.SHARPCAST.id }, this._onGainSharpcast);\n        this.addHook('cast', { by: 'player', abilityId: SHARPCAST_CONSUMER_IDS }, this._onCast);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    _onRemoveSharpcast(event) {\n        this._stopAndSave(event.timestamp);\n    }\n    _onGainSharpcast(event) {\n        this._buffWindows.current = {\n            start: event.timestamp,\n        };\n    }\n    // Consolidate old onCast functions into one central function\n    _onCast(event) {\n        const actionId = event.ability.guid;\n        const action = getDataBy(ACTIONS, 'id', actionId);\n        if (action && action.onGcd) {\n            this._tryConsumeSharpcast(event);\n        }\n    }\n    _tryConsumeSharpcast(event) {\n        const actionId = event.ability.guid;\n        // If this action isn't affected by a proc (or something is wrong), bail out\n        if (!SHARPCAST_CONSUMER_IDS.includes(actionId)) {\n            return;\n        }\n        // If this proc is active, consume it\n        if (this._buffWindows.current) {\n            // Stop the buff window, and ensure it's not marked as a drop\n            this._stopAndSave(event.timestamp, false);\n            if (actionId === ACTIONS.SCATHE.id) {\n                this._sharpedScathes++;\n            }\n        }\n    }\n    _onDeath(event) {\n        this._stopAndSave(event.timestamp);\n    }\n    _stopAndSave(endTime = this.parser.currentTimestamp, countDrops = true) {\n        if (!this._buffWindows.current) {\n            return;\n        }\n        this._buffWindows.current.stop = endTime;\n        if (this._buffWindows.current.stop - this._buffWindows.current.start >= SHARPCAST_DURATION_MILLIS && countDrops) {\n            this._droppedSharpcasts++;\n        }\n        this._buffWindows.history.push(this._buffWindows.current);\n        this._buffWindows.current = null;\n    }\n    _onComplete() {\n        // Finalise the buff if it was still active\n        if (this._buffWindows.current) {\n            this._stopAndSave();\n        }\n        const groupId = this.procs.getGroupIdForStatus(STATUSES.SHARPCAST);\n        const fightStart = this.parser.fight.start_time;\n        // Add buff windows to the timeline\n        this._buffWindows.history.forEach(window => {\n            this.timeline.addItem(new Item({\n                type: 'background',\n                start: window.start - fightStart,\n                end: window.stop - fightStart,\n                group: groupId,\n                content: <img src={STATUSES.SHARPCAST.icon} alt={STATUSES.SHARPCAST.name}/>,\n            }));\n        });\n        // Suggestions to use sharpcasts that wore off.\n        this.suggestions.add(new TieredSuggestion({\n            icon: STATUSES.SHARPCAST.icon,\n            content: <Trans id=\"blm.sharpcast.suggestions.dropped-sharpcasts.content\">\n\t\t\t\tYou lost at least one guaranteed <StatusLink {...STATUSES.THUNDERCLOUD}/> or <StatusLink {...STATUSES.FIRESTARTER}/> proc by allowing <StatusLink {...STATUSES.SHARPCAST}/> to fall off.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                3: SEVERITY.MEDIUM,\n                5: SEVERITY.MAJOR,\n            },\n            value: this._droppedSharpcasts,\n            why: <Trans id=\"blm.sharpcast.suggestions.dropped-sharpcasts.why\">\n\t\t\t\t<Plural value={this._droppedSharpcasts} one=\"# Sharpcast\" other=\"# Sharpcasts\"/> expired.\n\t\t\t</Trans>,\n        }));\n        // Suggestion not to overuse sharp-scathe\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SCATHE.icon,\n            content: <Trans id=\"blm.sharpcast.suggestions.sharpcasted-scathes.content\">\n\t\t\t\tYou consumed at least one <StatusLink {...STATUSES.SHARPCAST}/> by using <ActionLink {...ACTIONS.SCATHE}/>. While it's better than letting the buff expire, you should try to avoid doing so.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                4: SEVERITY.MEDIUM,\n                6: SEVERITY.MAJOR,\n            },\n            value: this._sharpedScathes,\n            why: <Trans id=\"blm.sharpcast.suggestions.sharpcasted-scathes.why\">\n\t\t\t\t<Plural value={this._sharpedScathes} one=\"# Sharpcast was\" other=\"# Sharpcasts were\"/> consumed by <ActionLink {...ACTIONS.SCATHE}/>.\n\t\t\t</Trans>,\n        }));\n    }\n}\nSharpcast.handle = 'sharpcast';\nSharpcast.dependencies = [\n    'timeline',\n    'procs',\n    'suggestions',\n];\n","import Gauge from './Gauge';\nimport Procs from './Procs';\nimport BlmWeaving from './Weaving';\nimport RotationWatchdog from './RotationWatchdog';\nimport OGCDDowntime from './OGCDDowntime';\nimport Speedmod from './Speedmod';\nimport Leylines from './Leylines';\nimport NotCasting from './NotCasting';\nimport Sharpcast from './Sharpcast';\nexport default [\n    Gauge,\n    Procs,\n    BlmWeaving,\n    RotationWatchdog,\n    OGCDDowntime,\n    Speedmod,\n    Leylines,\n    NotCasting,\n    Sharpcast,\n];\n"],"sourceRoot":""}
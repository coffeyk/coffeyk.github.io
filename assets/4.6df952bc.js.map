{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/core/modules/GlobalCooldown.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","1","2.5","WEAVING_SEVERITY","SEVERITY","MEDIUM","5","MAJOR","Weaving","Module","constructor","super","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","addHook","by","_onBeginCast","_onCast","_onComplete","event","action","getAction","ability","guid","autoAttack","isOgcd","push","timestamp","_saveIfBad","badWeaves","suggestions","add","TieredSuggestion","content","href","parser","scrollTo","handle","message","title","why","length","tiers","value","leadingGcdEvent","fight","start_time","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","onGcd","maxWeaves","weaveCount","filter","isUntargetable","castTime","forEvent","closest","matchClosestLower","speedmod","get","gcdLength","gcd","getEstimate","output","panels","item","formatTimestamp","exclusive","styled","fluid","dependencies","MIN_GCD","MAX_GCD","BASE_GCD","CASTER_TAX","DEBUG_LOG_SAVED_GCDS","GlobalCooldown","_castingEvent","_estimatedBaseGcd","_estimateGcdCount","_lastGcd","isInstant","gcds","gcdGroupId","normalise","byPlayer","type","hasBeginCast","relevantEvent","saveGcd","_debugLogSavedGcds","forEach","actionId","instant","taxed","casterTaxed","console","log","name","normalizedLength","speedMod","startTime","timeline","addGroup","Group","order","addItem","Item","_getGcdLength","group","src","alt","estimate","statistics","SimpleStatistic","actions","ATTACK","info","gcdInfo","isCasterTaxed","Math","round","cooldown","correctedCooldown","gcdRecast","normaliseWith","normalizedGcd","bound","lengths","math","mean","mode","max","min","getUptime","reduce","carry","duration","downtime","getDowntime","cooldownRatio","GridColumn","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","verticalAlign","widescreen","width","classes","rest","getUnhandledProps","ElementType","getElementType","createElement","handledProps","propTypes","create","GridRow","centered","columns","divided","reversed","Grid","container","doubling","inverted","padded","relaxed","stackable","Column"],"mappings":"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","file":"assets/4.6df952bc.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport math from 'mathjsCustom';\nimport React from 'react';\nimport Module from 'parser/core/Module';\nimport { Group, Item } from './Timeline';\nimport { SimpleStatistic } from './Statistics';\nconst MIN_GCD = 1500;\nconst MAX_GCD = 2500;\nconst BASE_GCD = 2500;\nconst CASTER_TAX = 100;\nconst DEBUG_LOG_SAVED_GCDS = false && process.env.NODE_ENV !== 'production';\n// NOTE: Caster tax refers to spells taking 0.1s longer than their tooltip claims if their cast time is at least as long as their recast time.\n// See https://www.reddit.com/r/ffxiv/comments/8s05rn/the_recast_time_on_your_tooltip_can_be_up_to_85/, specifically:\n//    There is also another issue that influences how long recast times actually take that isn’t as heavily influenced by fps but is still affected,\n//    which is animation delay that happen between casts, this means that if you have a spell with a cast time that is equal to or\n//    greater than the recast time you will end up taking longer between casts than the (re)cast time. The delay is around 100 ms at 100+ fps\nexport default class GlobalCooldown extends Module {\n    constructor(...args) {\n        super(...args);\n        this._castingEvent = null;\n        this._estimatedBaseGcd = null;\n        this._estimateGcdCount = -1;\n        this._lastGcd = {\n            isInstant: false,\n            event: null,\n        };\n        this.gcds = [];\n        this.gcdGroupId = 'gcd';\n        this.addHook('complete', this._onComplete);\n    }\n    // Using normalise so the estimate can be used throughout the parse\n    normalise(events) {\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            // Only care about player GCDs\n            if (!this.parser.byPlayer(event) || !event.ability) {\n                continue;\n            }\n            const action = this.data.getAction(event.ability.guid);\n            if (!action || !action.onGcd) {\n                continue;\n            }\n            // eslint-disable-next-line default-case\n            switch (event.type) {\n                // wowa uses beginchannel for this...? need info for flamethrower/that ast skill/passage of arms\n                case 'begincast':\n                    // Can I check for cancels?\n                    this._castingEvent = event;\n                    break;\n                case 'cast':\n                    const hasBeginCast = this._castingEvent !== null && this._castingEvent.ability.guid === action.id;\n                    const relevantEvent = hasBeginCast ? this._castingEvent : event;\n                    this.saveGcd({ ...this._lastGcd }, relevantEvent.timestamp); // Save last gcd with current timestamp\n                    this._lastGcd.isInstant = !hasBeginCast;\n                    this._lastGcd.event = relevantEvent;\n                    this._castingEvent = null;\n                    break;\n            }\n        }\n        if (events.length) {\n            this.saveGcd({ ...this._lastGcd }, events[events.length - 1].timestamp);\n        }\n        this._debugLogSavedGcds();\n        return events;\n    }\n    _debugLogSavedGcds() {\n        if (!DEBUG_LOG_SAVED_GCDS) {\n            return;\n        }\n        // NOTE: Please sanity-check results when changing normalise or saveGcd. Good test cases include:\n        // - Attributing 1.5s and 2.2s to correct RDM melee gcds\n        // - Sub-0.5s speedmod for BLM fast-casts and correct Instant/CasterTaxed flagging\n        // - Correct timestamp for last event before long gaps (ie: Kefka normal)\n        this.gcds.forEach((gcd) => {\n            const timestamp = this.parser.formatTimestamp(gcd.timestamp);\n            const action = this.data.getAction(gcd.actionId);\n            const instant = gcd.isInstant ? ' Instant' : '';\n            const taxed = gcd.casterTaxed ? ' CasterTaxed' : '';\n            console.log(`${timestamp} ${action.name}[${gcd.length}|${gcd.normalizedLength}] Speedmod[${gcd.speedMod}]${instant}${taxed}`);\n        });\n    }\n    _onComplete() {\n        const startTime = this.parser.fight.start_time;\n        // Timeline output\n        // TODO: Look into adding items to groups? Maybe?\n        this.timeline.addGroup(new Group({\n            id: this.gcdGroupId,\n            content: 'GCD',\n            order: -99,\n        }));\n        this.gcds.forEach(gcd => {\n            const action = this.data.getAction(gcd.actionId);\n            if (!action) {\n                return;\n            }\n            this.timeline.addItem(new Item({\n                type: 'background',\n                start: gcd.timestamp - startTime,\n                length: this._getGcdLength(gcd),\n                title: action.name,\n                group: this.gcdGroupId,\n                content: <img src={action.icon} alt={action.name} title={action.name}/>,\n            }));\n        });\n        // Statistic box\n        const estimate = this.getEstimate(false);\n        this.statistics.add(new SimpleStatistic({\n            title: <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>,\n            icon: this.data.actions.ATTACK.icon,\n            value: this.parser.formatDuration(estimate),\n            info: (<Trans id=\"core.gcd.no-statistics\">\n\t\t\t\t\tUnfortunately, player statistics are not available from FF Logs. As such, the calculated GCD length is an <em>estimate</em>, and may well be incorrect. If it is reporting a GCD length <em>longer</em> than reality, you likely need to focus on keeping your GCD rolling.\n\t\t\t\t</Trans>),\n        }));\n    }\n    //saveGcd(event, isInstant) {\n    saveGcd(gcdInfo, timestamp) {\n        if (!gcdInfo.event) {\n            return;\n        }\n        const action = this.data.getAction(gcdInfo.event.ability.guid);\n        if (!action || !action.id) {\n            return;\n        }\n        let speedMod = this.speedmod.get(gcdInfo.event.timestamp);\n        let castTime = action.castTime;\n        // HACK NOTE TODO: Need to properly account for abilities that alter only the cast or recast of attacks.\n        // Thinking of moving this into a module like speedmod, that can be called with a timestamp to grab modified base castTime/cooldown values\n        const HACK_ASTRAL_UMBRAL_SPEED_SCALAR = 0.5;\n        if (speedMod <= HACK_ASTRAL_UMBRAL_SPEED_SCALAR) {\n            speedMod /= HACK_ASTRAL_UMBRAL_SPEED_SCALAR;\n            castTime *= HACK_ASTRAL_UMBRAL_SPEED_SCALAR;\n        }\n        let isCasterTaxed = false;\n        // GCD is only to two decimal places, so round it there. Storing in Ms.\n        // eslint-disable-next-line no-magic-numbers\n        let gcdLength = Math.round((timestamp - gcdInfo.event.timestamp) / 10) * 10;\n        if (!gcdInfo.isInstant && castTime >= action.cooldown) {\n            gcdLength -= CASTER_TAX;\n            isCasterTaxed = true;\n        }\n        const correctedCooldown = action.gcdRecast != null\n            ? action.gcdRecast\n            : action.cooldown;\n        const normaliseWith = gcdInfo.isInstant || castTime < correctedCooldown\n            ? correctedCooldown\n            : castTime;\n        const normalizedGcd = Math.round(gcdLength\n            * ((BASE_GCD / 1000) / normaliseWith)\n            * (1 / speedMod));\n        this.gcds.push({\n            timestamp: gcdInfo.event.timestamp,\n            length: gcdLength,\n            normalizedLength: normalizedGcd,\n            speedMod,\n            castTime,\n            cooldown: correctedCooldown,\n            casterTaxed: isCasterTaxed,\n            actionId: action.id,\n            isInstant: gcdInfo.isInstant,\n        });\n    }\n    getEstimate(bound = true) {\n        const gcdLength = this.gcds.length;\n        // If we don't have cache, need to recaculate it\n        if (this._estimatedBaseGcd === null || gcdLength !== this._estimateGcdCount) {\n            // Calculate the lengths of the GCD\n            const lengths = this.gcds.map(gcd => gcd.normalizedLength);\n            // Mode seems to get best results. Using mean in case there's multiple modes.\n            this._estimatedBaseGcd = lengths.length ? math.mean(math.mode(lengths)) : MAX_GCD;\n            this._estimateGcdCount = gcdLength;\n        }\n        // Bound the result if requested\n        if (bound) {\n            this._estimatedBaseGcd = Math.max(MIN_GCD, Math.min(MAX_GCD, this._estimatedBaseGcd));\n        }\n        return this._estimatedBaseGcd;\n    }\n    getUptime() {\n        return this.gcds.reduce((carry, gcd) => {\n            const duration = this._getGcdLength(gcd);\n            const downtime = this.downtime.getDowntime(gcd.timestamp, gcd.timestamp + duration);\n            return carry + duration - downtime;\n        }, 0);\n    }\n    _getGcdLength(gcd) {\n        let cooldown = (gcd.isInstant || gcd.castTime <= gcd.cooldown)\n            ? gcd.cooldown\n            : Math.max(gcd.castTime, gcd.cooldown);\n        cooldown *= 1000;\n        // Some actions are lower than or equal to min gcd, only adjust with ratios when they are not\n        if (cooldown > MIN_GCD) {\n            const cooldownRatio = this.getEstimate() / MAX_GCD;\n            cooldown = Math.max(MIN_GCD, cooldown * cooldownRatio * gcd.speedMod);\n        }\n        const duration = Math.round(cooldown + (gcd.casterTaxed ? CASTER_TAX : 0));\n        return duration;\n    }\n}\nGlobalCooldown.handle = 'gcd';\nGlobalCooldown.dependencies = [\n    // We need this to normalise before us\n    'precastAction',\n    'castTime',\n    'data',\n    'downtime',\n    'speedmod',\n    'statistics',\n    'timeline',\n];\nGlobalCooldown.title = t('core.gcd.title') `Global Cooldown`;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: customPropTypes.every([customPropTypes.disallow(['width']), PropTypes.oneOf(SUI.WIDTHS)]),\n\n  /** Represents width of column. */\n  width: customPropTypes.every([customPropTypes.disallow(['computer', 'largeScreen', 'mobile', 'tablet', 'widescreen']), PropTypes.oneOf(SUI.WIDTHS)])\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf([].concat(_toConsumableArray(SUI.WIDTHS), ['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;"],"sourceRoot":""}
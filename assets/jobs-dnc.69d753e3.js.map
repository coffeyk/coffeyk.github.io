{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/components/ui/TimeLineChart.js","webpack:///./src/parser/core/modules/Combos.tsx","webpack:///./node_modules/lodash/findLastIndex.js","webpack:///./src/parser/jobs/dnc/modules/DNCGauges.module.css?081c","webpack:///./src/parser/jobs/dnc/CommonData.tsx","webpack:///./src/parser/jobs/dnc/DISPLAY_ORDER.ts","webpack:///./src/parser/jobs/dnc/modules/DirtyDancing.tsx","webpack:///./src/parser/jobs/dnc/modules/Combos.ts","webpack:///./src/parser/jobs/dnc/modules/Esprit.tsx","webpack:///./src/parser/jobs/dnc/modules/FeatherGauge.tsx","webpack:///./src/parser/jobs/dnc/modules/OGCDDowntime.tsx","webpack:///./src/parser/jobs/dnc/modules/Procs.js","webpack:///./src/parser/jobs/dnc/modules/Technicalities.tsx","webpack:///./src/parser/jobs/dnc/modules/index.ts"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","DEFAULT_OPTIONS","aspectRatio","scales","xAxes","type","time","displayFormats","minute","second","millisecond","tooltipFormat","TimeLineChart","PureComponent","options","width","height","DEFAULT_GCD","GCD_TIMEOUT_MILLIS","ISSUE_TYPENAMES","uncomboed","combobreak","failedcombo","Combos","Module","constructor","super","arguments","lastGcdTime","parser","fight","start_time","currentComboChain","issues","init","addHook","by","onCast","onComplete","lastComboEvent","ability","guid","filter","issue","event","fabricateComboEvent","combo","timestamp","fabricateEvent","recordBrokenCombo","context","isAllowableComboBreak","push","recordUncomboedGcd","recordFailedCombo","checkCombo","lastAction","from","Array","isArray","includes","action","getAction","onGcd","breaksCombo","successfulHit","addJobSpecificSuggestions","comboBreakers","uncomboedGcds","suggestions","add","TieredSuggestion","suggestionIcon","content","tiers","1","SEVERITY","MINOR","2","MEDIUM","4","MAJOR","value","length","why","output","startTime","sort","a","b","completeContext","startEvent","endEvent","startAction","endAction","cooldown","reason","whiteSpace","timeline","show","handle","title","displayOrder","DISPLAY_ORDER","COMBOS","__decorate","dependency","__metadata","Data","prototype","Suggestions","Timeline","baseFindIndex","baseIteratee","toInteger","nativeMax","Math","max","nativeMin","min","module","exports","array","predicate","fromIndex","index","STANDARD_FINISHES","ACTIONS","STANDARD_FINISH","SINGLE_STANDARD_FINISH","DOUBLE_STANDARD_FINISH","TECHNICAL_FINISHES","TECHNICAL_FINISH","SINGLE_TECHNICAL_FINISH","DOUBLE_TECHNICAL_FINISH","TRIPLE_TECHNICAL_FINISH","QUADRUPLE_TECHNICAL_FINISH","FINISHES","DEFAULT_SEVERITY_TIERS","3","5","GAUGE_SEVERITY_TIERS","10","DRIFT_SEVERITY_TIERS","STEPS","STANDARD_STEP","TECHNICAL_STEP","DANCE_MOVES","ENTRECHAT","EMBOITE","JETE","PIROUETTE","EXPECTED_DANCE_MOVE_COUNT","STEP_COOLDOWN_MILLIS","Dance","dancing","resolved","dirty","missed","footloose","actualFinish","expectedFinish","DirtyDancing","danceHistory","missedDances","dirtyDances","footlooseDances","previousUseTimestamp","totalDrift","abilityId","beginDance","continueDance","finishDance","resolveDance","dancesInRange","endTime","dance","addDanceToHistory","newDance","stepId","lastUse","drift","downtime","getDowntime","lastDance","finisher","expectedFinishId","invuln","isInvulnerable","step","getStandardFinishUptimePercent","combatants","getStatusUptime","STATUSES","player","fightDuration","checklist","Rule","name","description","DANCE_PARTNER","requirements","Requirement","percent","driftedStandards","floor","driftedTechnicals","some","error","Message","getNotesIcon","ruleFailed","Icon","className","CheckList","Invulnerability","Combatants","Downtime","CoreCombos","selected","hasStatus","CASCADE","ESPRIT_GENERATION_MULTIPLIERS","REVERSE_CASCADE","FOUNTAIN","FOUNTAINFALL","WINDMILL","RISING_WINDMILL","BLADESHOWER","BLOODSHOWER","SABER_DANCE","ESPRIT_GENERATION_AMOUNT","TICK_FREQUENCY","MAX_IMPROV_TICKS","ESPRIT_RATE_SELF","ESPRIT_RATE_PARTY","MAX_ESPRIT","SABER_DANCE_COST","EspritGauge","potentialOvercap","espritConsumed","avgGenerated","history","t","y","isGenerator","currentEsprit","improvisationStart","onDamage","onConsumeEsprit","IMPROVISATION","startImprov","endImprov","to","onDeath","generatedAmt","Object","keys","getEntities","ESPRIT","CLOSED_POSITION","setEsprit","totalUnderRun","abs","lastSpendIndex","adjustmentPerEvent","generatorEvent","currentTimestamp","diff","ticks","missedSaberDances","dncColor","Color","JOBS","DANCER","colour","datasets","label","steppedLine","backgroundColor","fade","borderColor","styles","helpText","FEATHER_GENERATORS","FEATHER_CONSUMERS","FAN_DANCE","FAN_DANCE_II","FEATHER_GENERATION_CHANCE","MAX_FEATHERS","FeatherGauge","feathersConsumed","currentFeathers","featherOvercap","onCastGenerator","onConsumeFeather","feathersSpentInRange","setFeather","correctFeatherHistory","lastGeneratorIndex","underrun","prevSpenderIndex","slice","j","generationEvent","FAN_DANCE_III","showIcon","OGCDDowntime","CooldownDowntime","trackedCds","cooldowns","DEVILMENT","FLOURISH","PROC_STATUSES","FLOURISHING_FAN_DANCE","FLOURISHING_CASCADE","FLOURISHING_FOUNTAIN","FLOURISHING_SHOWER","FLOURISHING_WINDMILL","Procs","_casts","_removedProcs","_buffWindows","current","_group","_overwrittenProcs","Number","_onCast","_onProcGained","_procOverwritten","_onProcRemoved","_onComplete","Group","order","nestedGroups","addGroup","isDowntime","statusId","tracker","_stopAndSave","droppedFan_Dance","droppedCascade","droppedFountain","droppedShower","droppedProcs","forEach","buff","status","getDataBy","groupId","getGroupIdForStatus","fightStart","end_time","window","addItem","Item","stop","group","src","alt","dependencies","TECHNICAL_SEVERITY_TIERS","WINDOW_STATUSES","FEATHER_THRESHHOLD","POST_WINDOW_GRACE_PERIOD_MILLIS","DEVILMENT_COOLDOWN_MILLIS","TechnicalWindow","gcdCount","usedDevilment","hasDevilment","timelyDevilment","poolingProblem","buffsRemoved","Technicalities","badDevilments","lastDevilmentTimestamp","tryOpenWindow","tryCloseWindow","lastWindow","newWindow","isWindowOkToClose","feathers","previousWindow","feathersBeforeWindow","handleDevilment","trailingGcdEvent","lateDevilments","unpooledWindows","showName","timely","pooled"],"mappings":"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","file":"assets/jobs-dnc.69d753e3.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { Line } from 'react-chartjs-2';\nconst DEFAULT_OPTIONS = {\n    aspectRatio: 3,\n    scales: {\n        xAxes: [{\n                type: 'time',\n                time: {\n                    displayFormats: {\n                        minute: 'm:ss',\n                        second: 'm:ss',\n                        millisecond: 'm:ss.SS',\n                    },\n                    // This tooltip format displays similar to a \"relative\" timestamp,\n                    // since react assumes UNIX epoch timestamps for the data.\n                    tooltipFormat: 'mm:ss.SSS',\n                },\n            }],\n    },\n};\nexport default class TimeLineChart extends PureComponent {\n    render() {\n        const options = _.merge({}, DEFAULT_OPTIONS, this.props.options || {});\n        return <Line data={this.props.data} options={options} \n        // Using this trash 'cus aspectRatio doesn't work with the react wrapper\n        width={options.aspectRatio} height={1}/>;\n    }\n}\nTimeLineChart.propTypes = {\n    data: PropTypes.object.isRequired,\n    options: PropTypes.object,\n};\n","// If you can make it through this entire file without hitting semantic saturation of the word \"combo\", hats off to you. IT DOESN'T LOOK REAL ANYMORE.\nimport { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nconst DEFAULT_GCD = 2.5;\nconst GCD_TIMEOUT_MILLIS = 15000;\nconst ISSUE_TYPENAMES = {\n    uncomboed: <Trans id=\"core.combos.issuetypenames.uncomboed\">Uncomboed</Trans>,\n    combobreak: <Trans id=\"core.combos.issuetypenames.combobreak\">Broken Combo</Trans>,\n    failedcombo: <Trans id=\"core.combos.issuetypenames.failed\">Missed or Invulnerable</Trans>,\n};\nexport default class Combos extends Module {\n    constructor() {\n        super(...arguments);\n        this.lastGcdTime = this.parser.fight.start_time;\n        this.currentComboChain = [];\n        this.issues = [];\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    get lastComboEvent() {\n        return _.last(this.currentComboChain) || null;\n    }\n    get lastAction() {\n        const lastComboEvent = this.lastComboEvent;\n        if (!lastComboEvent) {\n            return null;\n        }\n        return lastComboEvent.ability.guid;\n    }\n    get comboBreakers() {\n        return this.issues\n            .filter(issue => issue.type === 'combobreak')\n            .map(issue => issue.event);\n    }\n    get uncomboedGcds() {\n        return this.issues\n            .filter(issue => issue.type === 'uncomboed')\n            .map(issue => issue.event);\n    }\n    fabricateComboEvent(event) {\n        const combo = {\n            ...event,\n            type: 'combo',\n        };\n        delete combo.timestamp; // Since fabricateEvent adds that in anyway\n        this.parser.fabricateEvent(combo);\n    }\n    recordBrokenCombo(event, context) {\n        if (!this.isAllowableComboBreak(event, context)) {\n            this.issues.push({\n                type: 'combobreak',\n                event,\n                context,\n            });\n        }\n        this.currentComboChain = [];\n    }\n    recordUncomboedGcd(event) {\n        this.issues.push({\n            type: 'uncomboed',\n            event,\n            context: [],\n        });\n        this.currentComboChain = [];\n    }\n    recordFailedCombo(event, context) {\n        this.issues.push({\n            type: 'failedcombo',\n            event,\n            context,\n        });\n        this.currentComboChain = [];\n    }\n    /**\n     *\n     * @param combo\n     * @param event\n     * @return true if combo, false otherwise\n     */\n    checkCombo(combo /* Should be an Action type */, event) {\n        // Not in a combo\n        if (this.lastAction == null) {\n            // Combo starter, we good\n            if (combo.start) {\n                this.fabricateComboEvent(event);\n                return true;\n            }\n            // Combo action that isn't a starter, that's a paddlin'\n            if (combo.from) {\n                this.recordUncomboedGcd(event);\n                return false;\n            }\n        }\n        if (combo.start) {\n            // Broken combo - starting a new combo while in a current combo\n            this.recordBrokenCombo(event, this.currentComboChain);\n            return true; // Start a new combo\n        }\n        // Check if action continues existing combo\n        if (combo.from) {\n            const fromOptions = Array.isArray(combo.from) ? combo.from : [combo.from];\n            if (fromOptions.includes(this.lastAction)) {\n                // Combo continued correctly\n                this.fabricateComboEvent(event);\n                // If it's a finisher, reset the combo\n                return !combo.end;\n            }\n        }\n        // Action did not continue combo correctly and is not a new combo starter\n        this.recordBrokenCombo(event, this.currentComboChain);\n        return false;\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action) {\n            return;\n        }\n        // Only track GCDs that either progress or break combos so actions like Drill and Shadow Fang don't falsely extend the simulated combo timer\n        if (action.onGcd && (action.combo || action.breaksCombo)) {\n            if (event.timestamp - this.lastGcdTime > GCD_TIMEOUT_MILLIS) {\n                // If we've had enough downtime between GCDs to let the combo expire, reset the state so we don't count erroneous combo breaks\n                this.currentComboChain = [];\n            }\n            this.lastGcdTime = event.timestamp;\n        }\n        // If it's a combo action, run it through the combo checking logic\n        if (action.combo) {\n            if (!event.successfulHit) {\n                // Failed attacks break combo\n                this.recordFailedCombo(event, this.currentComboChain);\n                return;\n            }\n            const continueCombo = this.checkCombo(action.combo, event);\n            if (continueCombo) {\n                this.currentComboChain.push(event);\n            }\n            else {\n                this.currentComboChain = [];\n            }\n        }\n        if (action.breaksCombo && this.lastAction !== null) {\n            // Combo breaking action, that's a paddlin'\n            this.recordBrokenCombo(event, this.currentComboChain);\n        }\n    }\n    onComplete() {\n        if (this.addJobSpecificSuggestions(this.comboBreakers, this.uncomboedGcds)) {\n            return;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.constructor.suggestionIcon,\n            content: <Trans id=\"core.combos.content\">\n\t\t\t\t<p>Avoid breaking combos, as failing to complete combos costs you a significant amount of DPS and important secondary effects.</p>\n\t\t\t\t<p>Using a combo GCD at the wrong combo step, using non-combo GCDs while inside a combo, missing, or attacking a target that is invulnerable will cause your combo to break.</p>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.issues.length,\n            why: <Plural id=\"core.combos.why\" value={this.issues.length} one=\"You misused # combo action.\" other=\"You misused # combo actions.\"/>,\n        }));\n    }\n    /**\n     * To be overridden by subclasses. This is called in _onComplete() and passed two arrays of event objects - one for events that\n     * broke combos, and one for combo GCDs used outside of combos. Subclassing modules can add job-specific suggestions based on\n     * what particular actions were misused and when in the fight.\n     * The overriding module should return true if the default suggestion is not wanted\n     */\n    addJobSpecificSuggestions(comboBreakers, uncomboedGcds) {\n        return false;\n    }\n    /**\n     * To be overridden by subclasses. This is called in recordBrokenCombo, and receives the event triggering the broken combo,\n     * and the context information for that break. Jobs can override this to indicate whether this broken combo is allowed. If so,\n     * the event and context will not be recorded, and the current combo will be cleared with no other side effects.\n     * Returning false will allow the break to be recorded, and displayed to the user\n     */\n    isAllowableComboBreak(event, context) {\n        return false;\n    }\n    output() {\n        if (this.issues.length <= 0) {\n            return false;\n        }\n        // Access Alias\n        const startTime = this.parser.fight.start_time;\n        const data = this.issues\n            .sort((a, b) => a.event.timestamp - b.event.timestamp)\n            .map(issue => {\n            const completeContext = [...(issue.context || []), issue.event];\n            const startEvent = _.first(completeContext);\n            const endEvent = _.last(completeContext);\n            const startAction = this.data.getAction(startEvent.ability.guid);\n            const endAction = this.data.getAction(endEvent.ability.guid);\n            return ({\n                start: startEvent.timestamp - startTime + (startAction?.cooldown ?? DEFAULT_GCD),\n                end: endEvent.timestamp - startTime + (endAction?.cooldown ?? DEFAULT_GCD),\n                rotation: completeContext,\n                notesMap: {\n                    reason: <span style={{ whiteSpace: 'nowrap' }}>{ISSUE_TYPENAMES[issue.type]}</span>,\n                },\n            });\n        });\n        return <RotationTable notes={[\n            {\n                header: <Trans id=\"core.combos.rotationtable.header.reason\">Reason</Trans>,\n                accessor: 'reason',\n            },\n        ]} data={data} onGoto={this.timeline.show}/>;\n    }\n}\nCombos.handle = 'combos';\nCombos.title = t('core.combos.title') `Combo Issues`;\nCombos.displayOrder = DISPLAY_ORDER.COMBOS;\n// This should be redefined by subclassing modules; the default is the basic 'Attack' icon\nCombos.suggestionIcon = 'https://xivapi.com/i/000000/000405.png';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], Combos.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Combos.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Combos.prototype, \"timeline\", void 0);\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * This method is like `_.findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @static\n * @memberOf _\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ];\n *\n * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });\n * // => 2\n *\n * // The `_.matches` iteratee shorthand.\n * _.findLastIndex(users, { 'user': 'barney', 'active': true });\n * // => 0\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findLastIndex(users, ['active', false]);\n * // => 2\n *\n * // The `_.property` iteratee shorthand.\n * _.findLastIndex(users, 'active');\n * // => 0\n */\nfunction findLastIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = length - 1;\n  if (fromIndex !== undefined) {\n    index = toInteger(fromIndex);\n    index = fromIndex < 0\n      ? nativeMax(length + index, 0)\n      : nativeMin(index, length - 1);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index, true);\n}\n\nmodule.exports = findLastIndex;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"helpText\":\"DNCGauges-module_helpText__2RXQg\"};","import ACTIONS from 'data/ACTIONS';\nimport { SEVERITY } from 'parser/core/modules/Suggestions';\nexport const STANDARD_FINISHES = [\n    ACTIONS.STANDARD_FINISH.id,\n    ACTIONS.SINGLE_STANDARD_FINISH.id,\n    ACTIONS.DOUBLE_STANDARD_FINISH.id,\n];\nexport const TECHNICAL_FINISHES = [\n    ACTIONS.TECHNICAL_FINISH.id,\n    ACTIONS.SINGLE_TECHNICAL_FINISH.id,\n    ACTIONS.DOUBLE_TECHNICAL_FINISH.id,\n    ACTIONS.TRIPLE_TECHNICAL_FINISH.id,\n    ACTIONS.QUADRUPLE_TECHNICAL_FINISH.id,\n];\nexport const FINISHES = [\n    ...STANDARD_FINISHES,\n    ...TECHNICAL_FINISHES,\n];\nexport const DEFAULT_SEVERITY_TIERS = {\n    1: SEVERITY.MINOR,\n    3: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\n// More lenient than usual due to the probable unreliability of the data.\nexport const GAUGE_SEVERITY_TIERS = {\n    1: SEVERITY.MINOR,\n    5: SEVERITY.MEDIUM,\n    10: SEVERITY.MAJOR,\n};\n","export default {\n    DIRTY_DANCING: 1,\n    TECHNICALITIES: 2,\n    ESPRIT: 3,\n    FEATHERS: 4,\n};\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { Icon, Message } from 'semantic-ui-react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport CheckList, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Downtime from 'parser/core/modules/Downtime';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport { DEFAULT_SEVERITY_TIERS, FINISHES, STANDARD_FINISHES, TECHNICAL_FINISHES } from '../CommonData';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\n// Slightly different than normal severity. Start at minor in case it's just a math error, but upgrade\n// Severity with every additional calculated drift since it's a more important issue than others\nconst DRIFT_SEVERITY_TIERS = {\n    1: SEVERITY.MINOR,\n    2: SEVERITY.MEDIUM,\n    3: SEVERITY.MAJOR,\n};\nconst STEPS = [\n    ACTIONS.STANDARD_STEP.id,\n    ACTIONS.TECHNICAL_STEP.id,\n];\nconst DANCE_MOVES = [\n    ACTIONS.ENTRECHAT.id,\n    ACTIONS.EMBOITE.id,\n    ACTIONS.JETE.id,\n    ACTIONS.PIROUETTE.id,\n];\nconst EXPECTED_DANCE_MOVE_COUNT = {\n    [ACTIONS.DOUBLE_STANDARD_FINISH.id]: 2,\n    [ACTIONS.QUADRUPLE_TECHNICAL_FINISH.id]: 4,\n    [-1]: 0,\n};\nconst STEP_COOLDOWN_MILLIS = {\n    [ACTIONS.STANDARD_STEP.id]: ACTIONS.STANDARD_STEP.cooldown * 1000,\n    [ACTIONS.TECHNICAL_STEP.id]: ACTIONS.TECHNICAL_STEP.cooldown * 1000,\n};\nclass Dance {\n    constructor(start) {\n        this.rotation = [];\n        this.dancing = false;\n        this.resolved = false;\n        this.dirty = false;\n        this.missed = false;\n        this.footloose = false;\n        this.start = start;\n        this.dancing = true;\n    }\n    get error() {\n        return this.dirty || this.missed || this.footloose;\n    }\n    get expectedFinishId() {\n        const actualFinish = _.last(this.rotation);\n        let expectedFinish = -1;\n        if (actualFinish) {\n            if (TECHNICAL_FINISHES.includes(actualFinish.ability.guid)) {\n                expectedFinish = ACTIONS.QUADRUPLE_TECHNICAL_FINISH.id;\n            }\n            else if (STANDARD_FINISHES.includes(actualFinish.ability.guid)) {\n                expectedFinish = ACTIONS.DOUBLE_STANDARD_FINISH.id;\n            }\n        }\n        return expectedFinish;\n    }\n}\nexport default class DirtyDancing extends Module {\n    constructor() {\n        super(...arguments);\n        this.danceHistory = [];\n        this.missedDances = 0;\n        this.dirtyDances = 0;\n        this.footlooseDances = 0;\n        this.previousUseTimestamp = {\n            [ACTIONS.STANDARD_STEP.id]: this.parser.fight.start_time,\n            [ACTIONS.TECHNICAL_STEP.id]: this.parser.fight.start_time,\n        };\n        this.totalDrift = {\n            [ACTIONS.STANDARD_STEP.id]: 0,\n            [ACTIONS.TECHNICAL_STEP.id]: 0,\n        };\n    }\n    init() {\n        this.addHook('cast', { by: 'player', abilityId: STEPS }, this.beginDance);\n        this.addHook('cast', { by: 'player' }, this.continueDance);\n        this.addHook('cast', { by: 'player', abilityId: FINISHES }, this.finishDance);\n        this.addHook('aoedamage', { by: 'player', abilityId: FINISHES }, this.resolveDance);\n        this.addHook('complete', this.onComplete);\n    }\n    dancesInRange(startTime, endTime) {\n        return this.danceHistory.filter(dance => dance.start >= startTime && dance.start <= endTime).length;\n    }\n    addDanceToHistory(event) {\n        const newDance = new Dance(event.timestamp);\n        newDance.rotation.push(event);\n        this.danceHistory.push(newDance);\n        const stepId = event.ability.guid;\n        if (this.previousUseTimestamp[stepId]) {\n            const lastUse = this.previousUseTimestamp[stepId];\n            const drift = Math.max(0, event.timestamp - lastUse - STEP_COOLDOWN_MILLIS[stepId] - this.downtime.getDowntime(lastUse, event.timestamp));\n            this.totalDrift[stepId] += drift;\n            this.previousUseTimestamp[stepId] = event.timestamp;\n        }\n        return newDance;\n    }\n    beginDance(event) {\n        this.addDanceToHistory(event);\n    }\n    get lastDance() {\n        return _.last(this.danceHistory);\n    }\n    continueDance(event) {\n        // Bail if beginDance or finishDance should be handling this event\n        if (STEPS.includes(event.ability.guid) || FINISHES.includes(event.ability.guid)) {\n            return;\n        }\n        const dance = this.lastDance;\n        if (dance && dance.dancing) {\n            dance.rotation.push(event);\n        }\n    }\n    finishDance(event) {\n        let dance = this.lastDance;\n        if (dance && dance.dancing) {\n            dance.rotation.push(event);\n        }\n        else {\n            dance = this.addDanceToHistory(event);\n        }\n        dance.dancing = false;\n    }\n    resolveDance(event) {\n        const dance = this.lastDance;\n        if (!dance || dance.resolved) {\n            return;\n        }\n        const finisher = dance.rotation[dance.rotation.length - 1];\n        dance.end = finisher.timestamp;\n        // Count dance as dirty if we didn't get the expected finisher\n        if (finisher.ability.guid !== dance.expectedFinishId) {\n            dance.dirty = true;\n        }\n        // If the finisher didn't hit anything, and something could've been, ding it.\n        // Don't gripe if the boss is invuln, there is use-case for finishing during the downtime\n        if (!event.successfulHit && !this.invuln.isInvulnerable('all', finisher.timestamp)) {\n            dance.missed = true;\n        }\n        // Dancer messed up if more step actions were recorded than we expected\n        const actualCount = dance.rotation.filter(step => DANCE_MOVES.includes(step.ability.guid)).length;\n        const expectedCount = EXPECTED_DANCE_MOVE_COUNT[dance.expectedFinishId];\n        // Only ding if the step count is greater than expected, we're not going to catch the steps in the opener dance\n        if (actualCount > expectedCount) {\n            dance.footloose = true;\n        }\n        dance.resolved = true;\n    }\n    getStandardFinishUptimePercent() {\n        // Exclude downtime from both the status time and expected uptime\n        const statusTime = this.combatants.getStatusUptime(STATUSES.STANDARD_FINISH.id, this.parser.player.id) - this.downtime.getDowntime();\n        const uptime = this.parser.fightDuration - this.downtime.getDowntime();\n        return (statusTime / uptime) * 100;\n    }\n    onComplete() {\n        this.missedDances = this.danceHistory.filter(dance => dance.missed).length;\n        this.dirtyDances = this.danceHistory.filter(dance => dance.dirty).length;\n        this.footlooseDances = this.danceHistory.filter(dance => dance.footloose).length;\n        // Suggest to move closer for finishers.\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.TECHNICAL_FINISH.icon,\n            content: <Trans id=\"dnc.dirty-dancing.suggestions.missed-finishers.content\">\n\t\t\t\t<ActionLink {...ACTIONS.TECHNICAL_FINISH}/> and <ActionLink {...ACTIONS.STANDARD_FINISH}/> are a significant source of damage. Make sure you're in range when finishing a dance.\n\t\t\t</Trans>,\n            tiers: DEFAULT_SEVERITY_TIERS,\n            value: this.missedDances,\n            why: <Trans id=\"dnc.dirty-dancing.suggestions.missed-finishers.why\">\n\t\t\t\t<Plural value={this.missedDances} one=\"# finish\" other=\"# finishes\"/> missed.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to get all expected finishers\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.STANDARD_FINISH.icon,\n            content: <Trans id=\"dnc.dirty-dancing.suggestions.dirty-dances.content\">\n\t\t\t\tPerforming fewer steps than expected reduces the damage of your finishes. Make sure you perform the expected number of steps.\n\t\t\t</Trans>,\n            tiers: DEFAULT_SEVERITY_TIERS,\n            value: this.dirtyDances,\n            why: <Trans id=\"dnc.dirty-dancing.suggestions.dirty-dances.why\">\n\t\t\t\t<Plural value={this.dirtyDances} one=\"# dance\" other=\"# dances\"/> finished with missing steps.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to not faff about with steps\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.EMBOITE.icon,\n            content: <Trans id=\"dnc.dirty-dancing.suggestions.footloose.content\">\n\t\t\t\tPerforming the wrong steps makes your dance take longer and leads to a loss of DPS uptime. Make sure to perform your dances correctly.\n\t\t\t</Trans>,\n            tiers: DEFAULT_SEVERITY_TIERS,\n            value: this.footlooseDances,\n            why: <Trans id=\"dnc.dirty-dancing.suggestions.footloose.why\">\n\t\t\t\t<Plural value={this.footlooseDances} one=\"# dance\" other=\"# dances\"/> finished with extra steps.\n\t\t\t</Trans>,\n        }));\n        this.checklist.add(new Rule({\n            name: <Trans id=\"dnc.dirty-dancing.checklist.standard-finish-buff.name\">Keep your <StatusLink {...STATUSES.STANDARD_FINISH}/> buff up</Trans>,\n            description: <Trans id=\"dnc.dirty-dancing.checklist.standard-finish-buff.description\">\n\t\t\t\tYour <StatusLink {...STATUSES.STANDARD_FINISH}/> buff contributes significantly to your overall damage, and the damage of your <StatusLink {...STATUSES.DANCE_PARTNER}/> as well. Make sure to keep it up at all times.\n\t\t\t</Trans>,\n            target: 95,\n            requirements: [\n                new Requirement({\n                    name: <Fragment><StatusLink {...STATUSES.STANDARD_FINISH}/> uptime</Fragment>,\n                    percent: () => this.getStandardFinishUptimePercent(),\n                }),\n            ],\n        }));\n        const driftedStandards = Math.floor(this.totalDrift[ACTIONS.STANDARD_STEP.id] / STEP_COOLDOWN_MILLIS[ACTIONS.STANDARD_STEP.id]);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.STANDARD_STEP.icon,\n            content: <Trans id=\"dnc.dirty-dancing.suggestions.standard-drift.content\">You may have lost a use of <ActionLink {...ACTIONS.STANDARD_STEP}/> by letting the cooldown drift. Try to keep it on cooldown, even if it means letting your GCD sit for a second.\n\t\t\t</Trans>,\n            tiers: DRIFT_SEVERITY_TIERS,\n            value: driftedStandards,\n            why: <Trans id=\"dnc.dirty-dancing.suggestions.standard-drift.why\">\n\t\t\t\t<Plural value={driftedStandards} one=\"# Stanard Step was\" other=\"# Standard Steps were\"/> lost due to drift.\n\t\t\t</Trans>,\n        }));\n        const driftedTechnicals = Math.floor(this.totalDrift[ACTIONS.TECHNICAL_STEP.id] / STEP_COOLDOWN_MILLIS[ACTIONS.TECHNICAL_STEP.id]);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.TECHNICAL_STEP.icon,\n            content: <Trans id=\"dnc.dirty-dancing.suggestions.technical-drift.content\">You may have lost a use of <ActionLink {...ACTIONS.TECHNICAL_STEP}/> by letting the cooldown drift. Try to keep it on cooldown, even if it means letting your GCD sit for a second.\n\t\t\t</Trans>,\n            tiers: DRIFT_SEVERITY_TIERS,\n            value: driftedTechnicals,\n            why: <Trans id=\"dnc.dirty-dancing.suggestions.technical-drift.why\">\n\t\t\t\t<Plural value={driftedTechnicals} one=\"# Technical Step was\" other=\"# Technical Steps were\"/> lost due to drift.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        if (this.danceHistory.some(dance => dance.error)) {\n            return <Fragment>\n\t\t\t\t<Message>\n\t\t\t\t\t<Trans id=\"dnc.dirty-dancing.rotation-table.message\">\n\t\t\t\t\t\tOne of Dancer's primary responsibilities is buffing the party's damage via dances.<br />\n\t\t\t\t\t\tEach dance also contributes to the Dancer's own damage and should be performed correctly.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Message>\n\t\t\t\t<RotationTable notes={[\n                {\n                    header: <Trans id=\"dnc.dirty-dancing.rotation-table.header.missed\">Hit Target</Trans>,\n                    accessor: 'missed',\n                },\n                {\n                    header: <Trans id=\"dnc.dirty-dancing.rotation-table.header.dirty\">Correct Finish</Trans>,\n                    accessor: 'dirty',\n                },\n                {\n                    header: <Trans id=\"dnc.dirty-dancing.rotation-table.header.footloose\">No Extra Moves</Trans>,\n                    accessor: 'footloose',\n                },\n            ]} data={this.danceHistory.filter(dance => dance.error).map(dance => {\n                return ({\n                    start: dance.start - this.parser.fight.start_time,\n                    end: dance.end != null ?\n                        dance.end - this.parser.fight.start_time :\n                        dance.start - this.parser.fight.start_time,\n                    notesMap: {\n                        missed: <>{this.getNotesIcon(dance.missed)}</>,\n                        dirty: <>{this.getNotesIcon(dance.dirty)}</>,\n                        footloose: <>{this.getNotesIcon(dance.footloose)}</>,\n                    },\n                    rotation: dance.rotation,\n                });\n            })} onGoto={this.timeline.show}/>\n\t\t\t</Fragment>;\n        }\n    }\n    getNotesIcon(ruleFailed) {\n        return <Icon name={ruleFailed ? 'remove' : 'checkmark'} className={ruleFailed ? 'text-error' : 'text-success'}/>;\n    }\n}\nDirtyDancing.handle = 'dirtydancing';\nDirtyDancing.title = t('dnc.dirty-dancing.title') `Dance Issues`;\nDirtyDancing.displayOrder = DISPLAY_ORDER.DIRTY_DANCING;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", CheckList)\n], DirtyDancing.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], DirtyDancing.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability)\n], DirtyDancing.prototype, \"invuln\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], DirtyDancing.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], DirtyDancing.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Downtime)\n], DirtyDancing.prototype, \"downtime\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport CoreCombos from 'parser/core/modules/Combos';\nimport DirtyDancing from './DirtyDancing';\nconst GCD_TIMEOUT_MILLIS = 15000;\nexport default class Combos extends CoreCombos {\n    // Override check for allowable breaks. If two dances were started during the initial context's GCD timeout window,\n    // (ie, both Standard and Technical were danced), then we'll allow it\n    isAllowableComboBreak(event, context) {\n        // Shouldn't ever be the case, but protect against weird shit\n        if (context.length !== 1) {\n            return false;\n        }\n        // If you broke the combo by restarting it when you still had one open, cut it out\n        if (event.timestamp < context[0].timestamp + GCD_TIMEOUT_MILLIS) {\n            return false;\n        }\n        // Technical windows could also go Tech -> Saber -> Fountainfall -> Saber -> Standard -> Fountain drops,\n        // so just disable any drops that happened in a Technical window (still need the dances in range check since\n        // Cascade -> Standard -> Technical leaves the buff falling off before Technical Finish buff applies\n        return this.dancing.dancesInRange(context[0].timestamp, context[0].timestamp + GCD_TIMEOUT_MILLIS) === 2 ||\n            this.combatants.selected.hasStatus(STATUSES.TECHNICAL_FINISH.id, context[0].timestamp + GCD_TIMEOUT_MILLIS);\n    }\n}\n// Override statics\nCombos.suggestionIcon = ACTIONS.CASCADE.icon;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", DirtyDancing)\n], Combos.prototype, \"dancing\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants\n    // Override check for allowable breaks. If two dances were started during the initial context's GCD timeout window,\n    // (ie, both Standard and Technical were danced), then we'll allow it\n    )\n], Combos.prototype, \"combatants\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport Color from 'color';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport TimeLineChart from 'components/ui/TimeLineChart';\nimport ACTIONS from 'data/ACTIONS';\nimport JOBS from 'data/JOBS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Suggestions, { TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport { FINISHES, GAUGE_SEVERITY_TIERS } from '../CommonData';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nimport styles from './DNCGauges.module.css';\n// Dances take more than a GCD to apply, during which time party members will be generating esprit for you\n// We'll need to multiply the amount generated by the VERY rough-estimate of how many GCDs passed while you were dancing\nconst ESPRIT_GENERATION_MULTIPLIERS = {\n    [ACTIONS.CASCADE.id]: 1,\n    [ACTIONS.REVERSE_CASCADE.id]: 1,\n    [ACTIONS.FOUNTAIN.id]: 1,\n    [ACTIONS.FOUNTAINFALL.id]: 1,\n    [ACTIONS.WINDMILL.id]: 1,\n    [ACTIONS.RISING_WINDMILL.id]: 1,\n    [ACTIONS.BLADESHOWER.id]: 1,\n    [ACTIONS.BLOODSHOWER.id]: 1,\n    [ACTIONS.SABER_DANCE.id]: 1,\n    [ACTIONS.STANDARD_FINISH.id]: 2,\n    [ACTIONS.SINGLE_STANDARD_FINISH.id]: 2,\n    [ACTIONS.DOUBLE_STANDARD_FINISH.id]: 2,\n    [ACTIONS.TECHNICAL_FINISH.id]: 3,\n    [ACTIONS.SINGLE_TECHNICAL_FINISH.id]: 3,\n    [ACTIONS.DOUBLE_TECHNICAL_FINISH.id]: 3,\n    [ACTIONS.TRIPLE_TECHNICAL_FINISH.id]: 3,\n    [ACTIONS.QUADRUPLE_TECHNICAL_FINISH.id]: 3,\n};\nconst ESPRIT_GENERATION_AMOUNT = 10;\nconst TICK_FREQUENCY = 3000;\nconst MAX_IMPROV_TICKS = 5;\nconst ESPRIT_RATE_SELF = 0.25;\nconst ESPRIT_RATE_PARTY = 0.2;\nconst MAX_ESPRIT = 100;\nconst SABER_DANCE_COST = 50;\nexport default class EspritGauge extends Module {\n    constructor() {\n        super(...arguments);\n        this.potentialOvercap = 0;\n        this.espritConsumed = 0;\n        this.avgGenerated = 0;\n        this.history = [{ t: 0, y: 0, isGenerator: false }];\n        this.currentEsprit = 0;\n        this.improvisationStart = 0;\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onDamage);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.SABER_DANCE.id }, this.onConsumeEsprit);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.IMPROVISATION.id }, this.startImprov);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.IMPROVISATION.id }, this.endImprov);\n        this.addHook('death', { to: 'player' }, this.onDeath);\n        this.addHook('complete', this.onComplete);\n    }\n    onDamage(event) {\n        if (!ESPRIT_GENERATION_MULTIPLIERS[event.ability.guid] || !event.successfulHit) {\n            return;\n        }\n        let generatedAmt = 0;\n        if (this.combatants.selected.hasStatus(STATUSES.TECHNICAL_FINISH.id)) {\n            generatedAmt += ESPRIT_GENERATION_MULTIPLIERS[event.ability.guid] * ESPRIT_GENERATION_AMOUNT * ESPRIT_RATE_PARTY * (Object.keys(this.combatants.getEntities()).length - 1);\n            // Finishes aren't a weaponskill, so they don't generate esprit\n            if (!FINISHES[event.ability.guid]) {\n                generatedAmt += ESPRIT_GENERATION_MULTIPLIERS[event.ability.guid] * ESPRIT_GENERATION_AMOUNT * ESPRIT_RATE_SELF;\n            }\n        }\n        else if (this.combatants.selected.hasStatus(STATUSES.ESPRIT.id)) {\n            generatedAmt += ESPRIT_GENERATION_MULTIPLIERS[event.ability.guid] * ESPRIT_GENERATION_AMOUNT * ESPRIT_RATE_SELF;\n            if (this.combatants.selected.hasStatus(STATUSES.CLOSED_POSITION.id)) {\n                generatedAmt += ESPRIT_GENERATION_MULTIPLIERS[event.ability.guid] * ESPRIT_GENERATION_AMOUNT * ESPRIT_RATE_PARTY;\n            }\n        }\n        this.avgGenerated += generatedAmt;\n        if (generatedAmt > 0) {\n            this.setEsprit(this.currentEsprit + generatedAmt, true);\n        }\n    }\n    onConsumeEsprit() {\n        this.espritConsumed++;\n        // If we're using more esprit than we think we have, go back to the previous spender event and add some\n        // more esprit to the intervening generation events so the graph looks more correct\n        if (this.currentEsprit < SABER_DANCE_COST) {\n            const totalUnderRun = Math.abs(this.currentEsprit - SABER_DANCE_COST);\n            const lastSpendIndex = _.findLastIndex(this.history, event => !event.isGenerator);\n            const adjustmentPerEvent = totalUnderRun / (this.history.length - (lastSpendIndex + 1));\n            for (let i = lastSpendIndex + 1; i < this.history.length; i++) {\n                this.history[i].y = this.history[i].y + adjustmentPerEvent * (i - lastSpendIndex);\n            }\n        }\n        this.setEsprit(this.currentEsprit - SABER_DANCE_COST);\n    }\n    onDeath() {\n        this.setEsprit(0);\n    }\n    setEsprit(value, generatorEvent = false) {\n        this.currentEsprit = _.clamp(value, 0, MAX_ESPRIT);\n        this.potentialOvercap += Math.max(0, value - this.currentEsprit);\n        const t = this.parser.currentTimestamp - this.parser.fight.start_time;\n        this.history.push({ t, y: this.currentEsprit, isGenerator: generatorEvent });\n    }\n    startImprov(event) {\n        this.improvisationStart = event.timestamp;\n    }\n    endImprov(event) {\n        const diff = event.timestamp - this.improvisationStart;\n        // Ticks could occur at any point in the duration (server tick) - always give at least one tick so we don't under-guess\n        const ticks = Math.min(Math.max(1, Math.floor(diff / TICK_FREQUENCY)), MAX_IMPROV_TICKS);\n        // Choosing to assume in this case that everyone is in range so you get the maximum amount of Esprit per tic\n        this.setEsprit(this.currentEsprit + ticks * ESPRIT_GENERATION_AMOUNT, true);\n    }\n    onComplete() {\n        const missedSaberDances = Math.floor(this.potentialOvercap / SABER_DANCE_COST);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SABER_DANCE.icon,\n            content: <Trans id=\"dnc.esprit.suggestions.overcapped-esprit.content\">\n\t\t\t\tYou may have lost uses of <ActionLink {...ACTIONS.SABER_DANCE}/> due to overcapping your Esprit gauge. Make sure you use it, especially if your gauge is above 80.\n\t\t\t</Trans>,\n            tiers: GAUGE_SEVERITY_TIERS,\n            value: missedSaberDances,\n            why: <Trans id=\"dnc.esprit.suggestions.overcapped-esprit.why\">\n\t\t\t\t<Plural value={missedSaberDances} one=\"# Saber Dance\" other=\"# Saber Dances\"/> may have been missed.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        const dncColor = Color(JOBS.DANCER.colour);\n        // tslint:disable:no-magic-numbers\n        const data = {\n            datasets: [{\n                    label: 'Esprit',\n                    data: this.history,\n                    steppedLine: true,\n                    backgroundColor: dncColor.fade(0.8),\n                    borderColor: dncColor.fade(0.5),\n                }],\n        };\n        // tslint:enable:no-magic-numbers\n        return <Fragment>\n\t\t\t<span className={styles.helpText}>\n\t\t\t\t<Trans id=\"dnc.esprit-gauge.graph.help-text\">This graph is a rough estimate of your esprit gauge, at best. Take it with a hefty grain of salt.</Trans>\n\t\t\t</span>\n\t\t\t<TimeLineChart data={data}/>\n\t\t</Fragment>;\n    }\n}\nEspritGauge.handle = 'espritgauge';\nEspritGauge.title = t('dnc.esprit-gauge.title') `Esprit Gauge`;\nEspritGauge.displayOrder = DISPLAY_ORDER.ESPRIT;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], EspritGauge.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], EspritGauge.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport Color from 'color';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport TimeLineChart from 'components/ui/TimeLineChart';\nimport ACTIONS from 'data/ACTIONS';\nimport JOBS from 'data/JOBS';\nimport Module, { dependency } from 'parser/core/Module';\nimport Suggestions, { TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport { GAUGE_SEVERITY_TIERS } from '../CommonData';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nimport styles from './DNCGauges.module.css';\nconst FEATHER_GENERATORS = [\n    ACTIONS.REVERSE_CASCADE.id,\n    ACTIONS.FOUNTAINFALL.id,\n    ACTIONS.RISING_WINDMILL.id,\n    ACTIONS.BLOODSHOWER.id,\n];\nconst FEATHER_CONSUMERS = [\n    ACTIONS.FAN_DANCE.id,\n    ACTIONS.FAN_DANCE_II.id,\n];\nconst FEATHER_GENERATION_CHANCE = .5;\nconst MAX_FEATHERS = 4;\nexport default class FeatherGauge extends Module {\n    constructor() {\n        super(...arguments);\n        this.feathersConsumed = 0;\n        this.avgGenerated = 0;\n        this.history = [{ t: 0, y: 0, isGenerator: false }];\n        this.currentFeathers = 0;\n        this.featherOvercap = 0;\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player', abilityId: FEATHER_GENERATORS }, this.onCastGenerator);\n        this.addHook('cast', { by: 'player', abilityId: FEATHER_CONSUMERS }, this.onConsumeFeather);\n        this.addHook('death', { to: 'player' }, this.onDeath);\n        this.addHook('complete', this.onComplete);\n    }\n    feathersSpentInRange(start, end) {\n        if (start > end) {\n            return -1;\n        }\n        return this.history.filter(event => event.t >= start - this.parser.fight.start_time && event.t <= end - this.parser.fight.start_time && !event.isGenerator).length;\n    }\n    onCastGenerator(event) {\n        if (!event.successfulHit) {\n            return;\n        }\n        this.avgGenerated += FEATHER_GENERATION_CHANCE;\n        this.setFeather(this.currentFeathers + FEATHER_GENERATION_CHANCE, true);\n    }\n    onConsumeFeather() {\n        this.feathersConsumed++;\n        // If we consumed a feather when we think we don't have one, clearly we do, so update the history to reflect that\n        if (this.currentFeathers < 1) {\n            this.correctFeatherHistory();\n        }\n        this.setFeather(this.currentFeathers - 1);\n    }\n    correctFeatherHistory() {\n        // Add the underrun amount to all events back to the previous spender so the graph shows we had enough to spend\n        let lastGeneratorIndex = _.findLastIndex(this.history, event => event.isGenerator);\n        lastGeneratorIndex = lastGeneratorIndex === -1 ? 0 : lastGeneratorIndex;\n        const underrun = 1 - this.currentFeathers;\n        for (let i = lastGeneratorIndex; i < this.history.length; i++) {\n            this.history[i].y += underrun;\n        }\n        // If there's nothing before the last generator, we don't need to smooth anything\n        if (lastGeneratorIndex === 0) {\n            return;\n        }\n        // Find the last spender event prior to the generator event found above and linearly smooth the graph between the two events\n        const prevSpenderIndex = _.findLastIndex(this.history.slice(0, lastGeneratorIndex), event => !event.isGenerator);\n        const adjustmentPerEvent = underrun / (lastGeneratorIndex - prevSpenderIndex);\n        for (let j = prevSpenderIndex + 1; j < lastGeneratorIndex; j++) {\n            this.history[j].y = this.history[j].y + adjustmentPerEvent * (j - prevSpenderIndex);\n        }\n    }\n    onDeath() {\n        this.setFeather(0);\n    }\n    setFeather(value, generationEvent = false) {\n        this.currentFeathers = _.clamp(value, 0, MAX_FEATHERS);\n        const t = this.parser.currentTimestamp - this.parser.fight.start_time;\n        this.history.push({ t, y: this.currentFeathers, isGenerator: generationEvent });\n        this.featherOvercap += Math.max(0, value - this.currentFeathers);\n    }\n    onComplete() {\n        this.featherOvercap = Math.floor(this.featherOvercap);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FAN_DANCE_III.icon,\n            content: <Trans id=\"dnc.feather-gauge.suggestions.overcapped-feathers.content\">\n\t\t\t\tYou may have lost uses of your <ActionLink {...ACTIONS.FAN_DANCE}/>s due to using one of your procs while already holding four feathers. Make sure to use a feather with <ActionLink showIcon={false} {...ACTIONS.FAN_DANCE}/> or <ActionLink showIcon={false} {...ACTIONS.FAN_DANCE_II}/> before using a proc to prevent overcapping.\n\t\t\t</Trans>,\n            tiers: GAUGE_SEVERITY_TIERS,\n            value: this.featherOvercap,\n            why: <Trans id=\"dnc.feather-gauge.suggestions.overcapped-feathers.why\">\n\t\t\t\t<Plural value={this.featherOvercap} one=\"# feather\" other=\"# feathers\"/> may have been lost.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        const dncColor = Color(JOBS.DANCER.colour);\n        // tslint:disable:no-magic-numbers\n        const data = {\n            datasets: [{\n                    label: 'Feathers',\n                    data: this.history,\n                    steppedLine: true,\n                    backgroundColor: dncColor.fade(0.8),\n                    borderColor: dncColor.fade(0.5),\n                }],\n        };\n        // tslint:enable:no-magic-numbers\n        return <Fragment>\n\t\t\t<span className={styles.helpText}>\n\t\t\t\t<Trans id=\"dnc.feather-gauge.graph.help-text\">This graph is a rough estimate of your feather gauge, at best. Take it with a hefty grain of salt.</Trans>\n\t\t\t</span>\n\t\t\t<TimeLineChart data={data}/>\n\t\t</Fragment>;\n    }\n}\nFeatherGauge.handle = 'feathergauge';\nFeatherGauge.title = t('dnc.feather-gauge.title') `Feather Gauge`;\nFeatherGauge.displayOrder = DISPLAY_ORDER.FEATHERS;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], FeatherGauge.prototype, \"suggestions\", void 0);\n","import ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\nexport default class OGCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        this.trackedCds = [\n            { cooldowns: [ACTIONS.TECHNICAL_STEP] },\n            { cooldowns: [ACTIONS.STANDARD_STEP] },\n            { cooldowns: [ACTIONS.DEVILMENT] },\n            { cooldowns: [ACTIONS.FLOURISH] },\n        ];\n    }\n}\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { Group, Item } from 'parser/core/modules/Timeline';\nconst PROC_STATUSES = [\n    STATUSES.FLOURISHING_FAN_DANCE.id,\n    STATUSES.FLOURISHING_CASCADE.id,\n    STATUSES.FLOURISHING_FOUNTAIN.id,\n    STATUSES.FLOURISHING_SHOWER.id,\n    STATUSES.FLOURISHING_WINDMILL.id,\n];\nexport default class Procs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._casts = {\n            [ACTIONS.FAN_DANCE_III.id]: 0,\n            [ACTIONS.REVERSE_CASCADE.id]: 0,\n            [ACTIONS.FOUNTAINFALL.id]: 0,\n            [ACTIONS.BLOODSHOWER.id]: 0,\n            [ACTIONS.RISING_WINDMILL.id]: 0,\n        };\n        this._removedProcs = {\n            [STATUSES.FLOURISHING_FAN_DANCE.id]: 0,\n            [STATUSES.FLOURISHING_CASCADE.id]: 0,\n            [STATUSES.FLOURISHING_FOUNTAIN.id]: 0,\n            [STATUSES.FLOURISHING_SHOWER.id]: 0,\n            [STATUSES.FLOURISHING_WINDMILL.id]: 0,\n        };\n        this._buffWindows = {\n            [STATUSES.FLOURISHING_FAN_DANCE.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.FLOURISHING_CASCADE.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.FLOURISHING_FOUNTAIN.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.FLOURISHING_SHOWER.id]: {\n                current: null,\n                history: [],\n            },\n            [STATUSES.FLOURISHING_WINDMILL.id]: {\n                current: null,\n                history: [],\n            },\n        };\n        this._group = null;\n        this._overwrittenProcs = 0;\n        this.addHook('cast', { by: 'player', abilityId: Object.keys(this._casts).map(Number) }, this._onCast);\n        this.addHook('applybuff', { by: 'player', abilityId: PROC_STATUSES }, this._onProcGained);\n        this.addHook('refreshbuff', { by: 'player', abilityId: PROC_STATUSES }, this._procOverwritten);\n        this.addHook('removebuff', { by: 'player', abilityId: PROC_STATUSES }, this._onProcRemoved);\n        this.addHook('complete', this._onComplete);\n        this._group = new Group({\n            id: 'procbuffs',\n            content: 'Procs',\n            order: 0,\n            nestedGroups: [],\n        });\n        this.timeline.addGroup(this._group); // Group for showing procs on the timeline\n    }\n    _onCast(event) {\n        if (!this.downtime.isDowntime(event.timestamp)) {\n            this._casts[event.ability.guid]++;\n        }\n    }\n    _onProcGained(event) {\n        const statusId = event.ability.guid;\n        const tracker = this._buffWindows[statusId];\n        if (!tracker) {\n            return;\n        }\n        tracker.current = {\n            start: event.timestamp,\n        };\n    }\n    _procOverwritten() {\n        this._overwrittenProcs++;\n    }\n    _onProcRemoved(event) {\n        this._stopAndSave(event.ability.guid, event.timestamp);\n    }\n    _onComplete() {\n        const droppedFan_Dance = this._removedProcs[STATUSES.FLOURISHING_FAN_DANCE.id] - this._casts[ACTIONS.FAN_DANCE_III.id];\n        const droppedCascade = this._removedProcs[STATUSES.FLOURISHING_CASCADE.id] - this._casts[ACTIONS.REVERSE_CASCADE.id];\n        const droppedFountain = this._removedProcs[STATUSES.FLOURISHING_FOUNTAIN.id] - this._casts[ACTIONS.FOUNTAINFALL.id];\n        const droppedShower = this._removedProcs[STATUSES.FLOURISHING_SHOWER.id] - this._casts[ACTIONS.BLOODSHOWER.id];\n        const droppedWindmill = this._removedProcs[STATUSES.FLOURISHING_WINDMILL.id] - this._casts[ACTIONS.RISING_WINDMILL.id];\n        const droppedProcs = droppedWindmill + droppedShower + droppedFan_Dance + droppedCascade + droppedFountain;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FOUNTAINFALL.icon,\n            content: <Trans id=\"dnc.procs.suggestions.drops.content\">\n\t\t\t\tAvoid dropping your procs unless absolutely necessary. If you have to drop one to keep your Esprit from overcapping, <ActionLink {...ACTIONS.RISING_WINDMILL}/> or <ActionLink {...ACTIONS.REVERSE_CASCADE}/> will lose the least DPS overall.\n\t\t\t</Trans>,\n            why: <Trans id=\"dnc.procs.suggestions.drops.why\">\n\t\t\t\tYou dropped <Plural value={droppedProcs} one=\"# proc\" other=\"# procs\"/>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: droppedProcs,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.REVERSE_CASCADE.icon,\n            content: <Trans id=\"dnc.procs.suggestions.overwrite.content\">\n\t\t\t\tAvoid overwriting your procs. Your proc actions are stronger than your normal combo, so overwriting them is a significant DPS loss.\n\t\t\t</Trans>,\n            why: <Trans id=\"dnc.procs.suggestions.overwrite.why\">\n\t\t\t\t\t\t\tYou overwrote <Plural value={this._overwrittenProcs} one=\"# proc\" other=\"# procs\"/>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n            value: this._overwrittenProcs,\n        }));\n        PROC_STATUSES.forEach(buff => {\n            const status = getDataBy(STATUSES, 'id', buff);\n            const groupId = this.getGroupIdForStatus(status);\n            const fightStart = this.parser.fight.start_time;\n            // Finalise the buff if it was still active\n            if (this._buffWindows[buff].current) {\n                this._stopAndSave(buff, this.parser.fight.end_time);\n            }\n            // Add buff windows to the timeline\n            this._buffWindows[buff].history.forEach(window => {\n                this.timeline.addItem(new Item({\n                    type: 'background',\n                    start: window.start - fightStart,\n                    end: window.stop - fightStart,\n                    group: groupId,\n                    content: <img src={status.icon} alt={status.name}/>,\n                }));\n            });\n        });\n    }\n    _stopAndSave(statusId, timestamp) {\n        if (!this.downtime.isDowntime(timestamp)) {\n            this._removedProcs[statusId]++;\n        }\n        // If this proc is active, stop the buff window\n        const tracker = this._buffWindows[statusId];\n        if (!tracker.current) {\n            return;\n        }\n        tracker.current.stop = timestamp;\n        tracker.history.push(tracker.current);\n        tracker.current = null;\n    }\n    getGroupIdForStatus(status) {\n        const groupId = 'procbuffs-' + status.id;\n        // Make sure a timeline group exists for this buff\n        if (!this._group.nestedGroups.includes(groupId)) {\n            this.timeline.addGroup(new Group({\n                id: groupId,\n                content: status.name,\n            }));\n            this._group.nestedGroups.push(groupId);\n        }\n        return groupId;\n    }\n}\nProcs.handle = 'procs';\nProcs.dependencies = [\n    'downtime',\n    'suggestions',\n    'timeline',\n];\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport _ from 'lodash';\nimport React, { Fragment } from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nimport FeatherGauge from './FeatherGauge';\n// Harsher than the default since you'll only have 4-5 total windows anyways\nconst TECHNICAL_SEVERITY_TIERS = {\n    1: SEVERITY.MINOR,\n    2: SEVERITY.MEDIUM,\n    3: SEVERITY.MAJOR,\n};\nconst WINDOW_STATUSES = [\n    STATUSES.DEVILMENT.id,\n    STATUSES.TECHNICAL_FINISH.id,\n];\nconst FEATHER_THRESHHOLD = 3;\nconst POST_WINDOW_GRACE_PERIOD_MILLIS = 500;\nconst DEVILMENT_COOLDOWN_MILLIS = ACTIONS.DEVILMENT.cooldown * 1000;\nclass TechnicalWindow {\n    constructor(start) {\n        this.rotation = [];\n        this.gcdCount = 0;\n        this.usedDevilment = false;\n        this.hasDevilment = false;\n        this.timelyDevilment = false;\n        this.poolingProblem = false;\n        this.buffsRemoved = [];\n        this.start = start;\n    }\n}\nexport default class Technicalities extends Module {\n    constructor() {\n        super(...arguments);\n        this.history = [];\n        this.badDevilments = 0;\n        this.lastDevilmentTimestamp = -1;\n    }\n    init() {\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.TECHNICAL_FINISH.id }, this.tryOpenWindow);\n        this.addHook('removebuff', { to: 'player', abilityId: WINDOW_STATUSES }, this.tryCloseWindow);\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    tryOpenWindow(event) {\n        const lastWindow = _.last(this.history);\n        // Handle multiple dancer's buffs overwriting each other, we'll have a remove then an apply with the same timestamp\n        // If that happens, re-open the last window and keep tracking\n        if (lastWindow) {\n            if (!lastWindow.end) {\n                return;\n            }\n            if (lastWindow.end === event.timestamp) {\n                lastWindow.end = undefined;\n                return;\n            }\n        }\n        const newWindow = new TechnicalWindow(event.timestamp);\n        this.history.push(newWindow);\n    }\n    tryCloseWindow(event) {\n        const lastWindow = _.last(this.history);\n        if (!lastWindow) {\n            return;\n        }\n        // Cache whether we've seen a buff removal event for this status, just in case they happen at exactly the same timestamp\n        lastWindow.buffsRemoved.push(event.ability.guid);\n        if (this.isWindowOkToClose(lastWindow)) {\n            lastWindow.end = event.timestamp;\n            // Check to see if this window could've had more feathers due to possible pooling problems\n            if (this.feathers.feathersSpentInRange(lastWindow.start, lastWindow.end) < FEATHER_THRESHHOLD) {\n                const previousWindow = this.history[this.history.length - 2];\n                const feathersBeforeWindow = this.feathers.feathersSpentInRange((previousWindow && previousWindow.end || this.parser.fight.start_time)\n                    + POST_WINDOW_GRACE_PERIOD_MILLIS, lastWindow.start);\n                lastWindow.poolingProblem = feathersBeforeWindow > 0;\n            }\n            // If this is the first window, and we didn't catch a devilment use in the window, but we *have* used it,\n            // treat it as a timely usage due to party composition\n            if (this.history.length === 1 && !lastWindow.usedDevilment && this.lastDevilmentTimestamp > 0) {\n                lastWindow.timelyDevilment = true;\n            }\n        }\n    }\n    // Make sure all applicable statuses have fallen off before the window closes\n    isWindowOkToClose(window) {\n        if (window.hasDevilment && !window.buffsRemoved.includes(STATUSES.DEVILMENT.id)) {\n            return false;\n        }\n        if (!window.buffsRemoved.includes(STATUSES.TECHNICAL_FINISH.id)) {\n            return false;\n        }\n        return true;\n    }\n    onCast(event) {\n        const lastWindow = _.last(this.history);\n        if (event.ability.guid === ACTIONS.DEVILMENT.id) {\n            this.handleDevilment(lastWindow);\n        }\n        // If we don't have a window, bail\n        if (!lastWindow) {\n            return;\n        }\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        // Can't do anything else if we didn't get a valid action object\n        if (!action) {\n            return;\n        }\n        // If this window isn't done yet add the action to the list\n        if (!lastWindow.end) {\n            lastWindow.rotation.push(event);\n            // Check whether this window has a devilment status from before the window began\n            if (!lastWindow.hasDevilment && this.combatants.selected.hasStatus(STATUSES.DEVILMENT.id)) {\n                lastWindow.hasDevilment = true;\n            }\n            if (action.onGcd) {\n                lastWindow.gcdCount++;\n            }\n            return;\n        }\n        // If we haven't recorded a trailing GCD event for this closed window, do so now\n        if (lastWindow.end && !lastWindow.trailingGcdEvent && action.onGcd) {\n            lastWindow.trailingGcdEvent = event;\n        }\n    }\n    handleDevilment(lastWindow) {\n        // Don't ding if this is the first Devilment, depending on which job the Dancer is partnered with, it may\n        // be appropriate to use Devilment early. In all other cases, Devilment should be used during Technical Finish\n        if (!this.combatants.selected.hasStatus(STATUSES.TECHNICAL_FINISH.id) && (this.lastDevilmentTimestamp < 0 ||\n            // If the first use we detect is after the cooldown, assume they popped it pre-pull and this 'first'\n            // Use is actually also bad\n            this.parser.currentTimestamp >= DEVILMENT_COOLDOWN_MILLIS)) {\n            this.badDevilments++;\n        }\n        this.lastDevilmentTimestamp = this.parser.currentTimestamp;\n        // If we don't have a window for some reason, bail\n        if (!lastWindow || lastWindow.end) {\n            return;\n        }\n        lastWindow.usedDevilment = true;\n        // Note if the Devilment was used after the second GCD\n        if (lastWindow.gcdCount <= 1) {\n            lastWindow.timelyDevilment = true;\n        }\n    }\n    onComplete() {\n        // Suggestion to use Devilment under Technical\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DEVILMENT.icon,\n            content: <Trans id=\"dnc.technicalities.suggestions.bad-devilments.content\">\n\t\t\t\tUsing <ActionLink {...ACTIONS.DEVILMENT}/> outside of your <StatusLink {...STATUSES.TECHNICAL_FINISH}/> windows leads to an avoidable loss in DPS. Aside from certain opener situations, you should be using <ActionLink {...ACTIONS.DEVILMENT}/> at the beginning of your <StatusLink {...STATUSES.TECHNICAL_FINISH}/> windows.\n\t\t\t</Trans>,\n            tiers: TECHNICAL_SEVERITY_TIERS,\n            value: this.badDevilments,\n            why: <Trans id=\"dnc.technicalities.suggestions.bad-devilments.why\">\n\t\t\t\t<Plural value={this.badDevilments} one=\"# Devilment\" other=\"# Devilments\"/> used outside <StatusLink {...STATUSES.TECHNICAL_FINISH}/>.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to use Devilment ASAP in Technical\n        const lateDevilments = this.history.filter(window => window.usedDevilment && !window.timelyDevilment).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DEVILMENT.icon,\n            content: <Trans id=\"dnc.technicalities.suggestions.late-devilments.content\">\n\t\t\t\tUsing <ActionLink {...ACTIONS.DEVILMENT}/> as early as possible during your <StatusLink {...STATUSES.TECHNICAL_FINISH}/> windows allows you to maximize the multiplicative bonuses that both statuses give you. Try to use it within the first two GCDs of your window.\n\t\t\t</Trans>,\n            tiers: TECHNICAL_SEVERITY_TIERS,\n            value: lateDevilments,\n            why: <Trans id=\"dnc.technicalities.suggestions.late-devilments.why\">\n\t\t\t\t<Plural value={lateDevilments} one=\"# Devilment was\" other=\"# Devilments were\"/> used later than optimal.\n\t\t\t</Trans>,\n        }));\n        // Suggestion to pool feathers for Technical Windows\n        const unpooledWindows = this.history.filter(window => window.poolingProblem).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FAN_DANCE.icon,\n            content: <Trans id=\"dnc.technicalities.suggestions.unpooled.content\">\n\t\t\t\tPooling your Feathers before going into a <StatusLink {...STATUSES.TECHNICAL_FINISH}/> window allows you to use more <ActionLink {...ACTIONS.FAN_DANCE}/>s with the multiplicative bonuses active, increasing their effectiveness. Try to build and hold on to at least three feathers between windows.\n\t\t\t</Trans>,\n            tiers: TECHNICAL_SEVERITY_TIERS,\n            value: unpooledWindows,\n            why: <Trans id=\"dnc.technicalities.suggestions.unpooled.why\">\n\t\t\t\t<Plural value={unpooledWindows} one=\"# window\" other=\"# windows\"/> were missing potential <ActionLink {...ACTIONS.FAN_DANCE}/>s.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        return <Fragment>\n\t\t\t<RotationTable notes={[\n            {\n                header: <Trans id=\"dnc.technicalities.rotation-table.header.missed\"><ActionLink showName={false} {...ACTIONS.DEVILMENT}/> On Time?</Trans>,\n                accessor: 'timely',\n            },\n            {\n                header: <Trans id=\"dnc.technicalities.rotation-table.header.pooled\"><ActionLink showName={false} {...ACTIONS.FAN_DANCE}/> Pooled?</Trans>,\n                accessor: 'pooled',\n            },\n        ]} data={this.history.map(window => {\n            return ({\n                start: window.start - this.parser.fight.start_time,\n                end: window.end != null ?\n                    window.end - this.parser.fight.start_time :\n                    window.start - this.parser.fight.start_time,\n                notesMap: {\n                    timely: <>{this.getNotesIcon(!window.timelyDevilment)}</>,\n                    pooled: <>{this.getNotesIcon(window.poolingProblem)}</>,\n                },\n                rotation: window.rotation,\n            });\n        })} onGoto={this.timeline.show}/>\n\t\t</Fragment>;\n    }\n    getNotesIcon(ruleFailed) {\n        return <Icon name={ruleFailed ? 'remove' : 'checkmark'} className={ruleFailed ? 'text-error' : 'text-success'}/>;\n    }\n}\nTechnicalities.handle = 'technicalities';\nTechnicalities.title = t('dnc.technicalities.title') `Technical Windows`;\nTechnicalities.displayOrder = DISPLAY_ORDER.TECHNICALITIES;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Technicalities.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Technicalities.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Technicalities.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", FeatherGauge)\n], Technicalities.prototype, \"feathers\", void 0);\n","import Combos from './Combos';\nimport DirtyDancing from './DirtyDancing';\nimport EspritGauge from './Esprit';\nimport FeatherGauge from './FeatherGauge';\nimport OGCDDowntime from './OGCDDowntime';\nimport Procs from './Procs';\nimport Technicalities from './Technicalities';\nexport default [\n    Combos,\n    Procs,\n    DirtyDancing,\n    EspritGauge,\n    FeatherGauge,\n    OGCDDowntime,\n    Technicalities,\n];\n"],"sourceRoot":""}
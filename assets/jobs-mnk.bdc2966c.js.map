{"version":3,"sources":["webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/core/modules/DoTs.js","webpack:///./src/parser/core/modules/AoEUsages.tsx","webpack:///./src/parser/jobs/mnk/modules/Cooldowns.ts","webpack:///./src/parser/jobs/mnk/modules/DISPLAY_ORDER.ts","webpack:///./src/parser/jobs/mnk/modules/Demolish.tsx","webpack:///./src/parser/jobs/mnk/modules/Forms.tsx","webpack:///./src/parser/jobs/mnk/modules/Gauge.ts","webpack:///./src/parser/jobs/mnk/modules/Fists.tsx","webpack:///./src/parser/jobs/mnk/modules/MnkAoE.tsx","webpack:///./src/parser/jobs/mnk/modules/OGCDDowntime.ts","webpack:///./src/parser/jobs/mnk/modules/PerfectBalance.tsx","webpack:///./src/parser/jobs/mnk/modules/RiddleOfEarth.tsx","webpack:///./src/parser/jobs/mnk/modules/RiddleOfFire.tsx","webpack:///./src/parser/jobs/mnk/modules/Speedmod.ts","webpack:///./src/parser/jobs/mnk/modules/Steppies.tsx","webpack:///./src/parser/jobs/mnk/modules/TwinSnakes.tsx","webpack:///./src/parser/jobs/mnk/modules/Weaving.ts","webpack:///./src/parser/jobs/mnk/modules/index.ts"],"names":["DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","1","2.5","WEAVING_SEVERITY","SEVERITY","MEDIUM","5","MAJOR","Weaving","Module","constructor","super","this","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","addHook","by","_onBeginCast","_onCast","_onComplete","event","action","data","getAction","ability","guid","autoAttack","isOgcd","push","id","timestamp","_saveIfBad","badWeaves","suggestions","add","TieredSuggestion","icon","content","href","onClick","parser","scrollTo","handle","message","title","why","length","tiers","value","leadingGcdEvent","fight","start_time","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","onGcd","maxWeaves","weaveCount","filter","isUntargetable","castTime","forEvent","closest","matchClosestLower","undefined","speedmod","get","gcdLength","gcd","getEstimate","output","panels","map","item","key","formatTimestamp","formatDuration","events","exclusive","styled","fluid","dependencies","DEFAULT_DURATION_MILLIS","DoTs","_lastApplication","_clip","_statusDuration","statusesToTrack","forEach","statusId","status","getStatus","hasOwnProperty","duration","console","warn","abilityId","_onDotApply","excludeApplication","addChecklistRules","addClippingSuggestions","clip","applicationKey","targetID","targetInstance","lastApplication","getInvulnerableUptime","Math","max","getUptimePercent","enemies","getStatusUptime","fightDuration","getClippingAmount","fightDurationMillis","round","AoEUsages","arguments","severity","MINOR","4","7","suggestionContent","badUsages","Map","init","trackedAbilities","a","aoeAbility","onAbility","onComplete","adjustMinTargets","minTargets","tracked","find","successfulHit","hits","set","totalBadUsages","Array","from","values","reduce","acc","cur","suggestionIcon","size","collapsing","unstackable","Header","Row","HeaderCell","Body","has","Cell","stAbilities","s","__decorate","dependency","__metadata","Suggestions","prototype","Cooldowns","CoreCooldowns","cooldownOrder","name","merge","actions","ACTIONS","FISTS_OF_FIRE","FISTS_OF_WIND","FISTS_OF_EARTH","THE_FORBIDDEN_CHAKRA","ENLIGHTENMENT","ANATMAN","PERFECT_BALANCE","RIDDLE_OF_FIRE","BROTHERHOOD","ELIXIR_FIELD","SHOULDER_TACKLE","TORNADO_KICK","RIDDLE_OF_EARTH","MANTRA","GREASED_LIGHTNING","FISTS","DRAGON_KICK","TWIN_SNAKES","DEMOLISH","SEVERITIES","CLIPPING","10","12","Demolish","checklist","Rule","description","displayOrder","DISPLAY_ORDER","requirements","Requirement","percent","STATUSES","target","Checklist","FORM_TIMEOUT_MILLIS_200","FORM_TIMEOUT_MILLIS_505","FORMS","OPO_OPO_FORM","RAPTOR_FORM","COEURL_FORM","OPO_OPO_SKILLS","BOOTSHINE","ARM_OF_THE_DESTROYER","Forms","formless","resetForms","skippedForms","droppedForms","onCast","to","onGain","onRemove","getDataBy","FORM_TIMEOUT_MILLIS","patch","before","currentForm","form","combatants","selected","hasStatus","untargetable","lastFormChanged","downtime","getDowntime","FORM_SHIFT","includes","lastFormDropped","2","Suggestion","Combatants","Downtime","MAX_STACKS","MAX_FASTER","GL_GRANTERS","ROCKBREAKER","SNAP_PUNCH","GL_REFRESHERS","SIX_SIDED_STAR","GL_TIMEOUT_MILLIS","Gauge","CoreGauge","_stacks","CounterGauge","maximum","chart","label","color","JOBS","MONK","colour","_timer","TimerGauge","PALADIN","onExpiration","reset","goFast","slowDown","onRefresh","EARTHS_REPLY","onDrop","onFleek","becomeAntman","becomeMortal","remaining","getStacksAt","getValueAt","setMaximum","modify","start","refresh","pause","resume","FISTLESS","CHART_COLOURS","WARRIOR","FIST_SEVERITY","3","8","9","6","Fist","fistId","gcdCounter","Fists","fistory","foulWinds","activeFist","getFist","fist","end","getActiveFist","handleFistChange","currentTimestamp","MEDITATION","coeurl","gauge","stacks","end_time","getFistGCDCount","total","current","columns","getFistName","getFistUptimePercent","datum","statistics","PieChartStatistic","headings","toFixed","Statistics","MnkAoE","FOUR_POINT_FURY","TRUE_STRIKE","LEADEN_FIST","DEFAULT_ALLOWED_DOWNTIME","OGCDDowntime","CooldownDowntime","defaultAllowedAverageDowntime","trackedCds","cooldowns","PerfectBalance","BuffWindowModule","buffAction","buffStatus","expectedGCDs","expectedPerWindow","severityTiers","trackedBadActions","changeExpectedGCDsClassLogic","buffWindow","getActionCountByIds","Riddle","clean","RiddleOfEarth","history","onReply","riddle","stopAndSave","missedEarth","earth","endTime","ROF_DURATION","EXPECTED_GCDS","EXPECTED_ELIXIR_FIELDS","EXPECTED_SHOULDER_TACKLES","SUGGESTION_TIERS","active","rushing","gcdsInEachFist","expectedGcds","casts","gcdsByFist","RiddleOfFire","fists","nonRushedRiddles","droppedGcds","sum","gcds","droppedElixirFields","elixirFields","riddlesWithOneTackle","tackles","droppedExpectedOgcds","windlessGcds","min","RotationTable","targets","header","accessor","showName","targetsData","actual","expected","elixirField","shoulderTackle","rotation","onGoto","timeline","show","Timeline","SPEED_INCREASE_PER_STACK","Speedmod","CoreSpeedmod","getJobAdditionalSpeedbuffScalar","LEAD_BOOT_POTENCY","CRIT_BOOT_SEVERITY","WEAK_BOOT_SEVERITY","Boot","crit","weak","Steppies","steppies","fflogsEvents","damageEventName","onDamage","boot","criticalHit","getLeadenPercent","getUnbuffedCount","potency","getUncritCount","boots","FFLogsEventNormaliser","TWIN_SNAKES_CYCLE_BUFFER","TWIN_SNAKES_CYCLE_LENGTH","TwinState","TwinSnakes","failedFury","earlySnakes","lateSnakes","gcdsSinceTS","twinSnake","unbuffedGcds","unbuffedTime","lostTruePotency","getBuffUptimePercent","player","Enemies","Invulnerability","SSS_MAX_WEAVES","CoreWeaving"],"mappings":"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","file":"assets/jobs-mnk.bdc2966c.js","sourcesContent":["import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import Module from 'parser/core/Module';\n// Absurdly large fallback number, so missing duration properties will result in both a console warning and stupid suggestions\nconst DEFAULT_DURATION_MILLIS = 120000;\nexport default class DoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastApplication = {};\n        this._clip = {};\n        this._statusDuration = {};\n        // NOTE: All statuses submodules track should include a duration property, otherwise the results this produces will be very fucky\n        this.constructor.statusesToTrack.forEach(statusId => {\n            const status = this.data.getStatus(statusId);\n            if (!status) {\n                return;\n            }\n            if (!status.hasOwnProperty('duration')) {\n                console.warn(`statusId ${statusId} is missing a duration property`);\n                this._statusDuration[statusId] = DEFAULT_DURATION_MILLIS;\n            }\n            else {\n                this._statusDuration[statusId] = status.duration * 1000;\n            }\n        });\n        this.addHook(['applydebuff', 'refreshdebuff'], { by: 'player', abilityId: this.constructor.statusesToTrack }, this._onDotApply);\n        this.addHook('complete', this._onComplete);\n    }\n    // *** FUNCTIONS TO OVERRIDE *** //\n    excludeApplication() {\n        // To be overridden by submodules that want to exclude certain applications from clipping calculations (e.g. SMN when rushing)\n        return false;\n    }\n    addChecklistRules() {\n        // To be overridden by submodules to display the checklist rules for their job. This should be handled on a job-by-job\n        // basis rather than generically, since the description text isn't one-size-fits-all, and some jobs may be tracking\n        // more than just DoTs with this module (e.g. DRG's Disembowel).\n    }\n    // Allow Typescript overrides using the parameter\n    // eslint-disable-next-line no-unused-vars\n    addClippingSuggestions(clip) {\n        // To be overridden by submodules to display any clipping suggestions. This should also be handled on a job-by-job\n        // basis, since different jobs have different thresholds for what constitutes bad clipping with varying explanations\n        // for why.\n    }\n    // ***************************** //\n    _onDotApply(event) {\n        const statusId = event.ability.guid;\n        // Make sure we're tracking for this target\n        const applicationKey = `${event.targetID}|${event.targetInstance}`;\n        const lastApplication = this._lastApplication[applicationKey] = this._lastApplication[applicationKey] || {};\n        // If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n        if (!lastApplication[statusId] || this.excludeApplication()) {\n            lastApplication[statusId] = event.timestamp;\n            return;\n        }\n        // Base clip calc\n        let clip = this._statusDuration[statusId] - (event.timestamp - lastApplication[statusId]);\n        // Remove any untargetable time from the clip - often want to hardcast after an invuln phase, but refresh w/ 3D shortly after.\n        clip -= this.invuln.getUntargetableUptime('all', event.timestamp - this._statusDuration[statusId], event.timestamp);\n        // Also remove invuln time in the future that casting later would just push dots into\n        // TODO: This relies on a full set of invuln data ahead of time. Can this be trusted?\n        clip -= this.invuln.getInvulnerableUptime('all', event.timestamp, event.timestamp + this._statusDuration[statusId] + clip);\n        // Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n        this._clip[statusId] = (this._clip[statusId] || 0) + Math.max(0, clip);\n        lastApplication[statusId] = event.timestamp;\n    }\n    _onComplete() {\n        this.addChecklistRules();\n        this.addClippingSuggestions(this._clip);\n    }\n    // These two functions are helpers for submodules and should be used but not overridden\n    getUptimePercent(statusId) {\n        const statusUptime = this.enemies.getStatusUptime(statusId);\n        const fightDuration = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightDuration) * 100;\n    }\n    getClippingAmount(statusId) {\n        // This normalises clipping as seconds clipped per minute, since some level of clipping is expected and we need tiers that work for both long and short fights\n        const fightDurationMillis = (this.parser.fightDuration - this.invuln.getInvulnerableUptime());\n        // eslint-disable-next-line no-magic-numbers\n        const clipSecsPerMin = Math.round((this._clip[statusId] * 60) / fightDurationMillis);\n        return clipSecsPerMin;\n    }\n}\nDoTs.handle = 'dots';\nDoTs.dependencies = [\n    'data',\n    'enemies',\n    'invuln',\n];\n// To be overriden by submodules with an array of status IDs to track\nDoTs.statusesToTrack = [];\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Module, { dependency } from 'parser/core/Module';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport React from 'react';\nimport { Table } from 'semantic-ui-react';\n/**\n * This module checks for usages of AoE skills that have single target alternatives,\n * such as BLMs Xenoglossy or NINs Hellfrog Medium, to ensure they hit the minimum\n * number of targets.  It should not be used to check skills that can hit AoE but do\n * not have alternatives, such as DRGs Dragonfire Dive or SMNs Deathflare, as it is\n * correct to use those skills on single targets.\n *\n * For the AoE combos of melee DPS and Tanks, define a trackedAbility with the first\n * abilities of the AoE and single target combos.  This is to provide leeway to finishing\n * AoE combos when the number of targets may drop below the minimum during the combo.\n */\nexport class AoEUsages extends Module {\n    constructor() {\n        super(...arguments);\n        /**\n         * Implementing modules MAY override the severity tiers for incorrect AoE usages.\n         */\n        this.severity = {\n            1: SEVERITY.MINOR,\n            4: SEVERITY.MEDIUM,\n            7: SEVERITY.MAJOR,\n        };\n        this.suggestionContent = <Trans id=\"core.aoeusages.suggestion.content\">\n\t\tAvoid using AoE abilities when they would do less damage than an alternative single-target ability that shares a resource cost or cooldown.\n\t\tIf the AoE skill cannot hit enough targets, the single-target ability will do more total damage and should be used instead.\n\t</Trans>;\n        this.badUsages = new Map();\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player', abilityId: this.trackedAbilities.map(a => a.aoeAbility.id) }, this.onAbility);\n        this.addHook('complete', this.onComplete);\n    }\n    /**\n     * Implementing modules that have special logic where the number of minimum\n     * targets for a skill is not constant may override this as needed.\n     * @param event The event for which the number of minimum targets is being adjusted.\n     * @param minTargets The default number of minimum targets for the ability as defined in trackedAbilities.\n     */\n    adjustMinTargets(event, minTargets) {\n        return minTargets;\n    }\n    onAbility(event) {\n        const tracked = this.trackedAbilities.find(a => a.aoeAbility.id === event.ability.guid);\n        if (tracked === undefined) {\n            return;\n        }\n        const minTargets = this.adjustMinTargets(event, tracked.minTargets);\n        if (event.successfulHit && event.hits.length < minTargets) {\n            this.badUsages.set(event.ability.guid, (this.badUsages.get(event.ability.guid) || 0) + 1);\n        }\n    }\n    onComplete() {\n        const totalBadUsages = Array.from(this.badUsages.values()).reduce((acc, cur) => acc + cur, 0);\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.suggestionIcon,\n            content: this.suggestionContent,\n            tiers: this.severity,\n            value: totalBadUsages,\n            why: <Trans id=\"core.aoeusages.suggestion.why\">\n\t\t\t\tAoE abilities were used against too few targets <Plural value={totalBadUsages} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        // if no bad usages were found, do not output anything\n        if (this.badUsages.size === 0) {\n            return;\n        }\n        // if any bad usages were found, tell them which ones, how many times,\n        // and tell them what they should have used instead\n        return <>\n\t\t<Table collapsing unstackable>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.aoe-ability\">AoE Ability Used</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.st-alternative\">Single Target Alternative</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.number-bad-usages\">Number of Usages Against Too Few Targets</Trans></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this.trackedAbilities\n            .filter(a => this.badUsages.has(a.aoeAbility.id))\n            .map(a => {\n            return <Table.Row key={a.aoeAbility.id}>\n\t\t\t\t\t\t<Table.Cell><ActionLink {...a.aoeAbility}/></Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{a.stAbilities.map(s => <ActionLink {...s}/>)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{this.badUsages.get(a.aoeAbility.id)}</Table.Cell>\n\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t\t</>;\n    }\n}\nAoEUsages.handle = 'aoeusages';\nAoEUsages.title = t('core.aoeusages.title') `Incorrect AoE Ability Usage`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions\n    /**\n     * Implementing modules MUST define the icon to be used for the suggestion.\n     */\n    )\n], AoEUsages.prototype, \"suggestions\", void 0);\n","import ACTIONS from 'data/ACTIONS';\nimport CoreCooldowns from 'parser/core/modules/Cooldowns';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    {\n        name: 'Fists',\n        merge: true,\n        actions: [\n            ACTIONS.FISTS_OF_FIRE.id,\n            ACTIONS.FISTS_OF_WIND.id,\n            ACTIONS.FISTS_OF_EARTH.id,\n        ],\n    },\n    {\n        name: 'Chakras',\n        merge: false,\n        actions: [\n            ACTIONS.THE_FORBIDDEN_CHAKRA.id,\n            ACTIONS.ENLIGHTENMENT.id,\n        ],\n    },\n    ACTIONS.ANATMAN.id,\n    ACTIONS.PERFECT_BALANCE.id,\n    ACTIONS.RIDDLE_OF_FIRE.id,\n    ACTIONS.BROTHERHOOD.id,\n    ACTIONS.ELIXIR_FIELD.id,\n    ACTIONS.SHOULDER_TACKLE.id,\n    ACTIONS.TORNADO_KICK.id,\n    ACTIONS.RIDDLE_OF_EARTH.id,\n    ACTIONS.MANTRA.id,\n];\n","export default {\n    GREASED_LIGHTNING: 1,\n    RIDDLE_OF_FIRE: 2,\n    PERFECT_BALANCE: 3,\n    FISTS: 4,\n    DRAGON_KICK: 5,\n    TWIN_SNAKES: 6,\n    DEMOLISH: 7,\n};\n","import { __decorate, __metadata } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport DoTs from 'parser/core/modules/DoTs';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst SEVERITIES = {\n    CLIPPING: {\n        7: SEVERITY.MINOR,\n        10: SEVERITY.MEDIUM,\n        12: SEVERITY.MAJOR,\n    },\n};\nexport default class Demolish extends DoTs {\n    addChecklistRules() {\n        this.checklist.add(new Rule({\n            name: <Trans id=\"mnk.demolish.checklist.name\">Keep Demolish up</Trans>,\n            description: <Trans id=\"mnk.demolish.checklist.description\">\n\t\t\t\t<ActionLink {...ACTIONS.DEMOLISH}/> is your strongest finisher (assuming at least 4 DoT ticks hit).\n\t\t\t</Trans>,\n            displayOrder: DISPLAY_ORDER.DEMOLISH,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"mnk.demolish.checklist.requirement.name\"><ActionLink {...ACTIONS.DEMOLISH}/> uptime</Trans>,\n                    percent: () => this.getUptimePercent(STATUSES.DEMOLISH.id),\n                }),\n            ],\n            // TODO: calculate the number of good Demolishes a fight should have\n            //       and set target to allow dropping without losing a tick\n            target: 85,\n        }));\n    }\n    addClippingSuggestions(clip) {\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DEMOLISH.icon,\n            content: <Trans id=\"mnk.demolish.suggestion.content\">\n\t\t\t\tAvoid refreshing <ActionLink {...ACTIONS.DEMOLISH}/> significantly before its expiration, unless it would result in a bad refresh due to <StatusLink {...STATUSES.GREASED_LIGHTNING}/> recovery. Unnecessary refreshes risk overwriting buff snapshots.\n\t\t\t</Trans>,\n            tiers: SEVERITIES.CLIPPING,\n            value: this.getClippingAmount(STATUSES.DEMOLISH.id),\n            why: <Trans id=\"mnk.demolish.suggestion.why\">\n\t\t\t\tYou lost {this.parser.formatDuration(clip[STATUSES.DEMOLISH.id])} of Demolish to early refreshes.\n\t\t\t</Trans>,\n        }));\n    }\n}\nDemolish.handle = 'demolish';\nDemolish.statusesToTrack = [\n    STATUSES.DEMOLISH.id,\n];\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], Demolish.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Demolish.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Downtime from 'parser/core/modules/Downtime';\nimport Suggestions, { SEVERITY, Suggestion, TieredSuggestion } from 'parser/core/modules/Suggestions';\nconst FORM_TIMEOUT_MILLIS_200 = 10000;\nconst FORM_TIMEOUT_MILLIS_505 = 15000;\nexport const FORMS = [\n    STATUSES.OPO_OPO_FORM.id,\n    STATUSES.RAPTOR_FORM.id,\n    STATUSES.COEURL_FORM.id,\n];\nconst OPO_OPO_SKILLS = [\n    ACTIONS.BOOTSHINE.id,\n    ACTIONS.DRAGON_KICK.id,\n    ACTIONS.ARM_OF_THE_DESTROYER.id,\n];\nexport default class Forms extends Module {\n    constructor() {\n        super(...arguments);\n        this.formless = 0;\n        this.resetForms = 0;\n        this.skippedForms = 0;\n        this.droppedForms = 0;\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('applybuff', { to: 'player', abilityId: FORMS }, this.onGain);\n        this.addHook('refreshbuff', { to: 'player', abilityId: FORMS }, this.onGain);\n        this.addHook('removebuff', { to: 'player', abilityId: FORMS }, this.onRemove);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (!action) {\n            return;\n        }\n        const FORM_TIMEOUT_MILLIS = this.parser.patch.before('5.05')\n            ? FORM_TIMEOUT_MILLIS_200\n            : FORM_TIMEOUT_MILLIS_505;\n        if (action.onGcd) {\n            // Check the current form and stacks, or zero for no form\n            const currentForm = FORMS.find(form => this.combatants.selected.hasStatus(form)) || 0;\n            const untargetable = this.lastFormChanged !== undefined ?\n                this.downtime.getDowntime(this.lastFormChanged, event.timestamp) :\n                0;\n            if (action === ACTIONS.FORM_SHIFT.id) {\n                // Only ignore Form Shift if we're in downtime\n                if (untargetable === 0) {\n                    this.skippedForms++;\n                }\n                return;\n            }\n            // Handle relevant actions per form\n            switch (currentForm) {\n                case STATUSES.OPO_OPO_FORM.id:\n                    break;\n                // Using Opo-Opo skills resets form\n                case STATUSES.RAPTOR_FORM.id:\n                case STATUSES.COEURL_FORM.id:\n                    if (OPO_OPO_SKILLS.includes(action)) {\n                        this.resetForms++;\n                    }\n                    break;\n                default:\n                    // No form used\n                    if (OPO_OPO_SKILLS.includes(action)) {\n                        this.formless++;\n                    }\n                    // Check if we timed out\n                    if (untargetable === 0 && this.lastFormDropped && this.lastFormChanged) {\n                        if ((this.lastFormDropped - this.lastFormChanged) > FORM_TIMEOUT_MILLIS) {\n                            this.droppedForms++;\n                        }\n                    }\n            }\n        }\n    }\n    // Anatman doesn't freeze, it just refreshes every tick, so it's the same as a gain\n    onGain(event) {\n        this.lastFormChanged = event.timestamp;\n    }\n    onRemove(event) {\n        this.lastFormDropped = event.timestamp;\n    }\n    onComplete() {\n        // Using the wrong form\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FORM_SHIFT.icon,\n            content: <Trans id=\"mnk.forms.suggestions.formless.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.DRAGON_KICK}/> outside of <StatusLink {...STATUSES.OPO_OPO_FORM}/>. The form bonus is only activated in the correct form and <ActionLink {...ACTIONS.BOOTSHINE}/> has higher potency when buffed.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n            },\n            value: this.formless,\n            why: <Trans id=\"mnk.forms.suggestions.formless.why\">\n\t\t\t\t<Plural value={this.formless} one=\"# combo-starter was\" other=\"# combo-starters were\"/>  used Formlessly, cancelling form bonus effects.\n\t\t\t</Trans>,\n        }));\n        // Cancelling forms\n        if (this.resetForms >= 1) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FORM_SHIFT.icon,\n                severity: SEVERITY.MEDIUM,\n                content: <Trans id=\"mnk.forms.suggestions.reset.content\">\n\t\t\t\t\tTry not to cancel combos by using <ActionLink {...ACTIONS.BOOTSHINE}/>, <ActionLink {...ACTIONS.DRAGON_KICK}/>, or <ActionLink {...ACTIONS.ARM_OF_THE_DESTROYER}/> mid-rotation.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"mnk.forms.suggestions.reset.why\">\n\t\t\t\t\t<Plural value={this.resetForms} one=\"# combo was\" other=\"# combos were\"/> reset by an Opo-Opo Form skill.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // Skipping a form\n        if (this.skippedForms >= 1) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FORM_SHIFT.icon,\n                severity: SEVERITY.MEDIUM,\n                content: <Trans id=\"mnk.forms.suggestions.skipped.content\">\n\t\t\t\t\tAvoid skipping Forms outside of downtime. You could be missing important buffs or refreshing <StatusLink {...STATUSES.GREASED_LIGHTNING}/> by skipping.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"mnk.forms.suggestions.skipped.why\">\n\t\t\t\t\t<Plural value={this.skippedForms} one=\"# form was\" other=\"# forms were\"/> skipped by Form Shift unnecessarily.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // Form timeout\n        if (this.droppedForms >= 1) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.FORM_SHIFT.icon,\n                severity: SEVERITY.MAJOR,\n                content: <Trans id=\"mnk.forms.suggestions.dropped.content\">\n\t\t\t\t\tAvoid dropping Forms. You may need to use a gap closer or stay closer to the enemy to avoid your combo timing out. This usually indicates a bigger problem.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"mnk.forms.suggestions.dropped.why\">\n\t\t\t\t\tForm was broken <Plural value={this.droppedForms} one=\"# time.\" other=\"# times.\"/>\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nForms.handle = 'forms';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Forms.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Downtime)\n], Forms.prototype, \"downtime\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Forms.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport ACTIONS from 'data/ACTIONS';\nimport JOBS from 'data/JOBS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport { CounterGauge, Gauge as CoreGauge, TimerGauge } from 'parser/core/modules/Gauge';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport { FORMS } from './Forms';\n// GL stack caps.\nexport const MAX_STACKS = 3;\nexport const MAX_FASTER = 4;\n// Actions that grant stacks.\nconst GL_GRANTERS = [\n    ACTIONS.DEMOLISH.id,\n    ACTIONS.ROCKBREAKER.id,\n    ACTIONS.SNAP_PUNCH.id,\n];\n// Actions that refresh the timer without granting stacks.\nconst GL_REFRESHERS = [\n    // kinda weird, only when going Coeurl->Opo-Opo and you need at least one stack\n    ACTIONS.FORM_SHIFT.id,\n    ACTIONS.SIX_SIDED_STAR.id,\n];\n// The duration for timeouts\nconst GL_TIMEOUT_MILLIS = STATUSES.GREASED_LIGHTNING.duration * 1000;\nexport default class Gauge extends CoreGauge {\n    constructor() {\n        super(...arguments);\n        this._stacks = this.add(new CounterGauge({\n            maximum: MAX_STACKS,\n            chart: { label: 'Stacks', color: JOBS.MONK.colour },\n        }));\n        this._timer = this.add(new TimerGauge({\n            maximum: GL_TIMEOUT_MILLIS,\n            chart: { label: 'Duration', color: JOBS.PALADIN.colour },\n            onExpiration: () => this._stacks.reset(),\n        }));\n    }\n    init() {\n        super.init();\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.FISTS_OF_WIND.id }, this.goFast);\n        this.addHook('removebuff', { to: 'player', abilityId: STATUSES.FISTS_OF_WIND.id }, this.slowDown);\n        this.addHook('cast', { by: 'player', abilityId: GL_GRANTERS }, this.onGain);\n        this.addHook('cast', { by: 'player', abilityId: GL_REFRESHERS }, this.onRefresh);\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.EARTHS_REPLY.id }, this.onRefresh);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.TORNADO_KICK.id }, this.onDrop);\n        this.addHook('refreshbuff', { by: 'player', abilityId: FORMS }, this.onFleek);\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.ANATMAN.id }, this.becomeAntman);\n        this.addHook('removebuff', { to: 'player', abilityId: STATUSES.ANATMAN.id }, this.becomeMortal);\n    }\n    get stacks() {\n        return this._stacks.value;\n    }\n    get timer() {\n        return this._timer.remaining;\n    }\n    getStacksAt(timestamp) {\n        return this._stacks.getValueAt(timestamp);\n    }\n    goFast() {\n        this._stacks.setMaximum(MAX_FASTER);\n    }\n    slowDown() {\n        this._stacks.setMaximum(MAX_STACKS);\n    }\n    onGain() {\n        this._stacks.modify(1);\n        this._timer.start();\n    }\n    // If they're using Form Shift but don't have Coeurl Form, it does nothing\n    onRefresh(event) {\n        if (event.ability.guid === ACTIONS.FORM_SHIFT.id && !this.combatants.selected.hasStatus(STATUSES.COEURL_FORM.id)) {\n            return;\n        }\n        this._timer.refresh();\n    }\n    onDrop() {\n        this._stacks.reset();\n        this._timer.reset();\n    }\n    // Anatman status ticks indicate when the gauge ticks too, great meme\n    // It works even if you have no stacks, so we sanity-check the status is active.\n    onFleek() {\n        if (this.combatants.selected.hasStatus(STATUSES.ANATMAN.id)) {\n            this._stacks.modify(1);\n            this._timer.set(GL_TIMEOUT_MILLIS, true);\n        }\n    }\n    // Anatman doesn't immediately refresh which requires a tick, but it does freeze.\n    becomeAntman() {\n        this._timer.pause();\n    }\n    // Gauge restarts\n    becomeMortal() {\n        this._timer.resume();\n    }\n}\nGauge.handle = 'greasedLightning';\nGauge.title = t('mnk.gauge.title') `Greased Lightning`;\nGauge.displayOrder = DISPLAY_ORDER.GREASED_LIGHTNING;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Gauge.prototype, \"combatants\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport _ from 'lodash';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport JOBS from 'data/JOBS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport { PieChartStatistic, Statistics } from 'parser/core/modules/Statistics';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport Gauge, { MAX_FASTER, MAX_STACKS } from './Gauge';\nexport const FISTLESS = 0;\nexport const FISTS = [\n    STATUSES.FISTS_OF_EARTH.id,\n    STATUSES.FISTS_OF_FIRE.id,\n    STATUSES.FISTS_OF_WIND.id,\n];\nconst CHART_COLOURS = {\n    [FISTLESS]: '#888',\n    [STATUSES.FISTS_OF_EARTH.id]: JOBS.MONK.colour,\n    [STATUSES.FISTS_OF_FIRE.id]: JOBS.WARRIOR.colour,\n    [STATUSES.FISTS_OF_WIND.id]: JOBS.PALADIN.colour,\n};\nconst FIST_SEVERITY = {\n    FISTLESS: {\n        1: SEVERITY.MEDIUM,\n        3: SEVERITY.MAJOR,\n    },\n    // Opener is 7 FoF GCDs, a user might also get forced into a GL3 burst at the end of a fight\n    // but if they can hit 9 there, they can probably hit 10-11 in GL4 anyway since they're getting\n    // a full RoF window. 10+ is always going to be a mistake. This is kinda weird tho since it's\n    // severity per window rather than a whole fight unlike FoE or no fist.\n    FISTS_OF_FIRE: {\n        8: SEVERITY.MINOR,\n        9: SEVERITY.MEDIUM,\n        10: SEVERITY.MAJOR,\n    },\n    // Forced disengaging is rarely more than 2 GCDs\n    FISTS_OF_EARTH: {\n        2: SEVERITY.MEDIUM,\n        3: SEVERITY.MAJOR,\n    },\n    // Allow one in case of borked openers but flag it.\n    // Yes, I know it's a fart joke. I am 12 and what is this?\n    // 6 for major mostly because it's half as bad as Fistless.\n    FISTS_OF_WIND: {\n        1: SEVERITY.MEDIUM,\n        6: SEVERITY.MAJOR,\n    },\n};\nexport class Fist {\n    constructor(fistId, start) {\n        this.id = FISTLESS;\n        this.start = 0;\n        this.gcdCounter = 0;\n        this.id = fistId;\n        this.start = start;\n    }\n}\nexport default class Fists extends Module {\n    constructor() {\n        super(...arguments);\n        this.fistory = [];\n        this.foulWinds = 0;\n        // Assume stanceless by default\n        //  if there's a pre-start applybuff, it'll get corrected, and if not, it's already correct\n        this.activeFist = new Fist(FISTLESS, this.parser.fight.start_time);\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('applybuff', { to: 'player', abilityId: FISTS }, this.onGain);\n        this.addHook('removebuff', { to: 'player', abilityId: FISTS }, this.onRemove);\n        this.addHook('complete', this.onComplete);\n    }\n    // Public API to get the Fist in use at a given time.\n    getFist(timestamp) {\n        return this.fistory.filter(fist => fist.start <= timestamp\n            && (typeof fist.end === 'undefined' // sanity check\n                || fist.end >= timestamp))[0];\n    }\n    // Public API to get the currently active Fist.\n    getActiveFist() {\n        return this.activeFist;\n    }\n    handleFistChange(fistId) {\n        // Initial state correction, set it and dip out\n        if (this.parser.currentTimestamp <= this.parser.fight.start_time) {\n            this.activeFist = new Fist(fistId, this.parser.currentTimestamp);\n            return;\n        }\n        if (this.activeFist.id !== fistId) {\n            this.activeFist.end = this.parser.currentTimestamp;\n        }\n        this.fistory.push(this.activeFist);\n        this.activeFist = new Fist(fistId, this.parser.currentTimestamp);\n    }\n    onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid); // should be Action type\n        // If we don't have a valid action or it's not a GCD, skip\n        if (!action || !action.onGcd) {\n            return;\n        }\n        // Ignore Meditation and Form Shift\n        if ([ACTIONS.MEDITATION.id, ACTIONS.FORM_SHIFT.id].includes(action.id)) {\n            return;\n        }\n        this.activeFist.gcdCounter++;\n    }\n    onGain(event) {\n        const action = getDataBy(STATUSES, 'id', event.ability.guid); // should be Action type\n        if (!action) {\n            return;\n        }\n        this.handleFistChange(event.ability.guid);\n        // We only care about FoW from this point on\n        if (event.ability.guid !== STATUSES.FISTS_OF_WIND.id) {\n            return;\n        }\n        // If player switches to FoW but they're not about to GL4\n        const coeurl = this.combatants.selected.hasStatus(STATUSES.COEURL_FORM.id);\n        if (this.gauge.stacks < MAX_STACKS || (this.gauge.stacks === MAX_STACKS && !coeurl)) {\n            this.foulWinds++;\n        }\n    }\n    onRemove(event) {\n        // If we're removing a fist that isn't active, it's just log order weirdness due to timestamps\n        if (this.activeFist.id === event.ability.guid) {\n            this.handleFistChange(FISTLESS);\n        }\n    }\n    onComplete() {\n        // Flush the last stance\n        this.fistory.push({ ...this.activeFist, end: this.parser.fight.end_time });\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FISTS_OF_FIRE.icon,\n            content: <Trans id=\"mnk.fists.suggestions.stanceless.content\">\n\t\t\t\tFist buffs are one of your biggest DPS contributors, either directly with <ActionLink {...ACTIONS.FISTS_OF_FIRE}/>, <StatusLink {...STATUSES.GREASED_LIGHTNING}/> manipulation with <ActionLink {...ACTIONS.FISTS_OF_EARTH}/>, and outright more GCDs with <ActionLink {...ACTIONS.FISTS_OF_WIND}/>.\n\t\t\t</Trans>,\n            why: <Trans id=\"mnk.fists.suggestions.stanceless.why\">\n\t\t\t\t<Plural value={this.getFistGCDCount(FISTLESS)} one=\"# GCD\" other=\"# GCDs\"/> had no Fists buff active.\n\t\t\t</Trans>,\n            tiers: FIST_SEVERITY.FISTLESS,\n            value: this.getFistGCDCount(FISTLESS),\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FISTS_OF_EARTH.icon,\n            content: <Trans id=\"mnk.fists.suggestions.foe.content\">\n\t\t\t\tWhen using <ActionLink {...ACTIONS.RIDDLE_OF_EARTH}/>, remember to change back to <StatusLink {...STATUSES.FISTS_OF_WIND}/> as soon as possible.\n\t\t\t</Trans>,\n            tiers: FIST_SEVERITY.FISTS_OF_EARTH,\n            why: <Trans id=\"mnk.fists.suggestions.foe.why\">\n\t\t\t\t<StatusLink {...STATUSES.FISTS_OF_EARTH}/> was active for <Plural value={this.getFistGCDCount(STATUSES.FISTS_OF_EARTH.id)} one=\"# GCD\" other=\"# GCDs\"/>.\n\t\t\t</Trans>,\n            value: this.getFistGCDCount(STATUSES.FISTS_OF_EARTH.id),\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FISTS_OF_WIND.icon,\n            content: <Trans id=\"mnk.fists.suggestions.fow.content\">\n\t\t\t\tAvoid swapping to <StatusLink {...STATUSES.FISTS_OF_WIND}/> while below {MAX_STACKS} stacks until you're about to execute a <StatusLink {...STATUSES.COEURL_FORM}/> skill. <StatusLink {...STATUSES.FISTS_OF_FIRE}/> offers more damage until you can get to GL{MAX_FASTER}.\n\t\t\t</Trans>,\n            why: <Trans id=\"mnk.fists.suggestions.fow.why\">\n\t\t\t\t<StatusLink {...STATUSES.FISTS_OF_WIND}/> was activated <Plural value={this.foulWinds} one=\"# time\" other=\"# times\"/> below max stacks.\n\t\t\t</Trans>,\n            tiers: FIST_SEVERITY.FISTS_OF_WIND,\n            value: this.foulWinds,\n        }));\n        // Statistics\n        const uptimeKeys = _.uniq(this.fistory.map(fist => fist.id));\n        const data = uptimeKeys.map(id => {\n            const value = this.fistory\n                .filter(fist => fist.id === id)\n                .reduce((total, current) => total + (current.end || this.parser.fight.end_time) - current.start, 0);\n            return {\n                value,\n                color: CHART_COLOURS[id],\n                columns: [\n                    this.getFistName(id),\n                    this.parser.formatDuration(value),\n                    this.getFistUptimePercent(id) + '%',\n                ],\n            };\n        }).filter(datum => datum.value > 0);\n        this.statistics.add(new PieChartStatistic({\n            headings: ['Fist', 'Uptime', '%'],\n            data,\n        }));\n    }\n    getFistGCDCount(fistId) {\n        return this.fistory\n            .filter(fist => fist.id === fistId)\n            .reduce((total, current) => total + current.gcdCounter, 0);\n    }\n    getFistUptimePercent(fistId) {\n        const statusUptime = this.combatants.getStatusUptime(fistId);\n        return ((statusUptime / this.parser.fightDuration) * 100).toFixed(2);\n    }\n    getFistName(fistId) {\n        if (fistId === FISTLESS) {\n            // NOTE: Do /not/ return a <Trans> here - it will cause Chart.js to try and clone the entire react tree.\n            // TODO: Work out how to translate this shit.\n            return 'Fistless';\n        }\n        // If this fucking errors...\n        const status = getDataBy(STATUSES, 'id', fistId); // this should be a Status or Buff?\n        return status.name;\n    }\n}\nFists.handle = 'fists';\nFists.title = t('mnk.fists.title') `Fists`;\nFists.displayOrder = DISPLAY_ORDER.FISTS;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Fists.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Gauge)\n], Fists.prototype, \"gauge\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Statistics)\n], Fists.prototype, \"statistics\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Fists.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport { AoEUsages } from 'parser/core/modules/AoEUsages';\nimport Combatants from 'parser/core/modules/Combatants';\nexport default class MnkAoE extends AoEUsages {\n    constructor() {\n        super(...arguments);\n        // You awake to find yourself enlightened to the true power of AoE\n        this.suggestionIcon = ACTIONS.ENLIGHTENMENT.icon;\n        // Assuming user is in the correct Form\n        this.trackedAbilities = [\n            {\n                aoeAbility: ACTIONS.ARM_OF_THE_DESTROYER,\n                stAbilities: [ACTIONS.BOOTSHINE, ACTIONS.DRAGON_KICK],\n                minTargets: 3,\n            },\n            {\n                aoeAbility: ACTIONS.FOUR_POINT_FURY,\n                stAbilities: [ACTIONS.TRUE_STRIKE, ACTIONS.TWIN_SNAKES],\n                minTargets: 2,\n            },\n            {\n                aoeAbility: ACTIONS.ROCKBREAKER,\n                stAbilities: [ACTIONS.DEMOLISH, ACTIONS.SNAP_PUNCH],\n                minTargets: 2,\n            },\n            {\n                aoeAbility: ACTIONS.ENLIGHTENMENT,\n                stAbilities: [ACTIONS.THE_FORBIDDEN_CHAKRA],\n                minTargets: 2,\n            },\n        ];\n    }\n    adjustMinTargets(event, minTargets) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        // How in the fuck did we even get here tbh\n        if (!action) {\n            return minTargets;\n        }\n        // If Leaden Fist is up, Boot is extra strong\n        if (action.id === ACTIONS.ARM_OF_THE_DESTROYER && this.combatants.selected.hasStatus(STATUSES.LEADEN_FIST.id)) {\n            return minTargets + 1;\n        }\n        return minTargets;\n    }\n}\nMnkAoE.handle = 'mnkaoe';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants\n    // You awake to find yourself enlightened to the true power of AoE\n    )\n], MnkAoE.prototype, \"combatants\", void 0);\n","import ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\n// Approximate downtime window to account for aligning derped setups and GCD pinning:\n// 2 GCDs under slow GL3 (2.07s GCD), 700ms for second half of GCD activation\nconst DEFAULT_ALLOWED_DOWNTIME = 4850;\nexport default class OGCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        this.defaultAllowedAverageDowntime = DEFAULT_ALLOWED_DOWNTIME;\n        this.trackedCds = [\n            { cooldowns: [ACTIONS.BROTHERHOOD] },\n            { cooldowns: [ACTIONS.ELIXIR_FIELD] },\n            { cooldowns: [ACTIONS.PERFECT_BALANCE] },\n            { cooldowns: [ACTIONS.RIDDLE_OF_FIRE] },\n            { cooldowns: [ACTIONS.SHOULDER_TACKLE] },\n        ];\n    }\n}\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport { BuffWindowModule } from 'parser/core/modules/BuffWindow';\nimport { SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport { FISTS } from './Fists';\nimport Gauge, { MAX_FASTER } from './Gauge';\nexport default class PerfectBalance extends BuffWindowModule {\n    constructor() {\n        super(...arguments);\n        this.buffAction = ACTIONS.PERFECT_BALANCE;\n        this.buffStatus = STATUSES.PERFECT_BALANCE;\n        this.expectedGCDs = {\n            expectedPerWindow: 5,\n            suggestionContent: <Trans id=\"mnk.pb.suggestions.missedgcd.content\">\n\t\t\tTry to land 5 GCDs in GL3, or 6 GCDs in GL4, during every <ActionLink {...ACTIONS.PERFECT_BALANCE}/> window. If you cannot do this with full uptime and no clipping, consider adjusting your gearset for more Skill Speed.\n\t\t</Trans>,\n            severityTiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                3: SEVERITY.MAJOR,\n            },\n        };\n        this.trackedBadActions = {\n            icon: ACTIONS.PERFECT_BALANCE.icon,\n            actions: [\n                {\n                    action: ACTIONS.FORM_SHIFT,\n                    expectedPerWindow: 0,\n                },\n                {\n                    action: ACTIONS.MEDITATION,\n                    expectedPerWindow: 0,\n                },\n            ],\n            suggestionContent: <Trans id=\"mnk.pb.suggestions.trackedBadActions.content\">\n\t\t\tUsing <ActionLink {...ACTIONS.FORM_SHIFT}/> and <ActionLink {...ACTIONS.MEDITATION}/> inside of <ActionLink {...ACTIONS.PERFECT_BALANCE}/> does no damage and does not change your Form.\n\t\t</Trans>,\n            severityTiers: {\n                1: SEVERITY.MEDIUM,\n            },\n        };\n    }\n    changeExpectedGCDsClassLogic(buffWindow) {\n        // If we changed Fist, we know we don't have GL4 the whole way\n        if (buffWindow.getActionCountByIds(FISTS) > 0) {\n            return 0;\n        }\n        // For now let's go with if they were in GL4 at the start,\n        // since it less GCDs than expected implies a mistake like GL dropping\n        return this.gauge.getStacksAt(buffWindow.start) < MAX_FASTER ? 0 : 1;\n    }\n}\nPerfectBalance.handle = 'perfectBalance';\nPerfectBalance.title = t('mnk.pb.title') `Perfect Balance`;\nPerfectBalance.displayOrder = DISPLAY_ORDER.PERFECT_BALANCE;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Gauge)\n], PerfectBalance.prototype, \"gauge\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nclass Riddle {\n    constructor(start) {\n        this.clean = false;\n        this.start = start;\n    }\n}\nexport default class RiddleOfEarth extends Module {\n    constructor() {\n        super(...arguments);\n        this.history = [];\n    }\n    init() {\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.RIDDLE_OF_EARTH.id }, this.onGain);\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.EARTHS_REPLY.id }, this.onReply);\n        this.addHook('removebuff', { to: 'player', abilityId: STATUSES.RIDDLE_OF_EARTH.id }, this.onDrop);\n        this.addHook('complete', this.onComplete);\n    }\n    onGain(event) {\n        this.riddle = new Riddle(event.timestamp);\n    }\n    onReply(event) {\n        if (this.riddle) {\n            this.riddle.clean = true;\n        }\n    }\n    onDrop(event) {\n        this.stopAndSave(event.timestamp);\n    }\n    onComplete() {\n        // Close up rushed RoE\n        if (this.riddle) {\n            this.stopAndSave();\n        }\n        // Count missed saves\n        const missedEarth = this.history.filter(earth => !earth.clean).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.RIDDLE_OF_EARTH.icon,\n            content: <Trans id=\"mnk.roe.suggestions.missed.content\">\n\t\t\t\tAvoid using <ActionLink {...ACTIONS.RIDDLE_OF_EARTH}/> when you won't take any damage.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n            },\n            value: missedEarth,\n            why: <Trans id=\"mnk.roe.suggestions.missed.why\">\n\t\t\t\t<ActionLink {...ACTIONS.RIDDLE_OF_EARTH}/> was used <Plural value={missedEarth} one=\"# time\" other=\"# times\"/> without triggering <StatusLink {...STATUSES.EARTHS_REPLY}/>.\n\t\t\t</Trans>,\n        }));\n    }\n    stopAndSave(endTime = this.parser.currentTimestamp) {\n        if (this.riddle) {\n            this.history.push({ ...this.riddle, end: endTime });\n            this.riddle = undefined;\n        }\n    }\n}\nRiddleOfEarth.handle = 'riddleOfEarth';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], RiddleOfEarth.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport Fists, { FISTLESS } from './Fists';\nconst ROF_DURATION = STATUSES.RIDDLE_OF_FIRE.duration * 1000;\n// Expected under Fists of Wind with optimal play\nconst EXPECTED_GCDS = 11;\nconst EXPECTED_ELIXIR_FIELDS = 1;\n// technically they can get 2 and should as much as possible, but don't ding for it in case it's for mechanics\nconst EXPECTED_SHOULDER_TACKLES = 1;\nconst SUGGESTION_TIERS = {\n    1: SEVERITY.MINOR,\n    3: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nclass Riddle {\n    constructor(start) {\n        this.active = false;\n        this.rushing = false;\n        this.gcdsInEachFist = {\n            [FISTLESS]: 0,\n            [STATUSES.FISTS_OF_EARTH.id]: 0,\n            [STATUSES.FISTS_OF_FIRE.id]: 0,\n            [STATUSES.FISTS_OF_WIND.id]: 0,\n        };\n        this.expectedGcds = EXPECTED_GCDS; // Baseline GL4 RoFs are 11 GCDs\n        this.start = start;\n        this.casts = [];\n    }\n    get gcds() {\n        return this.casts.filter(event => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            return action && action.onGcd;\n        }).length;\n    }\n    get elixirFields() {\n        return this.casts.filter(event => event.ability.guid === ACTIONS.ELIXIR_FIELD.id).length;\n    }\n    get tackles() {\n        return this.casts.filter(event => event.ability.guid === ACTIONS.SHOULDER_TACKLE.id).length;\n    }\n    gcdsByFist(fistId) {\n        return this.gcdsInEachFist[fistId];\n    }\n}\nexport default class RiddleOfFire extends Module {\n    constructor() {\n        super(...arguments);\n        this.history = [];\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.RIDDLE_OF_FIRE.id }, this.onDrop);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid); // should be Action type\n        if (!action) {\n            return;\n        }\n        if (action.id === ACTIONS.RIDDLE_OF_FIRE.id) {\n            this.riddle = new Riddle(event.timestamp);\n            this.riddle.active = true;\n            this.riddle.rushing = ROF_DURATION >= this.parser.fight.end_time - event.timestamp;\n            return;\n        }\n        // MNK mentors want the oGCDs :angryeyes:\n        if (this.riddle && this.riddle.active) {\n            this.riddle.casts.push(event);\n            if (action.onGcd) {\n                const activeFist = this.fists.getActiveFist();\n                this.riddle.gcdsInEachFist[activeFist.id]++;\n            }\n        }\n    }\n    onDrop(event) {\n        this.stopAndSave(event.timestamp);\n    }\n    onComplete() {\n        // Close up if RoF was active at the end of the fight\n        if (this.riddle && this.riddle.active) {\n            this.stopAndSave();\n        }\n        const nonRushedRiddles = this.history\n            .filter(riddle => !riddle.rushing);\n        // This could be redundant with GCDs spent not under Wind, but according to Tiff you should only\n        // be in FoF during a rushed Riddle, so I'm not too worried about it.\n        const droppedGcds = (nonRushedRiddles.length * EXPECTED_GCDS) // opener Riddle has 11 GCDs\n            - nonRushedRiddles.reduce((sum, riddle) => sum + riddle.gcds, 0);\n        const droppedElixirFields = (nonRushedRiddles.length) // should be 1 per Riddle\n            - nonRushedRiddles.reduce((sum, riddle) => sum + riddle.elixirFields, 0);\n        // Keep these seperate for different suggestions; our baseline is 1 charge, but the MNK mentors\n        // want a minor suggestion to track Riddles that only had 1 Tackle\n        const riddlesWithOneTackle = nonRushedRiddles.filter(riddle => riddle.tackles === 1).length;\n        const riddlesWithZeroTackles = nonRushedRiddles.filter(riddle => riddle.tackles === 0).length;\n        const droppedExpectedOgcds = droppedElixirFields + riddlesWithZeroTackles;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.RIDDLE_OF_FIRE.icon,\n            content: <Trans id=\"mnk.rof.suggestions.gcd.content\">\n\t\t\t\tAim to hit {EXPECTED_GCDS - 2} GCDs under GL3, or {EXPECTED_GCDS} GCDs under GL4, during each <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/> window.\n\t\t\t</Trans>,\n            tiers: SUGGESTION_TIERS,\n            value: droppedGcds,\n            why: <Trans id=\"mnk.rof.suggestions.gcd.why\">\n\t\t\t\t<Plural value={droppedGcds} one=\"# possible GCD was\" other=\"# possible GCDs were\"/> missed during <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.ELIXIR_FIELD.icon,\n            content: <Trans id=\"mnk.rof.suggestions.ogcd.content\">\n\t\t\t\tAim to use 1 <ActionLink {...ACTIONS.ELIXIR_FIELD}/> and at least 1 <ActionLink {...ACTIONS.SHOULDER_TACKLE}/>\n\t\t\t\tduring each <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/>.\n\t\t\t</Trans>,\n            tiers: SUGGESTION_TIERS,\n            value: droppedExpectedOgcds,\n            why: <Trans id=\"mnk.rof.suggestions.ogcd.why\">\n\t\t\t\t<Plural value={droppedExpectedOgcds} one=\"# expected oGCD was\" other=\"# expected oGCDs were\"/> dropped\n\t\t\t\tduring <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SHOULDER_TACKLE.icon,\n            content: <Trans id=\"mnk.rof.suggestions.tackle.content\">\n\t\t\t\tTry to use both charges of <ActionLink {...ACTIONS.SHOULDER_TACKLE}/> during <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/>,\n\t\t\t\tunless you need to hold a charge for strategic purposes.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n            },\n            value: riddlesWithOneTackle,\n            why: <Trans id=\"mnk.rof.suggestions.tackle.why\">\n\t\t\t\t<Plural value={riddlesWithOneTackle} one=\"# use\" other=\"# uses\"/> of <StatusLink {...STATUSES.RIDDLE_OF_FIRE}/> contained\n\t\t\t\tonly one use of <ActionLink {...ACTIONS.SHOULDER_TACKLE}/>.\n\t\t\t</Trans>,\n        }));\n    }\n    stopAndSave(endTime = this.parser.currentTimestamp) {\n        if (this.riddle && this.riddle.active) {\n            // Check for any GCDs spent outside of Fists of Wind\n            // If the first RoF GCD is out of FoW (should be Snap/Demo/RB), they'll lose 1 GCD so we set 10\n            // If more than 1 GCD is out of FoW, they'll lose 2 so we set 9\n            const windlessGcds = this.riddle.gcdsByFist(FISTLESS) +\n                this.riddle.gcdsByFist(STATUSES.FISTS_OF_EARTH.id) +\n                this.riddle.gcdsByFist(STATUSES.FISTS_OF_FIRE.id);\n            if (windlessGcds > 0) {\n                this.riddle.expectedGcds = EXPECTED_GCDS - Math.min(2, windlessGcds);\n            }\n            this.riddle.active = false;\n            this.riddle.end = endTime;\n            this.history.push(this.riddle);\n        }\n    }\n    output() {\n        return <RotationTable targets={[\n            {\n                header: <Trans id=\"mnk.rof.table.header.gcds\">GCDs</Trans>,\n                accessor: 'gcds',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.ELIXIR_FIELD}/>,\n                accessor: 'elixirField',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.SHOULDER_TACKLE}/>,\n                accessor: 'shoulderTackle',\n            },\n        ]} data={this.history\n            .map(riddle => ({\n            start: riddle.start - this.parser.fight.start_time,\n            end: riddle.end != null ?\n                riddle.end - this.parser.fight.start_time\n                : riddle.start - this.parser.fight.start_time,\n            targetsData: {\n                gcds: {\n                    actual: riddle.gcds,\n                    expected: riddle.expectedGcds,\n                },\n                elixirField: {\n                    actual: riddle.elixirFields,\n                    expected: EXPECTED_ELIXIR_FIELDS,\n                },\n                shoulderTackle: {\n                    actual: riddle.tackles,\n                    expected: EXPECTED_SHOULDER_TACKLES,\n                },\n            },\n            rotation: riddle.casts,\n        }))} onGoto={this.timeline.show}/>;\n    }\n}\nRiddleOfFire.handle = 'riddleoffire';\nRiddleOfFire.title = t('mnk.rof.title') `Riddle of Fire`;\nRiddleOfFire.displayOrder = DISPLAY_ORDER.RIDDLE_OF_FIRE;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Fists)\n], RiddleOfFire.prototype, \"fists\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], RiddleOfFire.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], RiddleOfFire.prototype, \"timeline\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { dependency } from 'parser/core/Module';\nimport CoreSpeedmod from 'parser/core/modules/Speedmod';\nimport Gauge from './Gauge';\nconst SPEED_INCREASE_PER_STACK = 5;\nexport default class Speedmod extends CoreSpeedmod {\n    getJobAdditionalSpeedbuffScalar(event) {\n        return (100 - (this.gauge.getStacksAt(event.timestamp) * SPEED_INCREASE_PER_STACK)) / 100;\n    }\n}\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Gauge)\n], Speedmod.prototype, \"gauge\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport Combatants from 'parser/core/modules/Combatants';\nimport { FFLogsEventNormaliser } from 'parser/core/modules/FFLogsEventNormaliser';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst LEAD_BOOT_POTENCY = 300;\n// Typically a player with lag can derp positional in opener, this usually happens 2 times per fight.\n// With 60s CD on RoE for a 30s no positionals buff, and True North every 45s tho, this shouldn't be\n// an issue even if the player is lagging worse than the author of this comment.\nconst CRIT_BOOT_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    3: SEVERITY.MAJOR,\n};\n// 3 is pretty much \"you ruined a Perfect Balance you turkey\".\nconst WEAK_BOOT_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    4: SEVERITY.MAJOR,\n};\nclass Boot {\n    constructor(crit, weak, timestamp) {\n        this.crit = crit;\n        this.weak = weak;\n        this.timestamp = timestamp;\n    }\n}\nexport default class Steppies extends Module {\n    constructor() {\n        super(...arguments);\n        this.steppies = [];\n    }\n    init() {\n        this.addHook('init', () => {\n            this.addHook(this.fflogsEvents.damageEventName, { by: 'player', abilityId: ACTIONS.BOOTSHINE.id }, this.onDamage);\n        });\n        this.addHook('complete', this.onComplete);\n    }\n    onDamage(event) {\n        const boot = new Boot(event.criticalHit, this.combatants.selected.hasStatus(STATUSES.LEADEN_FIST.id), event.timestamp);\n        this.steppies.push(boot);\n    }\n    onComplete() {\n        this.checklist.add(new Rule({\n            name: <Trans id=\"mnk.steppies.checklist.name\">Buff Bootshine</Trans>,\n            description: <Trans id=\"mnk.steppies.checklist.description\">\n\t\t\t\t<ActionLink {...ACTIONS.BOOTSHINE}/> is your strongest form GCD when you buff it by using <ActionLink {...ACTIONS.DRAGON_KICK}/> beforehand.\n\t\t\t</Trans>,\n            displayOrder: DISPLAY_ORDER.DRAGON_KICK,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"mnk.steppies.checklist.requirement.name\"><StatusLink {...STATUSES.LEADEN_FIST}/> buff rate</Trans>,\n                    percent: () => this.getLeadenPercent(this.steppies),\n                }),\n            ],\n            target: 100,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.DRAGON_KICK.icon,\n            content: <Trans id=\"mnk.steppies.suggestions.dragon_kick.content\">\n\t\t\t\tAvoid unbuffed <ActionLink {...ACTIONS.BOOTSHINE}/> by using <ActionLink {...ACTIONS.DRAGON_KICK}/> before it.\n\t\t\t</Trans>,\n            why: <Trans id=\"mnk.steppies.suggestions.dragon_kick.why\">\n\t\t\t\t{this.getUnbuffedCount(this.steppies) * (LEAD_BOOT_POTENCY - ACTIONS.BOOTSHINE.potency)} potency lost to missing <StatusLink {...STATUSES.LEADEN_FIST}/> buff {this.getUnbuffedCount(this.steppies)} times.\n\t\t\t</Trans>,\n            tiers: WEAK_BOOT_SEVERITY,\n            value: this.getUnbuffedCount(this.steppies),\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.BOOTSHINE.icon,\n            content: <Trans id=\"mnk.steppies.suggestions.bootshine.content\">\n\t\t\t\tTry to always hit your positional on <ActionLink {...ACTIONS.BOOTSHINE}/>. Between the guaranteed critical hit under <StatusLink {...STATUSES.OPO_OPO_FORM}/> and the potency buff from <StatusLink {...STATUSES.LEADEN_FIST}/>, this is essentially your strongest skill.\n\t\t\t</Trans>,\n            why: <Trans id=\"mnk.steppies.suggestions.bootshine.why\">\n\t\t\t\t<Plural value={this.getUncritCount(this.steppies)} one=\"# use of\" other=\"# uses of\"/> <ActionLink {...ACTIONS.BOOTSHINE}/> executed with incorrect position.\n\t\t\t</Trans>,\n            tiers: CRIT_BOOT_SEVERITY,\n            value: this.getUncritCount(this.steppies),\n        }));\n    }\n    getUnbuffedCount(boots) {\n        return boots.reduce((total, current) => current.weak ? total : total + 1, 0);\n    }\n    getUncritCount(boots) {\n        return boots.reduce((total, current) => current.crit ? total : total + 1, 0);\n    }\n    getLeadenPercent(boots) {\n        return 100 - (this.getUnbuffedCount(boots) / boots.length) * 100;\n    }\n}\nSteppies.handle = 'steppies';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], Steppies.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Steppies.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", FFLogsEventNormaliser)\n], Steppies.prototype, \"fflogsEvents\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Steppies.prototype, \"suggestions\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport Combatants from 'parser/core/modules/Combatants';\nimport Enemies from 'parser/core/modules/Enemies';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\n// Expected time to drop Twin in GL4 (basically part way thru previous GCD)\nconst TWIN_SNAKES_CYCLE_BUFFER = 3000;\n// Expected GCDs between TS in GL3 or lower\nconst TWIN_SNAKES_CYCLE_LENGTH = 5;\nclass TwinState {\n    constructor(timestamp) {\n        this.casts = [];\n        this.start = timestamp;\n    }\n    // Mainly here in case we care about oGCDs being unbuffed later\n    get gcds() {\n        return this.casts.filter(event => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            return action && action.onGcd;\n        }).length;\n    }\n}\nexport default class TwinSnakes extends Module {\n    constructor() {\n        super(...arguments);\n        this.history = [];\n        // Fury used without TS active\n        this.failedFury = 0;\n        // Clipping the duration, or dropping for more than TS itself\n        this.earlySnakes = 0;\n        this.lateSnakes = 0;\n        // Separate accounting from the window, to handle counting while TS is down\n        this.gcdsSinceTS = 0;\n    }\n    init() {\n        // Hook all GCDs so we can count GCDs in buff windows\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        // This gets weird because, we don't wanna penalise if it was from FPF...\n        this.addHook('applybuff', { to: 'player', abilityId: STATUSES.TWIN_SNAKES.id }, this.onGain);\n        this.addHook('refreshbuff', { to: 'player', abilityId: STATUSES.TWIN_SNAKES.id }, this.onRefresh);\n        this.addHook('removebuff', { to: 'player', abilityId: STATUSES.TWIN_SNAKES.id }, this.onDrop);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        // Only include GCDs\n        if (!action || !action.onGcd) {\n            return;\n        }\n        switch (action.id) {\n            // Ignore TS itself, plus Form Shift and maybe 6SS?\n            // We use gcdsSinceTS because we don't want to double count FPF\n            case (ACTIONS.TWIN_SNAKES.id):\n                if (this.twinSnake && !this.twinSnake.end && this.gcdsSinceTS < TWIN_SNAKES_CYCLE_LENGTH) {\n                    this.earlySnakes++;\n                }\n            // Ignore Form Shift, theres probably forced downtime so we expect TS to get weird anyway\n            case (ACTIONS.FORM_SHIFT):\n                break;\n            // Count FPF, but check if it's a bad one\n            case (ACTIONS.FOUR_POINT_FURY.id):\n                if (!this.combatants.selected.hasStatus(STATUSES.TWIN_SNAKES.id)) {\n                    this.failedFury++;\n                }\n            // Verify the window isn't closed, and count the GCDs\n            default:\n                if (this.twinSnake && !this.twinSnake.end) {\n                    this.twinSnake.casts.push(event);\n                }\n                this.gcdsSinceTS++;\n        }\n    }\n    // Only happens from TS itself\n    // This might be better checking if the GCD before it was buffed but ehh\n    onGain(event) {\n        if (this.twinSnake && this.twinSnake.end) {\n            const unbuffedGcds = this.gcdsSinceTS - this.twinSnake.gcds;\n            const unbuffedTime = event.timestamp - this.twinSnake.end;\n            // TODO: some kind of downtime check, maybe a warning for non-GL4\n            if (unbuffedGcds > 1 || unbuffedTime > TWIN_SNAKES_CYCLE_BUFFER) {\n                this.lateSnakes++;\n            }\n        }\n        // Start a new window\n        this.twinSnake = new TwinState(event.timestamp);\n        this.gcdsSinceTS = 0;\n    }\n    // Can be TS or FPF - just reset the GCD count\n    // This is ok even with the reduced duration from FPF provided user is in GL3/4\n    onRefresh() {\n        this.gcdsSinceTS = 0;\n    }\n    onDrop(event) {\n        this.stopAndSave(event.timestamp);\n    }\n    onComplete() {\n        // Close off the last window\n        this.stopAndSave(this.parser.fight.end_time);\n        // Calculate derped potency to early refreshes\n        const lostTruePotency = this.earlySnakes * (ACTIONS.TRUE_STRIKE.potency - ACTIONS.TWIN_SNAKES.potency);\n        this.checklist.add(new Rule({\n            name: <Trans id=\"mnk.twinsnakes.checklist.name\">Keep Twin Snakes up</Trans>,\n            description: <Trans id=\"mnk.twinsnakes.checklist.description\">Twin Snakes is an easy 10% buff to your DPS.</Trans>,\n            displayOrder: DISPLAY_ORDER.TWIN_SNAKES,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"mnk.twinsnakes.checklist.requirement.name\"><ActionLink {...ACTIONS.TWIN_SNAKES}/> uptime</Trans>,\n                    percent: () => this.getBuffUptimePercent(STATUSES.TWIN_SNAKES.id),\n                }),\n            ],\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.TWIN_SNAKES.icon,\n            content: <Trans id=\"mnk.twinsnakes.suggestions.early.content\">\n\t\t\t\tAvoid refreshing <ActionLink {...ACTIONS.TWIN_SNAKES}/> signficantly before its expiration as you're losing uses of the higher potency <ActionLink {...ACTIONS.TRUE_STRIKE}/>.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.earlySnakes,\n            why: <Trans id=\"mnk.twinsnakes.suggestions.early.why\">\n\t\t\t\t{lostTruePotency} potency lost to <Plural value={this.earlySnakes} one=\"# early refresh\" other=\"# early refreshes\"/>.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.TWIN_SNAKES.icon,\n            content: <Trans id=\"mnk.twinsnakes.suggestions.late.content\">\n\t\t\t\tRefreshing <ActionLink {...ACTIONS.TWIN_SNAKES}/> on every third combo is a potency gain but only when you don't drop the buff for the GCD before it.\n\t\t\t\tThis only works under 4 stacks of <StatusLink {...STATUSES.GREASED_LIGHTNING}/>.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.lateSnakes,\n            why: <Trans id=\"mnk.twinsnakes.suggestions.late.why\">\n\t\t\t\t<Plural value={this.lateSnakes} one=\"# GCD was\" other=\"# GCDs were\"/> lost to delayed refreshing.\n\t\t\t</Trans>,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FOUR_POINT_FURY.icon,\n            content: <Trans id=\"mnk.twinsnakes.suggestions.toocalm.content\">\n\t\t\t\tTry to get <StatusLink {...STATUSES.TWIN_SNAKES}/> up before using <ActionLink {...ACTIONS.FOUR_POINT_FURY}/> to take advantage of its free refresh.\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n            },\n            value: this.failedFury,\n            why: <Trans id=\"mnk.twinsnakes.suggestions.toocalm.why\">\n\t\t\t\t<Plural value={this.failedFury} one=\"# use\" other=\"# uses\"/> of <ActionLink {...ACTIONS.FOUR_POINT_FURY}/> failed to refresh <StatusLink {...STATUSES.TWIN_SNAKES}/>.\n\t\t\t</Trans>,\n        }));\n    }\n    stopAndSave(endTime = this.parser.currentTimestamp) {\n        if (this.twinSnake) {\n            this.twinSnake.end = endTime;\n            this.history.push(this.twinSnake);\n        }\n    }\n    getBuffUptimePercent(statusId) {\n        const statusUptime = this.combatants.getStatusUptime(statusId, this.parser.player.id);\n        const fightUptime = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightUptime) * 100;\n    }\n}\nTwinSnakes.handle = 'twinsnakes';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], TwinSnakes.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], TwinSnakes.prototype, \"combatants\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Enemies)\n], TwinSnakes.prototype, \"enemies\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability)\n], TwinSnakes.prototype, \"invuln\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], TwinSnakes.prototype, \"suggestions\", void 0);\n","import ACTIONS from 'data/ACTIONS';\nimport CoreWeaving from 'parser/core/modules/Weaving';\nconst SSS_MAX_WEAVES = 4;\nexport default class Weaving extends CoreWeaving {\n    isBadWeave(weave /*, maxWeaves*/) {\n        if (weave.leadingGcdEvent &&\n            weave.leadingGcdEvent.ability &&\n            weave.leadingGcdEvent.ability.guid === ACTIONS.SIX_SIDED_STAR.id) {\n            return weave.weaves.length > SSS_MAX_WEAVES;\n        }\n        return super.isBadWeave(weave);\n    }\n}\n","import Cooldowns from './Cooldowns';\nimport Demolish from './Demolish';\nimport Fists from './Fists';\nimport Forms from './Forms';\nimport Gauge from './Gauge';\nimport MnkAoE from './MnkAoE';\nimport OGCDDowntime from './OGCDDowntime';\nimport PerfectBalance from './PerfectBalance';\nimport RiddleOfEarth from './RiddleOfEarth';\nimport RiddleOfFire from './RiddleOfFire';\nimport Speedmod from './Speedmod';\nimport Steppies from './Steppies';\nimport TwinSnakes from './TwinSnakes';\nimport Weaving from './Weaving';\nexport default [\n    Cooldowns,\n    Demolish,\n    Fists,\n    Forms,\n    Gauge,\n    MnkAoE,\n    OGCDDowntime,\n    PerfectBalance,\n    RiddleOfEarth,\n    RiddleOfFire,\n    Speedmod,\n    Steppies,\n    TwinSnakes,\n    Weaving,\n];\n"],"sourceRoot":""}
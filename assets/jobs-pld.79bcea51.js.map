{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/Combatant.js","webpack:///./src/parser/core/modules/Combatants.js","webpack:///./src/parser/core/modules/Cooldowns.js","webpack:///./src/parser/core/modules/Combos.tsx","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/core/modules/Statuses.js","webpack:///./src/parser/core/modules/DoTs.js","webpack:///./src/parser/jobs/pld/modules/Combos.tsx","webpack:///./src/parser/jobs/pld/modules/Cooldowns.tsx","webpack:///./src/parser/jobs/pld/modules/FightOrFlight.tsx","webpack:///./src/parser/jobs/pld/modules/Goring.tsx","webpack:///./src/parser/jobs/pld/modules/OGCDDowntime.tsx","webpack:///./src/parser/jobs/pld/modules/Requiescat.tsx","webpack:///./src/parser/jobs/pld/modules/Statuses.js","webpack:///./src/parser/jobs/pld/modules/Weaving.tsx","webpack:///./src/parser/jobs/pld/modules/index.tsx"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","Combatant","Entity","constructor","parser","info","super","name","type","guid","Combatants","Entities","arguments","_players","getEntities","getEntity","actorId","player","report","friendlies","find","handle","Cooldowns","Module","_cooldownGroups","_currentAction","_cooldowns","_groups","actions","_buildGroups","cooldownOrder","addHook","by","_onBeginCast","_onCast","_onComplete","groups","order","length","action","getAction","_buildGroup","content","group","merge","forEach","nestedGroups","opts","ItemGroup","showNested","timeline","addGroup","event","ability","cooldown","startCooldown","cooldownGroup","startCooldownGroup","finishingCast","Object","keys","actionId","_addToTimeline","parseInt","cd","current","history","push","onGcd","use","shared","addItem","Item","timestamp","fight","start_time","src","alt","getCooldown","originActionId","filter","sharedCooldown","currentFightDuration","currentTimestamp","resetCooldown","invulnTime","reduceCooldown","reduction","setInvulnTime","previousEndTimestamp","previousCooldown","isFirst","downtime","getDowntime","getCooldownRemaining","getTimeOnCooldown","considerInvulnTime","extension","reduce","time","status","getAdjustedTimeOnCooldown","duration","maximumDuration","dependencies","DEFAULT_GCD","GCD_TIMEOUT_MILLIS","ISSUE_TYPENAMES","uncomboed","combobreak","failedcombo","Combos","lastGcdTime","currentComboChain","issues","init","onCast","onComplete","lastComboEvent","issue","fabricateComboEvent","combo","fabricateEvent","recordBrokenCombo","context","isAllowableComboBreak","recordUncomboedGcd","recordFailedCombo","checkCombo","lastAction","from","Array","isArray","includes","breaksCombo","successfulHit","addJobSpecificSuggestions","comboBreakers","uncomboedGcds","suggestions","add","TieredSuggestion","suggestionIcon","tiers","1","SEVERITY","MINOR","2","MEDIUM","4","MAJOR","value","why","output","startTime","sort","a","b","completeContext","startEvent","endEvent","startAction","endAction","reason","whiteSpace","show","title","displayOrder","DISPLAY_ORDER","COMBOS","__decorate","dependency","__metadata","Data","prototype","Suggestions","Timeline","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","2.5","WEAVING_SEVERITY","5","Weaving","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","autoAttack","isOgcd","_saveIfBad","badWeaves","href","scrollTo","message","leadingGcdEvent","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","maxWeaves","weaveCount","isUntargetable","castTime","forEvent","closest","matchClosestLower","speedmod","get","gcdLength","gcd","getEstimate","panels","item","formatTimestamp","exclusive","styled","fluid","STATUS_APPLY_ON_PARTY_THRESHOLD_MILLISECONDS","Statuses","_statuses","_statusToActionMap","_actionToMergeNameMap","byFilter","pets","p","_onApply","_onRefresh","_onRemove","cooldowns","ac","values","statusesApplied","statusKey","statuses","_isStatusAppliedToPet","_addStatus","_endPrevStatus","getStatus","statusEntry","prev","usages","some","it","Math","abs","_createGroupForStatus","st","stid","statusesStackMapping","attachToGroup","gcdGroupId","friendlyPets","targetID","DEFAULT_DURATION_MILLIS","DoTs","_lastApplication","_clip","_statusDuration","statusesToTrack","statusId","hasOwnProperty","console","warn","abilityId","_onDotApply","excludeApplication","addChecklistRules","addClippingSuggestions","clip","applicationKey","targetInstance","lastApplication","getInvulnerableUptime","max","getUptimePercent","enemies","getStatusUptime","fightDuration","getClippingAmount","fightDurationMillis","round","CoreCombos","ACTIONS","ROYAL_AUTHORITY","CoreCooldowns","FIGHT_OR_FLIGHT","REQUIESCAT","SPIRITS_WITHIN","CIRCLE_OF_SCORN","INTERVENE","SHELTRON","INTERVENTION","HALLOWED_GROUND","SENTINEL","RAMPART","ARMS_LENGTH","PASSAGE_OF_ARMS","DIVINE_VEIL","REPRISAL","COVER","PROVOKE","SHIRK","INTERJECT","LOW_BLOW","SEVERETIES","MISSED_OGCDS","8","MISSED_GORING","MISSED_GCD","GORING_CLIP","CONSTANTS","GORING","MINIMUM_DISTANCE","EXPECTED","GCD","FOF_DURATION_MILLIS","STATUSES","FightOrFlightState","lastGoringGcd","gcdCounter","goringCounter","circleOfScornCounter","spiritsWithinCounter","interveneCounter","isRushed","FightOrFlightErrorResult","missedGcds","missedGorings","missedSpiritWithins","missedCircleOfScorns","missedIntervenes","goringTooCloseCounter","FightOrFlight","fofState","fofRotations","fofErrorResult","to","onRemoveFightOrFlight","ATTACK","endOfWindow","end_time","isInvulnerable","getDataBy","GORING_BLADE","missedOgcds","severity","countAbility","sum","countGCDs","showName","ts","gcds","spiritsWithin","circleOfScorn","intervene","goring","Invulnerability","SEVERITIES","CLIPPING","2500","5000","10000","Goring","checklist","Rule","description","requirements","Requirement","percent","Checklist","ALLOWED_DOWNTIME_FOF","ALLOWED_DOWNTIME_REQ","FIRST_USE_OFFSET_FOF","FIRST_USE_OFFSET_REQ","OGCDDowntime","CooldownDowntime","trackedCds","allowedAverageDowntime","firstUseOffset","MISSED_CASTS","MISSED_BUFF_REQUIESCAT","HOLY_SPIRIT","CONFITEOR","HOLY_SPIRIT_AND_CIRCLE_IDS","HOLY_CIRCLE","REQUIESCAT_DURATION_MILLIS","RequiescatState","hasAscociatedBuff","isRushing","Requiescat","requiescats","onApplyRequiescat","onRemoveRequiescat","reqState","reqEnd","isBossInvulnBeforeEnd","lastRequiescat","missedCasts","requiescat","holySpirits","confiteors","missedRequiescatBuffs","holySpirit","confiteor","CoreStatuses","DIVINE_VEIL_PROC","SPELLS","CLEMENCY","CoreWeaving","combatants","selected","hasStatus"],"mappings":"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","file":"assets/jobs-pld.79bcea51.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import Entity from './Entity';\n// This is basically a copy of Enemy - XIV doesn't really have as much on Combatants as WoW.\n// TODO: Should I just merge all this crap into the Entity handlers and call it a day?\nexport default class Combatant extends Entity {\n    constructor(parser, info) {\n        super(parser);\n        this.info = null;\n        this.info = info;\n    }\n    get name() { return this.info.name; }\n    get type() { return this.info.type; }\n    get guid() { return this.info.guid; }\n    get id() { return this.info.id; }\n}\n","import Entities from './Entities';\nimport Combatant from '../Combatant';\nexport default class Combatants extends Entities {\n    constructor() {\n        super(...arguments);\n        this._players = {};\n    }\n    getEntities() {\n        return this._players;\n    }\n    getEntity(actorId) {\n        let player = this._players[actorId];\n        if (!player) {\n            const info = this.parser.report.friendlies.find(player => player.id === actorId);\n            if (!info) {\n                return null;\n            }\n            this._players[actorId] = player = new Combatant(this.parser, info);\n        }\n        return player;\n    }\n    get selected() {\n        return this.getEntity(this.parser.player.id);\n    }\n}\nCombatants.handle = 'combatants';\n","import _ from 'lodash';\nimport Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\n// Track the cooldowns on actions and shit\nexport default class Cooldowns extends Module {\n    constructor(...args) {\n        super(...args);\n        this._cooldownGroups = {};\n        this._currentAction = null;\n        this._cooldowns = {};\n        this._groups = {};\n        this._cooldownGroups = _.groupBy(this.data.actions, 'cooldownGroup');\n        // Pre-build groups for actions explicitly set by subclasses\n        this._buildGroups(this.constructor.cooldownOrder);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _buildGroups(groups) {\n        // If there's no groups, noop\n        if (!groups) {\n            return;\n        }\n        const ids = groups.map((data, i) => {\n            const order = -(groups.length - i);\n            // If it's just an action id, build a group for it and stop\n            if (typeof data === 'number') {\n                const action = this.data.getAction(data);\n                this._buildGroup({\n                    id: data,\n                    content: action && action.name,\n                    order,\n                });\n                return data;\n            }\n            // Build the base group\n            const group = this._buildGroup({\n                id: data.name,\n                content: data.name,\n                order,\n            });\n            if (data.merge) {\n                // If it's a merge group, we only need to register our group for each of the IDs\n                data.actions.forEach(id => {\n                    this._groups[id] = group;\n                });\n            }\n            else {\n                // Otherwise, build nested groups for each action\n                group.nestedGroups = this._buildGroups(data.actions);\n            }\n            return data.name;\n        });\n        return ids;\n    }\n    _buildGroup(opts) {\n        const group = new ItemGroup({ showNested: false, ...opts });\n        this.timeline.addGroup(group);\n        this._groups[opts.id] = group;\n        return group;\n    }\n    // cooldown starts at the beginning of the casttime\n    // (though 99% of CD based abilities have no cast time)\n    // TODO: Should I be tracking pet CDs too? I mean, contagion/radiant are a thing.\n    _onBeginCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        this._currentAction = action;\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        const finishingCast = this._currentAction && this._currentAction.id === action.id;\n        this._currentAction = null;\n        if (finishingCast) {\n            return;\n        }\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onComplete() {\n        Object.keys(this._cooldowns).forEach(actionId => {\n            this._addToTimeline(parseInt(actionId, 10));\n        });\n    }\n    _addToTimeline(actionId) {\n        const cd = this._cooldowns[actionId];\n        if (!cd) {\n            return false;\n        }\n        // Clean out any 'current' cooldowns into the history\n        if (cd.current) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        const action = this.data.getAction(actionId);\n        // If the action is on the GCD, GlobalCooldown will be managing its own group\n        if (!action || action.onGcd) {\n            return false;\n        }\n        // Ensure we've got a group for this item\n        if (!this._groups[actionId]) {\n            this._buildGroup({\n                id: actionId,\n                content: action.name,\n                order: actionId,\n            });\n        }\n        // Add CD info to the timeline\n        cd.history\n            .forEach(use => {\n            if (!use.shared) {\n                this._groups[actionId].addItem(new Item({\n                    type: 'background',\n                    start: use.timestamp - this.parser.fight.start_time,\n                    length: use.length,\n                    content: <img src={action.icon} alt={action.name}/>,\n                }));\n            }\n        });\n        return true;\n    }\n    getCooldown(actionId) {\n        return this._cooldowns[actionId] || {\n            current: null,\n            history: [],\n        };\n    }\n    startCooldownGroup(originActionId, cooldownGroup) {\n        const sharedCooldownActions = _.get(this._cooldownGroups, cooldownGroup, []);\n        sharedCooldownActions\n            .map(action => action.id)\n            .filter(id => id !== originActionId)\n            .forEach(id => this.startCooldown(id, true));\n    }\n    startCooldown(actionId, sharedCooldown = false) {\n        // TODO: handle shared CDs\n        const action = this.data.getAction(actionId);\n        if (!action) {\n            return;\n        }\n        // Get the current cooldown status, falling back to a new cooldown\n        const cd = this.getCooldown(actionId);\n        // If there's a current object, move it into the history\n        // TODO: handle errors on CD overlap\n        if (cd.current) {\n            const currentFightDuration = this.parser.currentTimestamp - this.parser.fight.start_time;\n            if (cd.current.timestamp < this.parser.fight.start_time && cd.current.length > currentFightDuration) {\n                // Pre-pull usage, reset the cooldown to prevent overlap on timeline since we don't know exactly when cooldown was used pre-pull\n                this.resetCooldown(actionId);\n            }\n            else {\n                cd.history.push(cd.current);\n            }\n        }\n        cd.current = {\n            timestamp: this.parser.currentTimestamp,\n            length: action.cooldown * 1000,\n            shared: sharedCooldown,\n            invulnTime: 0,\n        };\n        // Save the info back out (to ensure propagation if we've got a new info)\n        this._cooldowns[actionId] = cd;\n    }\n    reduceCooldown(actionId, reduction) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        // Check if current isn't current\n        if (cd.current && cd.current.timestamp + cd.current.length < currentTimestamp) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        // TODO: Do I need to warn if they're reducing cooldown on something _with_ no cooldown?\n        if (cd.current === null) {\n            return;\n        }\n        // Reduce the CD\n        cd.current.length -= reduction * 1000;\n        // If the reduction would have made it come off CD earlier than now, reset it - the extra time reduction should be lost.\n        if (cd.current.timestamp + cd.current.length < currentTimestamp) {\n            this.resetCooldown(actionId);\n        }\n    }\n    setInvulnTime(actionId) {\n        const cd = this.getCooldown(actionId);\n        let previousEndTimestamp = this.parser.fight.start_time;\n        let previousCooldown = {};\n        let isFirst = true;\n        for (const cooldown of cd.history) {\n            if (isFirst) {\n                previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n                isFirst = false;\n                previousCooldown = cooldown;\n            }\n            //We invuln time is the time the boss was invuln from when the CD came off CD and when it was next executed\n            previousCooldown.invulnTime = this.downtime.getDowntime(previousEndTimestamp, cooldown.timestamp);\n            previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n            previousCooldown = cooldown;\n        }\n    }\n    resetCooldown(actionId) {\n        const cd = this.getCooldown(actionId);\n        // If there's nothing running, we can just stop\n        // TODO: need to warn?\n        if (cd.current === null) {\n            return;\n        }\n        // Fix up the length\n        cd.current.length = this.parser.currentTimestamp - cd.current.timestamp;\n        // Move the CD into the history\n        cd.history.push(cd.current);\n        cd.current = null;\n    }\n    getCooldownRemaining(actionId) {\n        const current = this.getCooldown(actionId).current;\n        if (!current) {\n            return 0;\n        }\n        return current.length - (this.parser.currentTimestamp - current.timestamp);\n    }\n    // TODO: Should this be here?\n    getTimeOnCooldown(actionId, considerInvulnTime = false, extension = 0) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        if (considerInvulnTime) {\n            this.setInvulnTime(actionId);\n        }\n        else {\n            cd.history.map(cooldown => {\n                cooldown.invulnTime = 0;\n            });\n        }\n        return cd.history.reduce((time, status) => time + this.getAdjustedTimeOnCooldown(status, currentTimestamp, extension), cd.current ? this.getAdjustedTimeOnCooldown(cd.current, currentTimestamp, extension) : 0);\n    }\n    getAdjustedTimeOnCooldown(cooldown, currentTimestamp, extension) {\n        // Doesn't count time on CD outside the bounds of the current fight, it'll throw calcs off\n        // Add to the length of the cooldown any invuln time for the boss\n        // Additionally account for any extension the caller allowed to the CD Length\n        const duration = currentTimestamp - cooldown.timestamp;\n        const maximumDuration = cooldown.length + cooldown.invulnTime + extension;\n        return _.clamp(duration, 0, maximumDuration);\n    }\n    get used() {\n        return Object.keys(this._cooldowns);\n    }\n}\nCooldowns.handle = 'cooldowns';\nCooldowns.dependencies = [\n    'data',\n    'downtime',\n    'timeline',\n];\n// Array used to sort cooldowns in the timeline. Elements should be either IDs for\n// top-level groups, or objects of the format {name: string, actions: array} for\n// nested groups. Actions not specified here will be sorted by their ID below.\n// Check the NIN and SMN modules for examples.\nCooldowns.cooldownOrder = [];\n","// If you can make it through this entire file without hitting semantic saturation of the word \"combo\", hats off to you. IT DOESN'T LOOK REAL ANYMORE.\nimport { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport DISPLAY_ORDER from 'parser/core/modules/DISPLAY_ORDER';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nconst DEFAULT_GCD = 2.5;\nconst GCD_TIMEOUT_MILLIS = 15000;\nconst ISSUE_TYPENAMES = {\n    uncomboed: <Trans id=\"core.combos.issuetypenames.uncomboed\">Uncomboed</Trans>,\n    combobreak: <Trans id=\"core.combos.issuetypenames.combobreak\">Broken Combo</Trans>,\n    failedcombo: <Trans id=\"core.combos.issuetypenames.failed\">Missed or Invulnerable</Trans>,\n};\nexport default class Combos extends Module {\n    constructor() {\n        super(...arguments);\n        this.lastGcdTime = this.parser.fight.start_time;\n        this.currentComboChain = [];\n        this.issues = [];\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player' }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    get lastComboEvent() {\n        return _.last(this.currentComboChain) || null;\n    }\n    get lastAction() {\n        const lastComboEvent = this.lastComboEvent;\n        if (!lastComboEvent) {\n            return null;\n        }\n        return lastComboEvent.ability.guid;\n    }\n    get comboBreakers() {\n        return this.issues\n            .filter(issue => issue.type === 'combobreak')\n            .map(issue => issue.event);\n    }\n    get uncomboedGcds() {\n        return this.issues\n            .filter(issue => issue.type === 'uncomboed')\n            .map(issue => issue.event);\n    }\n    fabricateComboEvent(event) {\n        const combo = {\n            ...event,\n            type: 'combo',\n        };\n        delete combo.timestamp; // Since fabricateEvent adds that in anyway\n        this.parser.fabricateEvent(combo);\n    }\n    recordBrokenCombo(event, context) {\n        if (!this.isAllowableComboBreak(event, context)) {\n            this.issues.push({\n                type: 'combobreak',\n                event,\n                context,\n            });\n        }\n        this.currentComboChain = [];\n    }\n    recordUncomboedGcd(event) {\n        this.issues.push({\n            type: 'uncomboed',\n            event,\n            context: [],\n        });\n        this.currentComboChain = [];\n    }\n    recordFailedCombo(event, context) {\n        this.issues.push({\n            type: 'failedcombo',\n            event,\n            context,\n        });\n        this.currentComboChain = [];\n    }\n    /**\n     *\n     * @param combo\n     * @param event\n     * @return true if combo, false otherwise\n     */\n    checkCombo(combo /* Should be an Action type */, event) {\n        // Not in a combo\n        if (this.lastAction == null) {\n            // Combo starter, we good\n            if (combo.start) {\n                this.fabricateComboEvent(event);\n                return true;\n            }\n            // Combo action that isn't a starter, that's a paddlin'\n            if (combo.from) {\n                this.recordUncomboedGcd(event);\n                return false;\n            }\n        }\n        if (combo.start) {\n            // Broken combo - starting a new combo while in a current combo\n            this.recordBrokenCombo(event, this.currentComboChain);\n            return true; // Start a new combo\n        }\n        // Check if action continues existing combo\n        if (combo.from) {\n            const fromOptions = Array.isArray(combo.from) ? combo.from : [combo.from];\n            if (fromOptions.includes(this.lastAction)) {\n                // Combo continued correctly\n                this.fabricateComboEvent(event);\n                // If it's a finisher, reset the combo\n                return !combo.end;\n            }\n        }\n        // Action did not continue combo correctly and is not a new combo starter\n        this.recordBrokenCombo(event, this.currentComboChain);\n        return false;\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action) {\n            return;\n        }\n        // Only track GCDs that either progress or break combos so actions like Drill and Shadow Fang don't falsely extend the simulated combo timer\n        if (action.onGcd && (action.combo || action.breaksCombo)) {\n            if (event.timestamp - this.lastGcdTime > GCD_TIMEOUT_MILLIS) {\n                // If we've had enough downtime between GCDs to let the combo expire, reset the state so we don't count erroneous combo breaks\n                this.currentComboChain = [];\n            }\n            this.lastGcdTime = event.timestamp;\n        }\n        // If it's a combo action, run it through the combo checking logic\n        if (action.combo) {\n            if (!event.successfulHit) {\n                // Failed attacks break combo\n                this.recordFailedCombo(event, this.currentComboChain);\n                return;\n            }\n            const continueCombo = this.checkCombo(action.combo, event);\n            if (continueCombo) {\n                this.currentComboChain.push(event);\n            }\n            else {\n                this.currentComboChain = [];\n            }\n        }\n        if (action.breaksCombo && this.lastAction !== null) {\n            // Combo breaking action, that's a paddlin'\n            this.recordBrokenCombo(event, this.currentComboChain);\n        }\n    }\n    onComplete() {\n        if (this.addJobSpecificSuggestions(this.comboBreakers, this.uncomboedGcds)) {\n            return;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.constructor.suggestionIcon,\n            content: <Trans id=\"core.combos.content\">\n\t\t\t\t<p>Avoid breaking combos, as failing to complete combos costs you a significant amount of DPS and important secondary effects.</p>\n\t\t\t\t<p>Using a combo GCD at the wrong combo step, using non-combo GCDs while inside a combo, missing, or attacking a target that is invulnerable will cause your combo to break.</p>\n\t\t\t</Trans>,\n            tiers: {\n                1: SEVERITY.MINOR,\n                2: SEVERITY.MEDIUM,\n                4: SEVERITY.MAJOR,\n            },\n            value: this.issues.length,\n            why: <Plural id=\"core.combos.why\" value={this.issues.length} one=\"You misused # combo action.\" other=\"You misused # combo actions.\"/>,\n        }));\n    }\n    /**\n     * To be overridden by subclasses. This is called in _onComplete() and passed two arrays of event objects - one for events that\n     * broke combos, and one for combo GCDs used outside of combos. Subclassing modules can add job-specific suggestions based on\n     * what particular actions were misused and when in the fight.\n     * The overriding module should return true if the default suggestion is not wanted\n     */\n    addJobSpecificSuggestions(comboBreakers, uncomboedGcds) {\n        return false;\n    }\n    /**\n     * To be overridden by subclasses. This is called in recordBrokenCombo, and receives the event triggering the broken combo,\n     * and the context information for that break. Jobs can override this to indicate whether this broken combo is allowed. If so,\n     * the event and context will not be recorded, and the current combo will be cleared with no other side effects.\n     * Returning false will allow the break to be recorded, and displayed to the user\n     */\n    isAllowableComboBreak(event, context) {\n        return false;\n    }\n    output() {\n        if (this.issues.length <= 0) {\n            return false;\n        }\n        // Access Alias\n        const startTime = this.parser.fight.start_time;\n        const data = this.issues\n            .sort((a, b) => a.event.timestamp - b.event.timestamp)\n            .map(issue => {\n            const completeContext = [...(issue.context || []), issue.event];\n            const startEvent = _.first(completeContext);\n            const endEvent = _.last(completeContext);\n            const startAction = this.data.getAction(startEvent.ability.guid);\n            const endAction = this.data.getAction(endEvent.ability.guid);\n            return ({\n                start: startEvent.timestamp - startTime + (startAction?.cooldown ?? DEFAULT_GCD),\n                end: endEvent.timestamp - startTime + (endAction?.cooldown ?? DEFAULT_GCD),\n                rotation: completeContext,\n                notesMap: {\n                    reason: <span style={{ whiteSpace: 'nowrap' }}>{ISSUE_TYPENAMES[issue.type]}</span>,\n                },\n            });\n        });\n        return <RotationTable notes={[\n            {\n                header: <Trans id=\"core.combos.rotationtable.header.reason\">Reason</Trans>,\n                accessor: 'reason',\n            },\n        ]} data={data} onGoto={this.timeline.show}/>;\n    }\n}\nCombos.handle = 'combos';\nCombos.title = t('core.combos.title') `Combo Issues`;\nCombos.displayOrder = DISPLAY_ORDER.COMBOS;\n// This should be redefined by subclassing modules; the default is the basic 'Attack' icon\nCombos.suggestionIcon = 'https://xivapi.com/i/000000/000405.png';\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], Combos.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Combos.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Combos.prototype, \"timeline\", void 0);\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\nconst STATUS_APPLY_ON_PARTY_THRESHOLD_MILLISECONDS = 2 * 1000;\n// Track statuses applied by actions\nexport default class Statuses extends Module {\n    constructor(...args) {\n        super(...args);\n        this._statuses = {};\n        this._groups = {};\n        this._statusToActionMap = {};\n        this._actionToMergeNameMap = {};\n        const ids = [this.parser.player.id, ...this.parser.player.pets.map(p => p.id)];\n        const byFilter = { by: ids };\n        this.addHook('complete', this._onComplete);\n        this.addHook(['applybuff', 'applydebuff'], byFilter, this._onApply);\n        this.addHook(['refreshdebuff', 'refreshbuff'], byFilter, this._onRefresh);\n        this.addHook(['removebuff', 'removedebuff'], byFilter, this._onRemove);\n        this.cooldowns.constructor.cooldownOrder.forEach(cd => {\n            if (cd && typeof cd === 'object' && cd.merge) {\n                cd.actions.forEach(ac => {\n                    this._actionToMergeNameMap[ac] = cd.name;\n                });\n            }\n        });\n        // Map statuses to actions\n        Object.values(this.data.actions).forEach(action => {\n            if (!action.statusesApplied) {\n                return;\n            }\n            action.statusesApplied.forEach(statusKey => {\n                const status = this.data.statuses[statusKey];\n                this._statusToActionMap[status.id] = action;\n            });\n        });\n    }\n    _onApply(event) {\n        if (this._isStatusAppliedToPet(event)) {\n            return;\n        }\n        this._addStatus(event);\n    }\n    _onRefresh(event) {\n        if (this._isStatusAppliedToPet(event)) {\n            return;\n        }\n        this._endPrevStatus(event);\n        this._addStatus(event);\n    }\n    _onRemove(event) {\n        if (this._isStatusAppliedToPet(event)) {\n            return;\n        }\n        this._endPrevStatus(event);\n    }\n    _endPrevStatus(event) {\n        const status = this.data.getStatus(event.ability.guid);\n        if (!status) {\n            return;\n        }\n        const statusEntry = this._statuses[status.id];\n        if (statusEntry) {\n            const prev = statusEntry.usages[statusEntry.usages.length - 1];\n            if (!prev.end) {\n                prev.end = event.timestamp - this.parser.fight.start_time;\n            }\n        }\n    }\n    _addStatus(event) {\n        const status = this.data.getStatus(event.ability.guid);\n        if (!status) {\n            return;\n        }\n        let statusEntry = this._statuses[status.id];\n        if (!statusEntry) {\n            statusEntry = this._statuses[status.id] = {\n                status: status,\n                usages: [],\n            };\n        }\n        if (statusEntry.usages.some(it => {\n            const diff = Math.abs(event.timestamp - this.parser.fight.start_time - it.start);\n            return diff <= STATUS_APPLY_ON_PARTY_THRESHOLD_MILLISECONDS;\n        })) {\n            return;\n        }\n        statusEntry.usages.push({\n            start: event.timestamp - this.parser.fight.start_time,\n        });\n    }\n    _onComplete() {\n        Object.values(this._statuses).forEach(entry => {\n            const group = this._createGroupForStatus(entry.status);\n            if (!group) {\n                return;\n            }\n            entry.usages.forEach(st => {\n                group.addItem(new Item({\n                    type: 'background',\n                    start: st.start,\n                    end: st.end || st.start + entry.status.duration * 1000,\n                    content: <img src={entry.status.icon} alt={entry.status.name}/>,\n                }));\n            });\n        });\n    }\n    _createGroupForStatus(status) {\n        const stid = 'status-' + (this.constructor.statusesStackMapping[status.id] || status.id);\n        if (this._groups[stid]) {\n            return this._groups[stid];\n        }\n        // find action for status\n        const action = this._statusToActionMap[status.id];\n        if (!action) {\n            return undefined;\n        }\n        const group = new ItemGroup({\n            id: stid,\n            content: status.name,\n            showNested: false,\n        });\n        this._groups[stid] = group;\n        this.timeline.attachToGroup(action.onGcd ? this.gcd.gcdGroupId : (this._actionToMergeNameMap[action.id] || action.id), group);\n        return group;\n    }\n    _isStatusAppliedToPet(event) {\n        return (this.parser.report.friendlyPets.some(p => p.id === event.targetID));\n    }\n}\nStatuses.handle = 'statuses';\nStatuses.dependencies = [\n    'data',\n    'timeline',\n    'cooldowns',\n    'gcd',\n];\nStatuses.statusesStackMapping = {};\n","import Module from 'parser/core/Module';\n// Absurdly large fallback number, so missing duration properties will result in both a console warning and stupid suggestions\nconst DEFAULT_DURATION_MILLIS = 120000;\nexport default class DoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastApplication = {};\n        this._clip = {};\n        this._statusDuration = {};\n        // NOTE: All statuses submodules track should include a duration property, otherwise the results this produces will be very fucky\n        this.constructor.statusesToTrack.forEach(statusId => {\n            const status = this.data.getStatus(statusId);\n            if (!status) {\n                return;\n            }\n            if (!status.hasOwnProperty('duration')) {\n                console.warn(`statusId ${statusId} is missing a duration property`);\n                this._statusDuration[statusId] = DEFAULT_DURATION_MILLIS;\n            }\n            else {\n                this._statusDuration[statusId] = status.duration * 1000;\n            }\n        });\n        this.addHook(['applydebuff', 'refreshdebuff'], { by: 'player', abilityId: this.constructor.statusesToTrack }, this._onDotApply);\n        this.addHook('complete', this._onComplete);\n    }\n    // *** FUNCTIONS TO OVERRIDE *** //\n    excludeApplication() {\n        // To be overridden by submodules that want to exclude certain applications from clipping calculations (e.g. SMN when rushing)\n        return false;\n    }\n    addChecklistRules() {\n        // To be overridden by submodules to display the checklist rules for their job. This should be handled on a job-by-job\n        // basis rather than generically, since the description text isn't one-size-fits-all, and some jobs may be tracking\n        // more than just DoTs with this module (e.g. DRG's Disembowel).\n    }\n    // Allow Typescript overrides using the parameter\n    // eslint-disable-next-line no-unused-vars\n    addClippingSuggestions(clip) {\n        // To be overridden by submodules to display any clipping suggestions. This should also be handled on a job-by-job\n        // basis, since different jobs have different thresholds for what constitutes bad clipping with varying explanations\n        // for why.\n    }\n    // ***************************** //\n    _onDotApply(event) {\n        const statusId = event.ability.guid;\n        // Make sure we're tracking for this target\n        const applicationKey = `${event.targetID}|${event.targetInstance}`;\n        const lastApplication = this._lastApplication[applicationKey] = this._lastApplication[applicationKey] || {};\n        // If it's not been applied yet or should be excluded per job-specific logic (if any), set it and skip out\n        if (!lastApplication[statusId] || this.excludeApplication()) {\n            lastApplication[statusId] = event.timestamp;\n            return;\n        }\n        // Base clip calc\n        let clip = this._statusDuration[statusId] - (event.timestamp - lastApplication[statusId]);\n        // Remove any untargetable time from the clip - often want to hardcast after an invuln phase, but refresh w/ 3D shortly after.\n        clip -= this.invuln.getUntargetableUptime('all', event.timestamp - this._statusDuration[statusId], event.timestamp);\n        // Also remove invuln time in the future that casting later would just push dots into\n        // TODO: This relies on a full set of invuln data ahead of time. Can this be trusted?\n        clip -= this.invuln.getInvulnerableUptime('all', event.timestamp, event.timestamp + this._statusDuration[statusId] + clip);\n        // Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n        this._clip[statusId] = (this._clip[statusId] || 0) + Math.max(0, clip);\n        lastApplication[statusId] = event.timestamp;\n    }\n    _onComplete() {\n        this.addChecklistRules();\n        this.addClippingSuggestions(this._clip);\n    }\n    // These two functions are helpers for submodules and should be used but not overridden\n    getUptimePercent(statusId) {\n        const statusUptime = this.enemies.getStatusUptime(statusId);\n        const fightDuration = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightDuration) * 100;\n    }\n    getClippingAmount(statusId) {\n        // This normalises clipping as seconds clipped per minute, since some level of clipping is expected and we need tiers that work for both long and short fights\n        const fightDurationMillis = (this.parser.fightDuration - this.invuln.getInvulnerableUptime());\n        // eslint-disable-next-line no-magic-numbers\n        const clipSecsPerMin = Math.round((this._clip[statusId] * 60) / fightDurationMillis);\n        return clipSecsPerMin;\n    }\n}\nDoTs.handle = 'dots';\nDoTs.dependencies = [\n    'data',\n    'enemies',\n    'invuln',\n];\n// To be overriden by submodules with an array of status IDs to track\nDoTs.statusesToTrack = [];\n","import ACTIONS from 'data/ACTIONS';\nimport CoreCombos from 'parser/core/modules/Combos';\nexport default class Combos extends CoreCombos {\n}\n// Overrides\nCombos.suggestionIcon = ACTIONS.ROYAL_AUTHORITY.icon;\n","import ACTIONS from 'data/ACTIONS';\nimport CoreCooldowns from 'parser/core/modules/Cooldowns';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    // Buffs\n    ACTIONS.FIGHT_OR_FLIGHT.id,\n    ACTIONS.REQUIESCAT.id,\n    // oGCD Damage\n    ACTIONS.SPIRITS_WITHIN.id,\n    ACTIONS.CIRCLE_OF_SCORN.id,\n    ACTIONS.INTERVENE.id,\n    // Gauge Mitigation\n    ACTIONS.SHELTRON.id,\n    ACTIONS.INTERVENTION.id,\n    // Personal Mitigation\n    ACTIONS.HALLOWED_GROUND.id,\n    ACTIONS.SENTINEL.id,\n    ACTIONS.RAMPART.id,\n    // Personal Utility\n    ACTIONS.ARMS_LENGTH.id,\n    // Party Mitigation\n    ACTIONS.PASSAGE_OF_ARMS.id,\n    ACTIONS.DIVINE_VEIL.id,\n    ACTIONS.REPRISAL.id,\n    ACTIONS.COVER.id,\n    // Tank Utility\n    ACTIONS.PROVOKE.id,\n    ACTIONS.SHIRK.id,\n    // Disrupt Utility\n    ACTIONS.INTERJECT.id,\n    ACTIONS.LOW_BLOW.id,\n];\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { matchClosestLower } from 'utilities';\nconst SEVERETIES = {\n    MISSED_OGCDS: {\n        1: SEVERITY.MINOR,\n        4: SEVERITY.MEDIUM,\n        8: SEVERITY.MAJOR,\n    },\n    MISSED_GORING: {\n        1: SEVERITY.MINOR,\n        2: SEVERITY.MEDIUM,\n        4: SEVERITY.MAJOR,\n    },\n    MISSED_GCD: {\n        1: SEVERITY.MINOR,\n        2: SEVERITY.MEDIUM,\n        4: SEVERITY.MAJOR,\n    },\n    GORING_CLIP: {\n        1: SEVERITY.MINOR,\n        2: SEVERITY.MEDIUM,\n        4: SEVERITY.MAJOR,\n    },\n};\nconst CONSTANTS = {\n    GORING: {\n        MINIMUM_DISTANCE: 9,\n        EXPECTED: 2,\n    },\n    SPIRITS_WITHIN: {\n        EXPECTED: 1,\n    },\n    CIRCLE_OF_SCORN: {\n        EXPECTED: 1,\n    },\n    INTERVENE: {\n        EXPECTED: 1,\n    },\n    GCD: {\n        EXPECTED: 10,\n    },\n};\nconst FOF_DURATION_MILLIS = STATUSES.FIGHT_OR_FLIGHT.duration * 1000;\nclass FightOrFlightState {\n    constructor() {\n        this.start = null;\n        this.lastGoringGcd = null;\n        this.gcdCounter = 0;\n        this.goringCounter = 0;\n        this.circleOfScornCounter = 0;\n        this.spiritsWithinCounter = 0;\n        this.interveneCounter = 0;\n        this.isRushed = false;\n    }\n}\nclass FightOrFlightErrorResult {\n    constructor() {\n        this.missedGcds = 0;\n        this.missedGorings = 0;\n        this.missedSpiritWithins = 0;\n        this.missedCircleOfScorns = 0;\n        this.missedIntervenes = 0;\n        this.goringTooCloseCounter = 0;\n    }\n}\nexport default class FightOrFlight extends Module {\n    constructor() {\n        super(...arguments);\n        // Internal State Counters\n        // ToDo: Merge some of these, so instead of saving rotations, make the rotation part of FoFState, so we can reduce the error result out of the saved rotations\n        this.fofState = new FightOrFlightState();\n        this.fofRotations = {};\n        this.fofErrorResult = new FightOrFlightErrorResult();\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('removebuff', {\n            by: 'player',\n            to: 'player',\n            abilityId: [STATUSES.FIGHT_OR_FLIGHT.id],\n        }, this.onRemoveFightOrFlight);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const actionId = event.ability.guid;\n        if (actionId === ACTIONS.ATTACK.id) {\n            return;\n        }\n        if (actionId === ACTIONS.FIGHT_OR_FLIGHT.id) {\n            this.fofState.start = event.timestamp;\n            const endOfWindow = event.timestamp + FOF_DURATION_MILLIS;\n            this.fofState.isRushed = endOfWindow >= this.parser.fight.end_time\n                || this.invuln.isInvulnerable('all', endOfWindow)\n                || this.invuln.isUntargetable('all', endOfWindow);\n        }\n        if (this.fofState.start) {\n            const action = getDataBy(ACTIONS, 'id', actionId); // Should be an Action type\n            if (!action) {\n                return;\n            }\n            if (action.onGcd) {\n                this.fofState.gcdCounter++;\n            }\n            switch (actionId) {\n                case ACTIONS.GORING_BLADE.id:\n                    this.fofState.goringCounter++;\n                    if (this.fofState.lastGoringGcd !== null) {\n                        if (this.fofState.gcdCounter - this.fofState.lastGoringGcd < CONSTANTS.GORING.MINIMUM_DISTANCE\n                            && !this.fofState.isRushed) {\n                            this.fofErrorResult.goringTooCloseCounter++;\n                        }\n                    }\n                    this.fofState.lastGoringGcd = this.fofState.gcdCounter;\n                    break;\n                case ACTIONS.CIRCLE_OF_SCORN.id:\n                    this.fofState.circleOfScornCounter++;\n                    break;\n                case ACTIONS.SPIRITS_WITHIN.id:\n                    this.fofState.spiritsWithinCounter++;\n                    break;\n                case ACTIONS.INTERVENE.id:\n                    this.fofState.interveneCounter++;\n                    break;\n            }\n            if (!Array.isArray(this.fofRotations[this.fofState.start])) {\n                this.fofRotations[this.fofState.start] = [];\n            }\n            this.fofRotations[this.fofState.start].push(event);\n        }\n    }\n    onRemoveFightOrFlight() {\n        if (!this.fofState.isRushed) {\n            this.fofErrorResult.missedGcds += Math.max(0, CONSTANTS.GCD.EXPECTED - this.fofState.gcdCounter);\n            this.fofErrorResult.missedGorings += Math.max(0, CONSTANTS.GORING.EXPECTED - this.fofState.goringCounter);\n            this.fofErrorResult.missedSpiritWithins += Math.max(0, CONSTANTS.SPIRITS_WITHIN.EXPECTED - this.fofState.spiritsWithinCounter);\n            this.fofErrorResult.missedCircleOfScorns += Math.max(0, CONSTANTS.CIRCLE_OF_SCORN.EXPECTED - this.fofState.circleOfScornCounter);\n            this.fofErrorResult.missedIntervenes += Math.max(0, CONSTANTS.INTERVENE.EXPECTED - this.fofState.interveneCounter);\n        }\n        this.fofState = new FightOrFlightState();\n    }\n    onComplete() {\n        const missedOgcds = this.fofErrorResult.missedSpiritWithins + this.fofErrorResult.missedCircleOfScorns + this.fofErrorResult.missedIntervenes;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FIGHT_OR_FLIGHT.icon,\n            content: <Trans id=\"pld.fightorflight.suggestions.gcds.content\">\n\t\t\t\tTry to land 10 GCDs during every <ActionLink {...ACTIONS.FIGHT_OR_FLIGHT}/> window.\n\t\t\t</Trans>,\n            why: <Trans id=\"pld.fightorflight.suggestions.gcds.why\">\n\t\t\t\t<Plural value={this.fofErrorResult.missedGcds} one=\"# GCD\" other=\"# GCDs\"/> missed during <StatusLink {...STATUSES.FIGHT_OR_FLIGHT}/> windows.\n\t\t\t</Trans>,\n            tiers: SEVERETIES.MISSED_GCD,\n            value: this.fofErrorResult.missedGcds,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.GORING_BLADE.icon,\n            content: <Trans id=\"pld.fightorflight.suggestions.goring-blade.content\">\n\t\t\t\tTry to land 2 <ActionLink {...ACTIONS.GORING_BLADE}/> applications during\n\t\t\t\tevery <ActionLink {...ACTIONS.FIGHT_OR_FLIGHT}/> window: one at the beginning and one at the end.\n\t\t\t</Trans>,\n            why: <Trans id=\"pld.fightorflight.suggestions.goring-blade.why\">\n\t\t\t\t<Plural value={this.fofErrorResult.missedGorings} one=\"# application\" other=\"# applications\"/> missed during <StatusLink {...STATUSES.FIGHT_OR_FLIGHT}/> windows.\n\t\t\t</Trans>,\n            tiers: SEVERETIES.MISSED_GORING,\n            value: this.fofErrorResult.missedGorings,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SPIRITS_WITHIN.icon,\n            content: <Trans id=\"pld.fightorflight.suggestions.ogcds.content\">\n\t\t\t\tTry to land at least one cast of each of your off-GCD skills during\n\t\t\t\tevery <ActionLink {...ACTIONS.FIGHT_OR_FLIGHT}/> window.\n\t\t\t</Trans>,\n            why: <Trans id=\"pld.fightorflight.suggestions.ogcds.why\">\n\t\t\t\t<Plural value={missedOgcds} one=\"# usage\" other=\"# usages\"/> missed during <StatusLink {...STATUSES.FIGHT_OR_FLIGHT}/> windows.\n\t\t\t</Trans>,\n            tiers: SEVERETIES.MISSED_OGCDS,\n            value: missedOgcds,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.GORING_BLADE.icon,\n            severity: matchClosestLower(SEVERETIES.MISSED_GCD, this.fofErrorResult.goringTooCloseCounter),\n            content: <Trans id=\"pld.fightorflight.suggestions.goring-blade-clip.content\">\n\t\t\t\tTry to refresh <ActionLink {...ACTIONS.GORING_BLADE}/> 9 GCDs after the\n\t\t\t\tfirst <ActionLink {...ACTIONS.GORING_BLADE}/> in\n\t\t\t\ta <ActionLink {...ACTIONS.FIGHT_OR_FLIGHT}/> window.\n\t\t\t</Trans>,\n            why: <Trans id=\"pld.fightorflight.suggestions.goring-blade-clip.why\">\n\t\t\t\t<Plural value={this.fofErrorResult.goringTooCloseCounter} one=\"# application was\" other=\"# applications were\"/> refreshed too early during <StatusLink {...STATUSES.FIGHT_OR_FLIGHT}/> windows.\n\t\t\t</Trans>,\n            tiers: SEVERETIES.GORING_CLIP,\n            value: this.fofErrorResult.goringTooCloseCounter,\n        }));\n    }\n    countAbility(rotation, abilityId) {\n        return rotation.reduce((sum, event) => sum + (event.ability.guid === abilityId ? 1 : 0), 0);\n    }\n    countGCDs(rotation) {\n        return rotation.reduce((sum, event) => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            return sum + (action && action.onGcd ? 1 : 0);\n        }, 0);\n    }\n    output() {\n        return <RotationTable targets={[\n            {\n                header: <Trans id=\"pld.fightorflight.table.header.gcds\">GCDs</Trans>,\n                accessor: 'gcds',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.SPIRITS_WITHIN}/>,\n                accessor: 'spiritsWithin',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.CIRCLE_OF_SCORN}/>,\n                accessor: 'circleOfScorn',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.INTERVENE}/>,\n                accessor: 'intervene',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.GORING_BLADE}/>,\n                accessor: 'goring',\n            },\n        ]} data={_.map(this.fofRotations, (rotation, timestamp) => {\n            const ts = _.toNumber(timestamp);\n            return {\n                start: ts - this.parser.fight.start_time,\n                end: ts - this.parser.fight.start_time + (STATUSES.FIGHT_OR_FLIGHT.duration * 1000),\n                targetsData: {\n                    gcds: {\n                        actual: this.countGCDs(rotation),\n                        expected: CONSTANTS.GCD.EXPECTED,\n                    },\n                    spiritsWithin: {\n                        actual: this.countAbility(rotation, ACTIONS.SPIRITS_WITHIN.id),\n                        expected: CONSTANTS.SPIRITS_WITHIN.EXPECTED,\n                    },\n                    circleOfScorn: {\n                        actual: this.countAbility(rotation, ACTIONS.CIRCLE_OF_SCORN.id),\n                        expected: CONSTANTS.CIRCLE_OF_SCORN.EXPECTED,\n                    },\n                    intervene: {\n                        actual: this.countAbility(rotation, ACTIONS.INTERVENE.id),\n                        expected: CONSTANTS.INTERVENE.EXPECTED,\n                    },\n                    goring: {\n                        actual: this.countAbility(rotation, ACTIONS.GORING_BLADE.id),\n                        expected: CONSTANTS.GORING.EXPECTED,\n                    },\n                },\n                rotation,\n            };\n        })} onGoto={this.timeline.show}/>;\n    }\n}\nFightOrFlight.handle = 'fightorflight';\nFightOrFlight.title = t('pld.fightorflight.title') `Fight Or Flight Usage`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], FightOrFlight.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], FightOrFlight.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability\n    // Internal State Counters\n    // ToDo: Merge some of these, so instead of saving rotations, make the rotation part of FoFState, so we can reduce the error result out of the saved rotations\n    )\n], FightOrFlight.prototype, \"invuln\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport DoTs from 'parser/core/modules/DoTs';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport React from 'react';\nconst SEVERITIES = {\n    CLIPPING: {\n        2500: SEVERITY.MINOR,\n        5000: SEVERITY.MEDIUM,\n        10000: SEVERITY.MAJOR,\n    },\n};\nexport default class Goring extends DoTs {\n    addChecklistRules() {\n        this.checklist.add(new Rule({\n            name: 'Keep your Goring Blade up',\n            description: <Trans id=\"pld.goring.checklist.goringblade.description\">\n\t\t\t\tAs a Paladin, <ActionLink {...ACTIONS.GORING_BLADE}/> is a significant portion of your sustained\n\t\t\t\tdamage, and is required to kept up for as much as possible, for the best damage output.\n\t\t\t</Trans>,\n            target: 90,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"pld.goring.checklist.goringblade.requirement.uptime\"><ActionLink {...ACTIONS.GORING_BLADE}/> uptime</Trans>,\n                    percent: () => this.getUptimePercent(STATUSES.GORING_BLADE.id),\n                }),\n            ],\n        }));\n    }\n    addClippingSuggestions(clip) {\n        // Suggestion for Goring Blade DoT clipping\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.GORING_BLADE.icon,\n            content: <Trans id=\"pld.goring.suggestions.goringblade.content\">\n\t\t\t\tAvoid refreshing <ActionLink {...ACTIONS.GORING_BLADE}/> significantly before it's expiration.\n\t\t\t</Trans>,\n            why: <Trans id=\"pld.goring.suggestions.goringblade.why\">\n\t\t\t\t{this.parser.formatDuration(clip[STATUSES.GORING_BLADE.id])} of <StatusLink {...STATUSES.GORING_BLADE}/> lost\n\t\t\t\tto early refreshes.\n\t\t\t</Trans>,\n            tiers: SEVERITIES.CLIPPING,\n            value: this.getClippingAmount(STATUSES.GORING_BLADE.id),\n        }));\n    }\n}\nGoring.handle = 'goring';\nGoring.statusesToTrack = [\n    STATUSES.GORING_BLADE.id,\n];\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], Goring.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Goring.prototype, \"suggestions\", void 0);\n","import ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\n// Allowed downtime set to 4s to account for PLD's natural rotation drift.\nconst ALLOWED_DOWNTIME_FOF = 4000;\nconst ALLOWED_DOWNTIME_REQ = 4000;\n/* These first use offsets are large to allow for both Requiescat-first and\n * Fight or Flight-first openers --- the former delays Fight or Flight to\n * 23-24s, and the latter delays Requiescat to 30-31s, depending on whether\n * or not a holy spirit was used on pull.\n */\nconst FIRST_USE_OFFSET_FOF = 24000;\nconst FIRST_USE_OFFSET_REQ = 31000;\nexport default class OGCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        this.trackedCds = [\n            {\n                cooldowns: [ACTIONS.FIGHT_OR_FLIGHT],\n                allowedAverageDowntime: ALLOWED_DOWNTIME_FOF,\n                firstUseOffset: FIRST_USE_OFFSET_FOF,\n            },\n            {\n                cooldowns: [ACTIONS.REQUIESCAT],\n                allowedAverageDowntime: ALLOWED_DOWNTIME_REQ,\n                firstUseOffset: FIRST_USE_OFFSET_REQ,\n            },\n            { cooldowns: [ACTIONS.SPIRITS_WITHIN] },\n            { cooldowns: [ACTIONS.CIRCLE_OF_SCORN] },\n            { cooldowns: [ACTIONS.INTERVENE] },\n        ];\n    }\n}\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nconst SEVERITIES = {\n    MISSED_CASTS: {\n        1: SEVERITY.MEDIUM,\n        5: SEVERITY.MAJOR,\n    },\n    MISSED_BUFF_REQUIESCAT: {\n        1: SEVERITY.MAJOR,\n    },\n};\nconst CONSTANTS = {\n    HOLY_SPIRIT: {\n        EXPECTED: 4,\n    },\n    CONFITEOR: {\n        EXPECTED: 1,\n    },\n};\nconst HOLY_SPIRIT_AND_CIRCLE_IDS = [\n    ACTIONS.HOLY_SPIRIT.id,\n    ACTIONS.HOLY_CIRCLE.id,\n];\nconst REQUIESCAT_DURATION_MILLIS = STATUSES.REQUIESCAT.duration * 1000;\nclass RequiescatState {\n    constructor(start) {\n        this.end = null;\n        this.rotation = [];\n        this.hasAscociatedBuff = false;\n        this.isRushing = false;\n        this.start = start;\n    }\n    get holySpirits() {\n        return this.rotation.filter(event => HOLY_SPIRIT_AND_CIRCLE_IDS.includes(event.ability.guid)).length;\n    }\n    get confiteors() {\n        return this.rotation.filter(event => event.ability.guid === ACTIONS.CONFITEOR.id).length;\n    }\n}\nexport default class Requiescat extends Module {\n    constructor() {\n        super(...arguments);\n        // Requiescat Casts\n        this.requiescats = [];\n    }\n    get lastRequiescat() {\n        return _.last(this.requiescats);\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('applybuff', { by: 'player', abilityId: STATUSES.REQUIESCAT.id }, this.onApplyRequiescat);\n        this.addHook('removebuff', { by: 'player', abilityId: STATUSES.REQUIESCAT.id }, this.onRemoveRequiescat);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const actionId = event.ability.guid;\n        if (actionId === ACTIONS.ATTACK.id) {\n            return;\n        }\n        if (actionId === ACTIONS.REQUIESCAT.id) {\n            // Add new cast to the list\n            const reqState = new RequiescatState(event.timestamp);\n            const reqEnd = event.timestamp + REQUIESCAT_DURATION_MILLIS;\n            const isBossInvulnBeforeEnd = this.invuln.isUntargetable('all', reqEnd)\n                || this.invuln.isInvulnerable('all', reqEnd);\n            reqState.isRushing = (reqEnd >= this.parser.fight.end_time)\n                || isBossInvulnBeforeEnd;\n            this.requiescats.push(reqState);\n        }\n        const lastRequiescat = this.lastRequiescat;\n        // If we're still in the considered window, log our actions to it\n        if (lastRequiescat != null && lastRequiescat.end == null) {\n            lastRequiescat.rotation.push(event);\n        }\n    }\n    onApplyRequiescat() {\n        const lastRequiescat = this.lastRequiescat;\n        if (lastRequiescat != null) {\n            lastRequiescat.hasAscociatedBuff = true;\n        }\n    }\n    onRemoveRequiescat(event) {\n        const lastRequiescat = this.lastRequiescat;\n        if (lastRequiescat != null) {\n            lastRequiescat.end = event.timestamp;\n        }\n    }\n    onComplete() {\n        // The difference between Holy Spirit and Confiteor is massive (450 potency before multipliers). For this reason, it condenses suggestions\n        // to just log any missed Confiteor as a missed Holy Spirit, since Confiteor functionally just doubles your last Holy Spirit.\n        const missedCasts = this.requiescats\n            .filter(requiescat => requiescat.hasAscociatedBuff && !requiescat.isRushing)\n            .reduce((sum, requiescat) => sum + Math.max(0, CONSTANTS.HOLY_SPIRIT.EXPECTED - requiescat.holySpirits) + Math.max(0, CONSTANTS.CONFITEOR.EXPECTED - requiescat.confiteors), 0);\n        const missedRequiescatBuffs = this.requiescats.filter(requiescat => !requiescat.hasAscociatedBuff).length;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.HOLY_SPIRIT.icon,\n            why: <Trans id=\"pld.requiescat.suggestions.wrong-gcd.why\">\n\t\t\t\t<Plural value={missedCasts} one=\"# missing cast\" other=\"# missing casts\"/> during the <StatusLink {...STATUSES.REQUIESCAT}/> buff window.\n\t\t\t</Trans>,\n            content: <Trans id=\"pld.requiescat.suggestions.wrong-gcd.content\">\n\t\t\t\tGCDs used during <ActionLink {...ACTIONS.REQUIESCAT}/> should consist of 4 uses of <ActionLink {...ACTIONS.HOLY_SPIRIT}/> (or\n\t\t\t\tmulti-hit <ActionLink {...ACTIONS.HOLY_CIRCLE}/>) and 1 use of <ActionLink {...ACTIONS.CONFITEOR}/> for optimal damage.\n\t\t\t</Trans>,\n            tiers: SEVERITIES.MISSED_CASTS,\n            value: missedCasts,\n        }));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.REQUIESCAT.icon,\n            why: <Trans id=\"pld.requiescat.suggestions.nobuff.why\">\n\t\t\t\t<Plural value={missedRequiescatBuffs} one=\"# usage\" other=\"# usages\"/> while under 80% MP.\n\t\t\t</Trans>,\n            content: <Trans id=\"pld.requiescat.suggestions.nobuff.content\">\n\t\t\t\t<ActionLink {...ACTIONS.REQUIESCAT}/> should only be used when over 80% MP. Try to not miss on the 20% Magic Damage buff <StatusLink {...STATUSES.REQUIESCAT}/> provides.\n\t\t\t</Trans>,\n            tiers: SEVERITIES.MISSED_BUFF_REQUIESCAT,\n            value: missedRequiescatBuffs,\n        }));\n    }\n    countAbility(rotation, abilityId) {\n        return rotation.reduce((sum, event) => sum + (event.ability.guid === abilityId ? 1 : 0), 0);\n    }\n    output() {\n        return <RotationTable targets={[\n            {\n                header: <ActionLink showName={false} {...ACTIONS.HOLY_SPIRIT}/>,\n                accessor: 'holySpirit',\n            },\n            {\n                header: <ActionLink showName={false} {...ACTIONS.CONFITEOR}/>,\n                accessor: 'confiteor',\n            },\n        ]} data={this.requiescats\n            .filter(requiescat => requiescat.hasAscociatedBuff)\n            .map(requiescat => ({\n            start: requiescat.start - this.parser.fight.start_time,\n            end: requiescat.end != null ?\n                requiescat.end - this.parser.fight.start_time\n                : requiescat.start - this.parser.fight.start_time,\n            targetsData: {\n                holySpirit: {\n                    actual: requiescat.holySpirits,\n                    expected: CONSTANTS.HOLY_SPIRIT.EXPECTED,\n                },\n                confiteor: {\n                    actual: requiescat.confiteors,\n                    expected: CONSTANTS.CONFITEOR.EXPECTED,\n                },\n            },\n            rotation: requiescat.rotation,\n        }))} onGoto={this.timeline.show}/>;\n    }\n}\nRequiescat.handle = 'requiescat';\nRequiescat.title = t('pld.requiescat.title') `Requiescat Usage`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Requiescat.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], Requiescat.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability\n    // Requiescat Casts\n    )\n], Requiescat.prototype, \"invuln\", void 0);\n","import CoreStatuses from 'parser/core/modules/Statuses';\nimport STATUSES from 'data/STATUSES';\nexport default class Statuses extends CoreStatuses {\n}\nStatuses.statusesStackMapping = {\n    [STATUSES.DIVINE_VEIL_PROC.id]: STATUSES.DIVINE_VEIL.id,\n};\n","import { __decorate, __metadata } from \"tslib\";\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { dependency } from 'parser/core/Module';\nimport Combatants from 'parser/core/modules/Combatants';\nimport CoreWeaving from 'parser/core/modules/Weaving';\nconst SPELLS = [\n    ACTIONS.HOLY_SPIRIT.id,\n    ACTIONS.HOLY_CIRCLE.id,\n    ACTIONS.CONFITEOR.id,\n    ACTIONS.CLEMENCY.id,\n];\nexport default class Weaving extends CoreWeaving {\n    isBadWeave(weave /*, maxWeaves*/) {\n        if (weave.hasOwnProperty('leadingGcdEvent')\n            && weave.leadingGcdEvent.hasOwnProperty('ability') // Check for if the homie opened on an oGCD for w/e reason\n        ) {\n            // Requiescat makes spells instant cast, so they get 2 weaves by default.\n            if (this.combatants.selected.hasStatus(STATUSES.REQUIESCAT.id)\n                && SPELLS.includes(weave.leadingGcdEvent.ability.guid)) {\n                return weave.weaves.length > 2;\n            }\n        }\n        return super.isBadWeave(weave);\n    }\n}\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Combatants)\n], Weaving.prototype, \"combatants\", void 0);\n","import Combos from './Combos';\nimport Cooldowns from './Cooldowns';\nimport FightOrFlight from './FightOrFlight';\nimport Goring from './Goring';\nimport OGCDDowntime from './OGCDDowntime';\nimport Requiescat from './Requiescat';\nimport Statuses from './Statuses';\nimport Weaving from './Weaving';\nexport default [\n    Combos,\n    Cooldowns,\n    FightOrFlight,\n    Goring,\n    OGCDDowntime,\n    Requiescat,\n    Statuses,\n    Weaving,\n];\n"],"sourceRoot":""}
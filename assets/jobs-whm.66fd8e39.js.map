{"version":3,"sources":["webpack:///./src/parser/core/modules/Suggestions/Suggestion.js","webpack:///./src/parser/core/modules/Suggestions/Component.js","webpack:///./src/parser/core/modules/Suggestions/Suggestions.js","webpack:///./src/parser/core/modules/Suggestions/index.js","webpack:///./src/parser/core/modules/Checklist/Rule.js","webpack:///./src/parser/core/modules/Checklist/Component.js","webpack:///./src/parser/core/modules/Checklist/Checklist.js","webpack:///./src/parser/core/modules/Checklist/Requirement.js","webpack:///./src/parser/core/modules/Checklist/index.js","webpack:///./src/components/ui/Rotation.tsx","webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/mathjsCustom.js","webpack:///./src/components/ui/Rotation.module.css?31d9","webpack:///./src/parser/core/modules/Suggestions/Suggestions.module.css?3c09","webpack:///./src/parser/core/modules/GlobalCooldown.js","webpack:///./src/parser/core/modules/BuffWindow.tsx","webpack:///./src/parser/core/modules/Checklist/Checklist.module.css?cfc9","webpack:///./src/parser/jobs/whm/modules/DoTs.js","webpack:///./src/parser/jobs/whm/modules/Lilies.js","webpack:///./src/parser/jobs/whm/modules/oGCDs.tsx","webpack:///./src/parser/jobs/whm/modules/Overheal.js","webpack:///./src/parser/jobs/whm/modules/Speedmod.js","webpack:///./src/parser/jobs/whm/modules/Swiftcast.js","webpack:///./src/parser/jobs/whm/modules/DISPLAY_ORDER.js","webpack:///./src/parser/jobs/whm/modules/index.js"],"names":["SEVERITY","MORBID","MAJOR","MEDIUM","MINOR","IGNORE","undefined","Suggestion","constructor","options","this","icon","content","why","severity","Object","keys","forEach","key","TieredSuggestion","super","tiers","value","matcher","matchClosestLower","SEVERITY_LABEL_PROPS","id","color","Suggestions","React","Component","arguments","onToggleShowMinor","_","data","settingsStore","context","setShowMinorSuggestions","checked","render","showMinor","showMinorSuggestions","suggestions","props","filter","suggestion","hasMinor","some","Checkbox","toggle","label","defaultChecked","onChange","className","styles","checkbox","items","map","index","item","src","alt","extra","Label","horizontal","length","contextType","StoreContext","__decorate","observer","Module","_suggestions","add","push","console","error","output","sort","a","b","handle","displayOrder","DISPLAY_ORDER","SUGGESTIONS","displayMode","DISPLAY_MODE","FULL","title","TARGET","SUCCESS","WARN","FAIL","DEFAULT_TARGET","Rule","name","description","requirements","target","DEFAULT","percent","percents","requirement","math","mean","TieredRule","RULE_STYLES","text","autoExpand","Checklist","rules","expanded","panels","rule","ruleStyles","tier","Math","min","Icon","toFixed","Progress","progress","size","Accordion","exclusive","defaultActiveIndex","styled","fluid","_rules","sortedRules","CHECKLIST","Requirement","_percent","overrideDisplay","Rotation","events","container","event","action","getDataBy","ACTIONS","ability","guid","autoAttack","linkClassName","link","ogcd","onGcd","iconSize","gcdSize","ogcdSize","Link","ITEM_ID_OFFSET","ItemLink","ActionLink","cn","showName","RotationTable","targets","notes","onGoto","headerTitle","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","i","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","negative","end","rotation","style","marginRight","formatDuration","circular","onClick","targetEntry","noteEntry","create","meanDependencies","modeDependencies","stdDependencies","module","exports","MIN_GCD","MAX_GCD","BASE_GCD","CASTER_TAX","DEBUG_LOG_SAVED_GCDS","GlobalCooldown","_castingEvent","_estimatedBaseGcd","_estimateGcdCount","_lastGcd","isInstant","gcds","gcdGroupId","addHook","_onComplete","normalise","parser","byPlayer","getAction","type","hasBeginCast","relevantEvent","saveGcd","timestamp","_debugLogSavedGcds","gcd","formatTimestamp","actionId","instant","taxed","casterTaxed","log","normalizedLength","speedMod","startTime","fight","start_time","timeline","addGroup","Group","order","addItem","Item","_getGcdLength","group","estimate","getEstimate","statistics","SimpleStatistic","actions","ATTACK","info","gcdInfo","speedmod","get","castTime","isCasterTaxed","gcdLength","round","cooldown","correctedCooldown","gcdRecast","normaliseWith","normalizedGcd","bound","lengths","mode","max","getUptime","reduce","carry","duration","downtime","getDowntime","cooldownRatio","dependencies","BuffWindowState","e","getActionCountByIds","actionsById","includes","BuffWindowModule","buffWindows","lastBuffWindow","init","by","onCast","onApplyBuff","onRemoveBuff","onComplete","activeBuffWindow","considerAction","buffStatus","startNewBuffWindow","getBaselineExpectedGCDs","buffWindow","expectedGCDs","expectedPerWindow","changeExpectedGCDsClassLogic","reduceExpectedGCDsEndOfFight","windowDurationMillis","fightTimeRemaining","end_time","gcdEstimate","globalCooldown","ceil","getBaselineExpectedTrackedAction","changeExpectedTrackedActionClassLogic","getBuffWindowExpectedGCDs","getBuffWindowRequiredGCDsUsed","requiredGCDs","allowedGCDsById","getBuffWindowExpectedTrackedActions","getBuffWindowNotes","missedGCDs","sum","buffAction","suggestionContent","severityTiers","invalidGCDs","trackedActions","missedActions","trackedAction","trackedBadActions","badActions","rotationTargets","notesData","height","rotationTableNotesColumnHeader","rotationData","windowStart","windowEnd","missedgcd","badgcd","show","rotationTableHeader","dependency","__metadata","Data","prototype","Timeline","STATUS_DURATION","RULE_TIERS","90","95","SUGGESTION_TIERS","500","9000","30000","DOT_CLIPPING_THRESHOLD","DoTs","_lastApplication","_clip","abilityId","STATUSES","DIA","_onDotApply","applicationKey","targetID","targetInstance","lastApplication","clip","invuln","getInvulnerableUptime","checklist","getDotUptimePercent","statusId","enemies","getStatusUptime","fightDuration","LILY_CONSUMERS","AFFLATUS_SOLACE","AFFLATUS_RAPTURE","BLOOD_LILY_CONSUMERS","AFFLATUS_MISERY","LILY_INTERVAL","BLOOD_LILY_BLOOM","WASTED_BLOOD_LILIES_MAX_MEDIUM","Lilies","_blooming","_bloodLiliesGenerated","_bloodLiliesConsumed","_bloodLiliesWasted","_liliesConsumed","_liliesWasted","_unused","_onCast","to","_onDeath","checkBloodLilies","checkLilyCapping","fightLength","possible","floor","DPS_COOLDOWNS_TRACKED","ASSIZE","PRESENCE_OF_MIND","DPS_TARGET_PERCENT","OTHER_COOLDOWNS_TRACKED","ASYLUM","DIVINE_BENISON","PLENARY_INDULGENCE","TEMPERANCE","OTHER_ALLOWED_MISSES","minor","medium","major","Infinity","showHeld","OGCDs","cooldownUsage","castFilter","spellCooldowns","initSpellCooldowns","initCastFilter","initCooldownUsage","obj","act","held","lastUsed","uses","maxUses","missed","severities","whyHeld","SUCCESS_TARGET","WARN_TARGET","Overheal","healOverTimeStatuses","REGEN","MEDICA_II","_healingDirect","_overhealDirect","_healingOverTime","_overhealOverTime","_onHeal","amount","overheal","InvertedRequirement","percentInverted","Speedmod","CoreSpeedmod","SPEED_BUFF_STATUS_IDS","MISSED_SWIFTCASTS_SEVERITIES","1","Swiftcast","SWIFTCAST","missedSwifts","RAISE","GLARE","oGCDs"],"mappings":"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","file":"assets/jobs-whm.66fd8e39.js","sourcesContent":["import { matchClosestLower } from 'utilities';\nexport const SEVERITY = {\n    // NOTE: Don't use MORBID, It's for deaths. I _will_ block the PRs on this.\n    MORBID: 0,\n    MAJOR: 1,\n    MEDIUM: 2,\n    MINOR: 3,\n    // The matchClosest fall back to undefined, so let's use that for ignore too\n    IGNORE: undefined,\n};\nexport default class Suggestion {\n    constructor(options) {\n        this.icon = ''; // TODO: default image\n        this.content = '';\n        this.why = '';\n        this.severity = SEVERITY.MEDIUM;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n}\nexport class TieredSuggestion extends Suggestion {\n    constructor(options) {\n        super({\n            tiers: {},\n            value: 0,\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get severity() {\n        return this.matcher(this.tiers, this.value);\n    }\n    // noop setter so it doesn't die from the base class\n    set severity(value) { }\n}\n","import { __decorate } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Checkbox, Label } from 'semantic-ui-react';\n// Direct path import 'cus it'll be a dep loop otherwise\nimport { SEVERITY } from 'parser/core/modules/Suggestions/Suggestion';\nimport { SettingsStore } from 'store/settings';\nimport styles from './Suggestions.module.css';\nimport { StoreContext } from 'store';\nconst SEVERITY_LABEL_PROPS = {\n    [SEVERITY.MORBID]: { content: <Trans id=\"core.suggestions.severity.morbid\">Morbid</Trans>, color: 'black', icon: 'times' },\n    [SEVERITY.MAJOR]: { content: <Trans id=\"core.suggestions.severity.major\">Major</Trans>, color: 'red', icon: 'arrow up' },\n    [SEVERITY.MEDIUM]: { content: <Trans id=\"core.suggestions.severity.medium\">Medium</Trans>, color: 'orange' },\n    [SEVERITY.MINOR]: { content: <Trans id=\"core.suggestions.severity.minor\">Minor</Trans>, color: 'blue', icon: 'arrow down' },\n};\nlet Suggestions = class Suggestions extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onToggleShowMinor = (_, data) => {\n            const { settingsStore } = this.context;\n            settingsStore.setShowMinorSuggestions(data.checked);\n        };\n    }\n    render() {\n        const showMinor = this.context.settingsStore.showMinorSuggestions;\n        const suggestions = this.props.suggestions.filter(suggestion => showMinor || suggestion.severity !== SEVERITY.MINOR);\n        const hasMinor = this.props.suggestions.some(suggestion => suggestion.severity === SEVERITY.MINOR);\n        return <>\n\t\t\t{hasMinor && <Checkbox toggle label={<label><Trans id=\"core.suggestion.show-minor\">Show minor</Trans></label>} defaultChecked={showMinor} onChange={this.onToggleShowMinor} className={styles.checkbox}/>}\n\t\t\t<div className={styles.items}>\n\t\t\t\t{suggestions.map((suggestion, index) => <div key={index} className={styles.item}>\n\t\t\t\t\t<img src={suggestion.icon} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{suggestion.content}\n\t\t\t\t\t\t<div className={styles.extra}>\n\t\t\t\t\t\t\t<Label horizontal {...SEVERITY_LABEL_PROPS[suggestion.severity]}/>\n\t\t\t\t\t\t\t{suggestion.why}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>)}\n\t\t\t\t{suggestions.length === 0 && <div className={styles.item}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong><Trans id=\"core.suggestion.nothing\">There's nothing here!</Trans></strong><br />\n\t\t\t\t\t\t{hasMinor && <Trans id=\"core.suggestion.nothing-but-minor\">You can check over the minor suggestions by flicking the \"Show minor\" switch in the top right.</Trans>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t</>;\n    }\n};\nSuggestions.propTypes = {\n    settingsStore: PropTypes.instanceOf(SettingsStore),\n    suggestions: PropTypes.arrayOf(PropTypes.shape({\n        icon: PropTypes.string.isRequired,\n        content: PropTypes.node.isRequired,\n        why: PropTypes.node.isRequired,\n        severity: PropTypes.number.isRequired,\n    })).isRequired,\n};\nSuggestions.contextType = StoreContext;\nSuggestions = __decorate([\n    observer\n], Suggestions);\nexport default Suggestions;\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Suggestion, { SEVERITY } from './Suggestion';\nimport SuggestionsComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Suggestions extends Module {\n    constructor() {\n        super(...arguments);\n        this._suggestions = [];\n    }\n    add(suggestion) {\n        if (!(suggestion instanceof Suggestion)) {\n            console.error('TODO: Proper error message for passing a non-suggestion to the suggestion add handler');\n            return;\n        }\n        this._suggestions.push(suggestion);\n    }\n    output() {\n        // Only show the suggestions module if it's had things sent to it\n        if (this._suggestions.length === 0) {\n            return false;\n        }\n        // Sort suggestions with most important at the top, and remove ignored\n        const suggestions = this._suggestions\n            .filter(suggestion => suggestion.severity !== SEVERITY.IGNORE)\n            .sort((a, b) => a.severity - b.severity);\n        // Rendering is in a specialised component so it's got some state to work with\n        return <SuggestionsComponent suggestions={suggestions}/>;\n    }\n}\nSuggestions.handle = 'suggestions';\nSuggestions.displayOrder = DISPLAY_ORDER.SUGGESTIONS;\nSuggestions.displayMode = DISPLAY_MODE.FULL;\nSuggestions.title = t('core.suggestions.title') `Suggestions`;\n","export { default } from './Suggestions';\nexport { default as Suggestion } from './Suggestion';\nexport * from './Suggestion';\n","import math from 'mathjsCustom';\nimport { matchClosestLower } from 'utilities';\nimport { DISPLAY_ORDER } from 'parser/core/Module';\nexport const TARGET = {\n    SUCCESS: 2,\n    WARN: 1,\n    FAIL: undefined,\n};\nconst DEFAULT_TARGET = 95;\nexport default class Rule {\n    constructor(options) {\n        this.name = '';\n        this.description = null;\n        this.requirements = [];\n        this.target = DEFAULT_TARGET;\n        this.displayOrder = DISPLAY_ORDER.DEFAULT;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get tier() {\n        return matchClosestLower({ [this.target]: TARGET.SUCCESS }, this.percent);\n    }\n    get percent() {\n        // WoWA has a bunch of different modes for this stuff, I'm just going to use mean for now. Because I'm mean. Hue.\n        // TODO: different requirement modes\n        const percents = this.requirements.map(requirement => requirement.percent);\n        return percents.length ? math.mean(percents) : 0;\n    }\n}\nexport class TieredRule extends Rule {\n    constructor(options) {\n        super({\n            tiers: {},\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get tier() {\n        return this.matcher(this.tiers, this.percent);\n    }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Accordion, Icon, Progress } from 'semantic-ui-react';\nimport { TARGET } from 'parser/core/modules/Checklist/Rule';\nimport styles from './Checklist.module.css';\nconst RULE_STYLES = {\n    [TARGET.SUCCESS]: { text: 'text-success', color: 'green', icon: 'checkmark', autoExpand: false },\n    [TARGET.WARN]: { text: 'text-warning', color: 'yellow', icon: 'warning sign', autoExpand: true },\n    [TARGET.FAIL]: { text: 'text-error', color: 'red', icon: 'remove', autoExpand: true },\n};\nclass Checklist extends Component {\n    render() {\n        const { rules } = this.props;\n        // If there's no rules, just stop now\n        if (!rules.length) {\n            return false;\n        }\n        const expanded = [];\n        const panels = rules.map((rule, index) => {\n            const ruleStyles = RULE_STYLES[rule.tier];\n            // We cap the percent @ 100 in production mode - calculations can always be a bit janky\n            let percent = rule.percent;\n            if (process.env.NODE_ENV === 'production') {\n                percent = Math.min(percent, 100);\n            }\n            if (ruleStyles.autoExpand) {\n                expanded.push(index);\n            }\n            return {\n                // This should be a handle of some sort\n                key: index,\n                title: {\n                    className: styles.title,\n                    content: <>\n\t\t\t\t\t\t<Icon name={ruleStyles.icon} className={ruleStyles.text}/>\n\t\t\t\t\t\t{rule.name}\n\t\t\t\t\t\t<div className={styles.percent + ' ' + ruleStyles.text}>\n\t\t\t\t\t\t\t{percent.toFixed(1)}%\n\t\t\t\t\t\t\t<Progress percent={percent} className={styles.progress} size=\"small\" color={ruleStyles.color}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>,\n                },\n                content: {\n                    content: <>\n\t\t\t\t\t\t{rule.description && <div className={styles.description}>\n\t\t\t\t\t\t\t<Icon name=\"info\" size=\"large\"/>\n\t\t\t\t\t\t\t<p>{rule.description}</p>\n\t\t\t\t\t\t</div>}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{rule.requirements.map((requirement, index) => <li key={index}>\n\t\t\t\t\t\t\t\t\t{requirement.name}: {requirement.content}\n\t\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>,\n                },\n            };\n        });\n        return <Accordion exclusive={false} panels={panels} defaultActiveIndex={expanded} styled fluid/>;\n    }\n}\nChecklist.propTypes = {\n    rules: PropTypes.arrayOf(PropTypes.shape({\n        percent: PropTypes.number.isRequired,\n        tier: PropTypes.oneOf(Object.values(TARGET)),\n        name: PropTypes.node.isRequired,\n        requirements: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.node.isRequired,\n            content: PropTypes.string.isRequired,\n        })),\n    })),\n};\nexport default (Checklist);\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Rule from './Rule';\nimport ChecklistComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Checklist extends Module {\n    constructor() {\n        super(...arguments);\n        this._rules = [];\n    }\n    add(rule) {\n        if (!(rule instanceof Rule)) {\n            console.error('TODO: This error message');\n            return;\n        }\n        this._rules.push(rule);\n    }\n    output() {\n        const sortedRules = [...this._rules];\n        sortedRules.sort((a, b) => a.displayOrder - b.displayOrder);\n        return <ChecklistComponent rules={sortedRules}/>;\n    }\n}\nChecklist.handle = 'checklist';\nChecklist.title = t('core.checklist.title') `Checklist`;\nChecklist.displayOrder = DISPLAY_ORDER.CHECKLIST;\nChecklist.displayMode = DISPLAY_MODE.FULL;\n","export default class Requirement {\n    constructor(options) {\n        this.name = '';\n        this._percent = null;\n        this.value = null;\n        this.target = 100;\n        this.overrideDisplay = null;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get content() {\n        if (this.overrideDisplay !== null) {\n            return this.overrideDisplay;\n        }\n        if (this._percent !== null || this.value === null) {\n            return `${this.percent.toFixed(2)}%`;\n        }\n        return `${this.value.toFixed(0)}/${this.target.toFixed(0)}`; //avoid weird floating point shit\n    }\n    get percent() {\n        if (this._percent === null) {\n            if (this.value === null) {\n                return 0;\n            }\n            return 100 * (((typeof this.value === 'function') ? this.value() : this.value) || 0) / this.target;\n        }\n        return ((typeof this._percent === 'function') ? this._percent() : this._percent) || 0;\n    }\n    set percent(value) {\n        this._percent = value;\n    }\n}\n","export { default } from './Checklist';\nexport { default as Rule, TieredRule, TARGET } from './Rule';\nexport { default as Requirement } from './Requirement';\n","import cn from 'classnames';\nimport { ActionLink, ItemLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS, { ITEM_ID_OFFSET } from 'data/ACTIONS';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport styles from './Rotation.module.css';\nexport default class Rotation extends Component {\n    render() {\n        const { events } = this.props;\n        return <div className={styles.container}>\n\t\t\t{events.map((event, index) => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            // Don't bother showing the icon for autos\n            if (!action || action.autoAttack) {\n                return;\n            }\n            // Stuff like the duty action doesn't have an icon mapping yet.\n            // TODO: Sort this out if it's a problem\n            if (!action.icon) {\n                console.error(event, 'event ability has no icon');\n                return false;\n            }\n            const linkClassName = [\n                styles.link,\n                { [styles.ogcd]: !action.onGcd },\n            ];\n            const iconSize = action.onGcd ? styles.gcdSize : styles.ogcdSize;\n            const isItem = action.id >= ITEM_ID_OFFSET;\n            const Link = isItem ? ItemLink : ActionLink;\n            return <div key={index} className={cn(...linkClassName)}>\n\t\t\t\t\t<Link showName={false} iconSize={iconSize} {...action}/>\n\t\t\t\t</div>;\n        })}\n\t\t</div>;\n    }\n}\nRotation.propTypes = {\n    events: PropTypes.arrayOf(PropTypes.shape({\n        ability: PropTypes.shape({\n            guid: PropTypes.number.isRequired,\n        }).isRequired,\n    })).isRequired,\n};\n","import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import { create, meanDependencies, modeDependencies, stdDependencies, } from 'mathjs/number';\nexport default create({\n    meanDependencies,\n    modeDependencies,\n    stdDependencies,\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gcdSize\":\"40px\",\"ogcdSize\":\"30px\",\"container\":\"Rotation-module_container__32KS2\",\"link\":\"Rotation-module_link__2T3fu\",\"ogcd\":\"Rotation-module_ogcd__3oBO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gutter\":\"20px\",\"checkbox\":\"Suggestions-module_checkbox__1Z22N\",\"items\":\"Suggestions-module_items__3sCkP\",\"item\":\"Suggestions-module_item__1yy1-\",\"extra\":\"Suggestions-module_extra__3WN2d\"};","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport math from 'mathjsCustom';\nimport React from 'react';\nimport Module from 'parser/core/Module';\nimport { Group, Item } from './Timeline';\nimport { SimpleStatistic } from './Statistics';\nconst MIN_GCD = 1500;\nconst MAX_GCD = 2500;\nconst BASE_GCD = 2500;\nconst CASTER_TAX = 100;\nconst DEBUG_LOG_SAVED_GCDS = false && process.env.NODE_ENV !== 'production';\n// NOTE: Caster tax refers to spells taking 0.1s longer than their tooltip claims if their cast time is at least as long as their recast time.\n// See https://www.reddit.com/r/ffxiv/comments/8s05rn/the_recast_time_on_your_tooltip_can_be_up_to_85/, specifically:\n//    There is also another issue that influences how long recast times actually take that isn’t as heavily influenced by fps but is still affected,\n//    which is animation delay that happen between casts, this means that if you have a spell with a cast time that is equal to or\n//    greater than the recast time you will end up taking longer between casts than the (re)cast time. The delay is around 100 ms at 100+ fps\nexport default class GlobalCooldown extends Module {\n    constructor(...args) {\n        super(...args);\n        this._castingEvent = null;\n        this._estimatedBaseGcd = null;\n        this._estimateGcdCount = -1;\n        this._lastGcd = {\n            isInstant: false,\n            event: null,\n        };\n        this.gcds = [];\n        this.gcdGroupId = 'gcd';\n        this.addHook('complete', this._onComplete);\n    }\n    // Using normalise so the estimate can be used throughout the parse\n    normalise(events) {\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            // Only care about player GCDs\n            if (!this.parser.byPlayer(event) || !event.ability) {\n                continue;\n            }\n            const action = this.data.getAction(event.ability.guid);\n            if (!action || !action.onGcd) {\n                continue;\n            }\n            // eslint-disable-next-line default-case\n            switch (event.type) {\n                // wowa uses beginchannel for this...? need info for flamethrower/that ast skill/passage of arms\n                case 'begincast':\n                    // Can I check for cancels?\n                    this._castingEvent = event;\n                    break;\n                case 'cast':\n                    const hasBeginCast = this._castingEvent !== null && this._castingEvent.ability.guid === action.id;\n                    const relevantEvent = hasBeginCast ? this._castingEvent : event;\n                    this.saveGcd({ ...this._lastGcd }, relevantEvent.timestamp); // Save last gcd with current timestamp\n                    this._lastGcd.isInstant = !hasBeginCast;\n                    this._lastGcd.event = relevantEvent;\n                    this._castingEvent = null;\n                    break;\n            }\n        }\n        if (events.length) {\n            this.saveGcd({ ...this._lastGcd }, events[events.length - 1].timestamp);\n        }\n        this._debugLogSavedGcds();\n        return events;\n    }\n    _debugLogSavedGcds() {\n        if (!DEBUG_LOG_SAVED_GCDS) {\n            return;\n        }\n        // NOTE: Please sanity-check results when changing normalise or saveGcd. Good test cases include:\n        // - Attributing 1.5s and 2.2s to correct RDM melee gcds\n        // - Sub-0.5s speedmod for BLM fast-casts and correct Instant/CasterTaxed flagging\n        // - Correct timestamp for last event before long gaps (ie: Kefka normal)\n        this.gcds.forEach((gcd) => {\n            const timestamp = this.parser.formatTimestamp(gcd.timestamp);\n            const action = this.data.getAction(gcd.actionId);\n            const instant = gcd.isInstant ? ' Instant' : '';\n            const taxed = gcd.casterTaxed ? ' CasterTaxed' : '';\n            console.log(`${timestamp} ${action.name}[${gcd.length}|${gcd.normalizedLength}] Speedmod[${gcd.speedMod}]${instant}${taxed}`);\n        });\n    }\n    _onComplete() {\n        const startTime = this.parser.fight.start_time;\n        // Timeline output\n        // TODO: Look into adding items to groups? Maybe?\n        this.timeline.addGroup(new Group({\n            id: this.gcdGroupId,\n            content: 'GCD',\n            order: -99,\n        }));\n        this.gcds.forEach(gcd => {\n            const action = this.data.getAction(gcd.actionId);\n            if (!action) {\n                return;\n            }\n            this.timeline.addItem(new Item({\n                type: 'background',\n                start: gcd.timestamp - startTime,\n                length: this._getGcdLength(gcd),\n                title: action.name,\n                group: this.gcdGroupId,\n                content: <img src={action.icon} alt={action.name} title={action.name}/>,\n            }));\n        });\n        // Statistic box\n        const estimate = this.getEstimate(false);\n        this.statistics.add(new SimpleStatistic({\n            title: <Trans id=\"core.gcd.estimated-gcd\">Estimated GCD</Trans>,\n            icon: this.data.actions.ATTACK.icon,\n            value: this.parser.formatDuration(estimate),\n            info: (<Trans id=\"core.gcd.no-statistics\">\n\t\t\t\t\tUnfortunately, player statistics are not available from FF Logs. As such, the calculated GCD length is an <em>estimate</em>, and may well be incorrect. If it is reporting a GCD length <em>longer</em> than reality, you likely need to focus on keeping your GCD rolling.\n\t\t\t\t</Trans>),\n        }));\n    }\n    //saveGcd(event, isInstant) {\n    saveGcd(gcdInfo, timestamp) {\n        if (!gcdInfo.event) {\n            return;\n        }\n        const action = this.data.getAction(gcdInfo.event.ability.guid);\n        if (!action || !action.id) {\n            return;\n        }\n        let speedMod = this.speedmod.get(gcdInfo.event.timestamp);\n        let castTime = action.castTime;\n        // HACK NOTE TODO: Need to properly account for abilities that alter only the cast or recast of attacks.\n        // Thinking of moving this into a module like speedmod, that can be called with a timestamp to grab modified base castTime/cooldown values\n        const HACK_ASTRAL_UMBRAL_SPEED_SCALAR = 0.5;\n        if (speedMod <= HACK_ASTRAL_UMBRAL_SPEED_SCALAR) {\n            speedMod /= HACK_ASTRAL_UMBRAL_SPEED_SCALAR;\n            castTime *= HACK_ASTRAL_UMBRAL_SPEED_SCALAR;\n        }\n        let isCasterTaxed = false;\n        // GCD is only to two decimal places, so round it there. Storing in Ms.\n        // eslint-disable-next-line no-magic-numbers\n        let gcdLength = Math.round((timestamp - gcdInfo.event.timestamp) / 10) * 10;\n        if (!gcdInfo.isInstant && castTime >= action.cooldown) {\n            gcdLength -= CASTER_TAX;\n            isCasterTaxed = true;\n        }\n        const correctedCooldown = action.gcdRecast != null\n            ? action.gcdRecast\n            : action.cooldown;\n        const normaliseWith = gcdInfo.isInstant || castTime < correctedCooldown\n            ? correctedCooldown\n            : castTime;\n        const normalizedGcd = Math.round(gcdLength\n            * ((BASE_GCD / 1000) / normaliseWith)\n            * (1 / speedMod));\n        this.gcds.push({\n            timestamp: gcdInfo.event.timestamp,\n            length: gcdLength,\n            normalizedLength: normalizedGcd,\n            speedMod,\n            castTime,\n            cooldown: correctedCooldown,\n            casterTaxed: isCasterTaxed,\n            actionId: action.id,\n            isInstant: gcdInfo.isInstant,\n        });\n    }\n    getEstimate(bound = true) {\n        const gcdLength = this.gcds.length;\n        // If we don't have cache, need to recaculate it\n        if (this._estimatedBaseGcd === null || gcdLength !== this._estimateGcdCount) {\n            // Calculate the lengths of the GCD\n            const lengths = this.gcds.map(gcd => gcd.normalizedLength);\n            // Mode seems to get best results. Using mean in case there's multiple modes.\n            this._estimatedBaseGcd = lengths.length ? math.mean(math.mode(lengths)) : MAX_GCD;\n            this._estimateGcdCount = gcdLength;\n        }\n        // Bound the result if requested\n        if (bound) {\n            this._estimatedBaseGcd = Math.max(MIN_GCD, Math.min(MAX_GCD, this._estimatedBaseGcd));\n        }\n        return this._estimatedBaseGcd;\n    }\n    getUptime() {\n        return this.gcds.reduce((carry, gcd) => {\n            const duration = this._getGcdLength(gcd);\n            const downtime = this.downtime.getDowntime(gcd.timestamp, gcd.timestamp + duration);\n            return carry + duration - downtime;\n        }, 0);\n    }\n    _getGcdLength(gcd) {\n        let cooldown = (gcd.isInstant || gcd.castTime <= gcd.cooldown)\n            ? gcd.cooldown\n            : Math.max(gcd.castTime, gcd.cooldown);\n        cooldown *= 1000;\n        // Some actions are lower than or equal to min gcd, only adjust with ratios when they are not\n        if (cooldown > MIN_GCD) {\n            const cooldownRatio = this.getEstimate() / MAX_GCD;\n            cooldown = Math.max(MIN_GCD, cooldown * cooldownRatio * gcd.speedMod);\n        }\n        const duration = Math.round(cooldown + (gcd.casterTaxed ? CASTER_TAX : 0));\n        return duration;\n    }\n}\nGlobalCooldown.handle = 'gcd';\nGlobalCooldown.dependencies = [\n    // We need this to normalise before us\n    'precastAction',\n    'castTime',\n    'data',\n    'downtime',\n    'speedmod',\n    'statistics',\n    'timeline',\n];\nGlobalCooldown.title = t('core.gcd.title') `Global Cooldown`;\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport _ from 'lodash';\nimport Module, { dependency } from 'parser/core/Module';\nimport GlobalCooldown from 'parser/core/modules/GlobalCooldown';\nimport Suggestions, { TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport Timeline from 'parser/core/modules/Timeline';\nimport React from 'react';\nimport { Data } from './Data';\nexport class BuffWindowState {\n    constructor(data, start) {\n        this.rotation = [];\n        this.data = data;\n        this.start = start;\n    }\n    get gcds() {\n        // TODO: Investigate removing the reliance on data here.\n        return this.rotation\n            .map(e => this.data.getAction(e.ability.guid))\n            .filter(a => a && a.onGcd)\n            .length;\n    }\n    getActionCountByIds(actionsById) {\n        return this.rotation\n            .filter(e => actionsById.includes(e.ability.guid))\n            .length;\n    }\n}\nexport class BuffWindowModule extends Module {\n    constructor() {\n        super(...arguments);\n        this.buffWindows = [];\n    }\n    get activeBuffWindow() {\n        const lastBuffWindow = _.last(this.buffWindows);\n        if (lastBuffWindow && lastBuffWindow.end == null) {\n            return lastBuffWindow;\n        }\n        return undefined;\n    }\n    init() {\n        this.addHook('cast', { by: 'player' }, this.onCast);\n        this.addHook('applybuff', { by: 'player' }, this.onApplyBuff);\n        this.addHook('removebuff', { by: 'player' }, this.onRemoveBuff);\n        this.addHook('complete', this.onComplete);\n    }\n    onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.autoAttack) {\n            // Disregard auto attacks for tracking rotations / events during buff windows\n            return;\n        }\n        if (this.activeBuffWindow && this.considerAction(action)) {\n            this.activeBuffWindow.rotation.push(event);\n        }\n    }\n    /**\n     * This method MAY be overridden to return true or false, indicating whether or not this action should be considered within the buff window\n     * If false is returned, the action will not be tracked AT ALL within the buff window, and will NOT appear within the Rotation column\n     * @param action\n     */\n    considerAction(action) {\n        return true;\n    }\n    onApplyBuff(event) {\n        if (!this.buffStatus || event.ability.guid !== this.buffStatus.id) {\n            return;\n        }\n        this.startNewBuffWindow(event.timestamp);\n    }\n    startNewBuffWindow(startTime) {\n        this.buffWindows.push(new BuffWindowState(this.data, startTime));\n    }\n    onRemoveBuff(event) {\n        if (!this.buffStatus || event.ability.guid !== this.buffStatus.id) {\n            return;\n        }\n        if (this.activeBuffWindow) {\n            this.activeBuffWindow.end = event.timestamp;\n        }\n    }\n    /**\n     * For consumers that have the same number of expected GCDs per window, this will use the expectedPerWindow property\n     *   on expectedGCDs as the baseline\n     * This method MAY be overridden if the logic of expected GCDs per window is variable\n     * @param buffWindow\n     */\n    getBaselineExpectedGCDs(buffWindow) {\n        if (this.expectedGCDs) {\n            return this.expectedGCDs.expectedPerWindow;\n        }\n        return 0;\n    }\n    /**\n     * This method MAY be overridden to provide class-specific rushing logic per BuffWindow - default is no effect\n     * Return a positive number to INCREASE expected GCDs for this window, or a negative number to DECREASE\n     * @param buffWindow\n     */\n    changeExpectedGCDsClassLogic(buffWindow) {\n        return 0;\n    }\n    /**\n     * Handles rushing logic to reduce expected GCDs in a window for end of fight rushing\n     * This method MAY be overridden if class rules for end of fight rushing vary\n     * @param buffWindow\n     */\n    reduceExpectedGCDsEndOfFight(buffWindow) {\n        if (this.buffStatus.duration) {\n            // Check to see if this window is rushing due to end of fight - reduce expected GCDs accordingly\n            const windowDurationMillis = this.buffStatus.duration * 1000;\n            const fightTimeRemaining = this.parser.fight.end_time - buffWindow.start;\n            if (windowDurationMillis >= fightTimeRemaining) {\n                const gcdEstimate = this.globalCooldown.getEstimate();\n                return Math.ceil((windowDurationMillis - fightTimeRemaining) / gcdEstimate);\n            }\n        }\n        // Default: no rushing reduction\n        return 0;\n    }\n    /**\n     * For consumers that have tracked actions that expect the same number of usages per window, this will use the\n     *   expectedPerWindow property on that action as the baseline\n     * This method MAY be overridden if the logic of expected tracked actions per window is variable\n     * @param buffWindow\n     * @param action\n     */\n    getBaselineExpectedTrackedAction(buffWindow, action) {\n        return action.expectedPerWindow || 0;\n    }\n    /**\n     * This method MAY be overridden to provide class-specific logic to change expected uses of a tracked action per BuffWindow - default no effect\n     * Return a positive number to INCREASE expected tracked action usages for this window, or a negative number to DECREASE\n     * @param buffWindow\n     * @param action\n     */\n    changeExpectedTrackedActionClassLogic(buffWindow, action) {\n        return 0;\n    }\n    getBuffWindowExpectedGCDs(buffWindow) {\n        return this.getBaselineExpectedGCDs(buffWindow) + this.changeExpectedGCDsClassLogic(buffWindow) - this.reduceExpectedGCDsEndOfFight(buffWindow);\n    }\n    /**\n     * This method MAY be overridden to provide class-specific logic to determine if the required GCD(s) were used during a given BuffWindow\n     * Classes whose required GCD list vary per window should override this function.\n     * Function MUST return a number of CORRECT GCDs used within the window\n     * @param buffWindow\n     */\n    getBuffWindowRequiredGCDsUsed(buffWindow) {\n        if (!this.requiredGCDs) {\n            return 0;\n        }\n        const allowedGCDsById = this.requiredGCDs.actions.map(a => a.id);\n        return buffWindow.getActionCountByIds(allowedGCDsById);\n    }\n    getBuffWindowExpectedTrackedActions(buffWindow, action) {\n        return this.getBaselineExpectedTrackedAction(buffWindow, action) + this.changeExpectedTrackedActionClassLogic(buffWindow, action);\n    }\n    /**\n     * This method will be called if and only if the rotationTableNotesColumnHeader property is set, to add a notes field for each buff window\n     * Implementing classes MUST define their logic to determine what note to display for each buff window within this method\n     * @param buffWindow\n     */\n    getBuffWindowNotes(buffWindow) {\n        return undefined;\n    }\n    onComplete() {\n        if (this.expectedGCDs) {\n            const missedGCDs = this.buffWindows\n                .reduce((sum, buffWindow) => {\n                const expectedGCDs = this.getBuffWindowExpectedGCDs(buffWindow);\n                return sum + Math.max(0, expectedGCDs - buffWindow.gcds);\n            }, 0);\n            this.suggestions.add(new TieredSuggestion({\n                icon: this.buffAction.icon,\n                content: this.expectedGCDs.suggestionContent,\n                tiers: this.expectedGCDs.severityTiers,\n                value: missedGCDs,\n                why: <Trans id=\"core.buffwindow.suggestions.missedgcd.why\">\n\t\t\t\t\t{missedGCDs} <Plural value={missedGCDs} one=\"GCD was\" other=\"GCDs were\"/> missed during {this.buffAction.name} windows.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this.requiredGCDs) {\n            const invalidGCDs = this.buffWindows\n                .reduce((sum, buffWindow) => sum + Math.max(0, buffWindow.gcds - this.getBuffWindowRequiredGCDsUsed(buffWindow)), 0);\n            this.suggestions.add(new TieredSuggestion({\n                icon: this.requiredGCDs.icon,\n                content: this.requiredGCDs.suggestionContent,\n                tiers: this.requiredGCDs.severityTiers,\n                value: invalidGCDs,\n                why: <Trans id=\"core.buffwindow.suggestions.badgcd.why\">\n\t\t\t\t\t{invalidGCDs} incorrect <Plural value={invalidGCDs} one=\"GCD was\" other=\"GCDs were\"/> used during {this.buffAction.name} windows.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this.trackedActions) {\n            const missedActions = this.trackedActions.actions\n                .reduce((sum, trackedAction) => sum + this.buffWindows\n                .reduce((sum, buffWindow) => sum + Math.max(0, trackedAction.expectedPerWindow - buffWindow.getActionCountByIds([trackedAction.action.id])), 0), 0);\n            this.suggestions.add(new TieredSuggestion({\n                icon: this.trackedActions.icon,\n                content: this.trackedActions.suggestionContent,\n                tiers: this.trackedActions.severityTiers,\n                value: missedActions,\n                why: <Trans id=\"core.buffwindow.suggestions.trackedaction.why\">\n\t\t\t\t\t<Plural value={missedActions} one=\"# use of a recommended cooldown was\" other=\"# uses of recommended cooldowns were\"/> missed during {this.buffAction.name} windows.\n\t\t\t\t</Trans>,\n            }));\n        }\n        if (this.trackedBadActions) {\n            const badActions = this.trackedBadActions.actions\n                .reduce((sum, trackedAction) => sum + this.buffWindows\n                .reduce((sum, buffWindow) => sum + Math.max(0, buffWindow.getActionCountByIds([trackedAction.action.id]) - trackedAction.expectedPerWindow), 0), 0);\n            this.suggestions.add(new TieredSuggestion({\n                icon: this.trackedBadActions.icon,\n                content: this.trackedBadActions.suggestionContent,\n                tiers: this.trackedBadActions.severityTiers,\n                value: badActions,\n                why: <Trans id=\"core.buffwindow.suggestions.trackedbadaction.why\">\n\t\t\t\t\t<Plural value={badActions} one=\"# use of\" other=\"# uses of\"/> cooldowns that should be avoided during {this.buffAction.name} windows.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n    output() {\n        const rotationTargets = [];\n        const notesData = [];\n        if (this.expectedGCDs) {\n            rotationTargets.push({\n                header: <Trans id=\"core.buffwindow.table.header.gcds\">GCDs</Trans>,\n                accessor: 'missedgcd',\n            });\n        }\n        if (this.requiredGCDs) {\n            rotationTargets.push({\n                header: <img src={this.requiredGCDs.icon} alt=\"\" style={{ height: '20px' }}/>,\n                accessor: 'badgcd',\n            });\n        }\n        if (this.trackedActions) {\n            this.trackedActions.actions.forEach((trackedAction) => {\n                rotationTargets.push({\n                    header: <ActionLink showName={false} {...trackedAction.action}/>,\n                    accessor: trackedAction.action.name,\n                });\n            });\n        }\n        if (this.rotationTableNotesColumnHeader) {\n            notesData.push({\n                header: this.rotationTableNotesColumnHeader,\n                accessor: 'notes',\n            });\n        }\n        const rotationData = this.buffWindows\n            .map(buffWindow => {\n            const windowStart = buffWindow.start - this.parser.fight.start_time;\n            const windowEnd = (buffWindow.end != null ? buffWindow.end : buffWindow.start) - this.parser.fight.start_time;\n            const targetsData = {};\n            const notesMap = {};\n            if (this.expectedGCDs) {\n                targetsData.missedgcd = {\n                    actual: buffWindow.gcds,\n                    expected: this.getBuffWindowExpectedGCDs(buffWindow),\n                };\n            }\n            if (this.requiredGCDs) {\n                targetsData.badgcd = {\n                    actual: this.getBuffWindowRequiredGCDsUsed(buffWindow),\n                    expected: this.getBuffWindowExpectedGCDs(buffWindow),\n                };\n            }\n            if (this.trackedActions) {\n                this.trackedActions.actions.forEach((trackedAction) => {\n                    targetsData[trackedAction.action.name] = {\n                        actual: buffWindow.getActionCountByIds([trackedAction.action.id]),\n                        expected: this.getBuffWindowExpectedTrackedActions(buffWindow, trackedAction),\n                    };\n                });\n            }\n            if (this.rotationTableNotesColumnHeader) {\n                notesMap.notes = this.getBuffWindowNotes(buffWindow);\n            }\n            return {\n                start: windowStart,\n                end: windowEnd,\n                targetsData,\n                rotation: buffWindow.rotation,\n                notesMap,\n            };\n        });\n        return <RotationTable targets={rotationTargets} data={rotationData} notes={notesData} onGoto={this.timeline.show} headerTitle={this.rotationTableHeader}/>;\n    }\n}\nBuffWindowModule.handle = 'buffwindow';\nBuffWindowModule.title = t('core.buffwindow.title') `Buff Window`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], BuffWindowModule.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], BuffWindowModule.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Timeline)\n], BuffWindowModule.prototype, \"timeline\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", GlobalCooldown)\n], BuffWindowModule.prototype, \"globalCooldown\", void 0);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lg\":\"(min-width: 992px)\",\"title\":\"Checklist-module_title__2ro7x\",\"percent\":\"Checklist-module_percent__EKBdj\",\"progress\":\"Checklist-module_progress__28lgp\",\"description\":\"Checklist-module_description__3Bf5O\"};","import React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredRule, TARGET, Requirement } from 'parser/core/modules/Checklist';\nimport { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport { Trans } from '@lingui/react';\nconst STATUS_DURATION = 30000;\nconst RULE_TIERS = {\n    90: TARGET.WARN,\n    95: TARGET.SUCCESS,\n};\nconst SUGGESTION_TIERS = {\n    500: SEVERITY.MINOR,\n    9000: SEVERITY.MEDIUM,\n    30000: SEVERITY.MAJOR,\n};\nconst DOT_CLIPPING_THRESHOLD = 500; // ms of dot clipping to warrant a suggestion\nexport default class DoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastApplication = {};\n        this._clip = 0;\n        const filter = {\n            by: 'player',\n            abilityId: [STATUSES.DIA.id],\n        };\n        this.addHook(['applydebuff', 'refreshdebuff'], filter, this._onDotApply);\n        this.addHook('complete', this._onComplete);\n    }\n    _onDotApply(event) {\n        // Make sure we're tracking for this target\n        const applicationKey = `${event.targetID}|${event.targetInstance}`;\n        let lastApplication = this._lastApplication[applicationKey] = this._lastApplication[applicationKey] || 0;\n        // If it's not been applied yet, or we're rushing, set it and skip out\n        if (!lastApplication) {\n            lastApplication = event.timestamp;\n            return;\n        }\n        // Base clip calc\n        let clip = STATUS_DURATION - (event.timestamp - lastApplication);\n        // Also remove invuln time in the future that casting later would just push dots into\n        // TODO: This relies on a full set of invuln data ahead of time. Can this be trusted?\n        clip -= this.invuln.getInvulnerableUptime('all', event.timestamp, event.timestamp + STATUS_DURATION + clip);\n        // Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n        this._clip += Math.max(0, clip);\n        lastApplication = event.timestamp;\n    }\n    _onComplete() {\n        // Checklist rule for dot uptime\n        this.checklist.add(new TieredRule({\n            name: <Trans id=\"whm.dots.rule.name\"> Keep your DoTs up </Trans>,\n            description: <Trans id=\"whm.dots.rule.description\">\n\t\t\t\tAs a White Mage, Dia is significant portion of your sustained damage. Aim to keep them it up at all times.\n\t\t\t</Trans>,\n            tiers: RULE_TIERS,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"whm.dots.requirement.uptime-dia.name\"><ActionLink {...ACTIONS.DIA}/> uptime</Trans>,\n                    percent: () => this.getDotUptimePercent(STATUSES.DIA.id),\n                }),\n            ],\n        }));\n        //Suggestion for DoT clipping\n        if (this._clip > DOT_CLIPPING_THRESHOLD) {\n            this.suggestions.add(new TieredSuggestion({\n                icon: ACTIONS.DIA.icon,\n                content: <Trans id=\"whm.dots.suggestion.clip-dia.content\">\n\t\t\t\t\tAvoid refreshing Dia significantly before its expiration, this will allow you to cast more Glare.\n\t\t\t\t</Trans>,\n                tiers: SUGGESTION_TIERS,\n                why: <Trans id=\"whm.dots.suggestion.clip-dia.why\">\n\t\t\t\t\t{this.parser.formatDuration(this._clip)} of {STATUSES.DIA.name} lost to early refreshes.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n    getDotUptimePercent(statusId) {\n        const statusUptime = this.enemies.getStatusUptime(statusId);\n        const fightDuration = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightDuration) * 100;\n    }\n}\nDoTs.handle = 'dots';\nDoTs.dependencies = [\n    'checklist',\n    'enemies',\n    'invuln',\n    'suggestions',\n];\n","import React, { Fragment } from 'react';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { Trans, Plural } from '@lingui/react';\nimport { Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { ActionLink } from 'components/ui/DbLink';\nconst LILY_CONSUMERS = [ACTIONS.AFFLATUS_SOLACE.id, ACTIONS.AFFLATUS_RAPTURE.id];\nconst BLOOD_LILY_CONSUMERS = [ACTIONS.AFFLATUS_MISERY.id];\nconst LILY_INTERVAL = 30000; // 1 lily every 30 seconds\nconst BLOOD_LILY_BLOOM = 3; // 1 blood lily for every 3 lilies spent\nconst WASTED_BLOOD_LILIES_MAX_MEDIUM = 2;\nexport default class Lilies extends Module {\n    constructor(...args) {\n        super(...args);\n        this._blooming = 0;\n        this._bloodLiliesGenerated = 0;\n        this._bloodLiliesConsumed = 0;\n        this._bloodLiliesWasted = 0;\n        this._liliesConsumed = 0;\n        this._liliesWasted = 0;\n        this._unused = 0;\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n    }\n    _onCast(event) {\n        // this._calculateLilies(event)\n        const abilityId = event.ability.guid;\n        if (LILY_CONSUMERS.includes(abilityId)) {\n            this._liliesConsumed++;\n            if (this._blooming === BLOOD_LILY_BLOOM) {\n                // if we already have a blood lily, we are wasting this lily\n                this._liliesWasted++;\n            }\n            else if (++this._blooming === BLOOD_LILY_BLOOM) {\n                this._bloodLiliesGenerated++;\n            }\n        }\n        if (BLOOD_LILY_CONSUMERS.includes(abilityId)) {\n            // reset our blood lilies\n            this._blooming = 0;\n            this._bloodLiliesConsumed++;\n        }\n    }\n    _onComplete() {\n        this.checkBloodLilies();\n        this.checkLilyCapping();\n    }\n    _onDeath() {\n        // death is bad, because it also resets your lilies\n        this._blooming = 0;\n    }\n    checkLilyCapping() {\n        const fightLength = (this.parser.fight.end_time - this.parser.fight.start_time);\n        const possible = Math.floor(fightLength / LILY_INTERVAL);\n        this._unused = possible - this._liliesConsumed;\n        if (this._unused > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.AFFLATUS_SOLACE.icon,\n                content: <Fragment>\n\t\t\t\t\t<Trans id=\"whm.lily-cap.suggestion.content\">\n\t\t\t\t\t\tUse <ActionLink {...ACTIONS.AFFLATUS_SOLACE}/> or <ActionLink {...ACTIONS.AFFLATUS_RAPTURE}/> regularly to avoid capping your lilies.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>,\n                severity: SEVERITY.MINOR,\n                why: <Fragment>\n\t\t\t\t\t<Trans id=\"whm.lily-cap.suggestion.why\">\n\t\t\t\t\t\t{<Plural value={this._unused} one=\"# lily\" other=\"# lilies\"/>} went unused.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>,\n            }));\n        }\n    }\n    checkBloodLilies() {\n        this._bloodLiliesWasted = Math.floor(this._liliesWasted / BLOOD_LILY_BLOOM) + (this._blooming === BLOOD_LILY_BLOOM);\n        if (this._bloodLiliesWasted >= 1) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.AFFLATUS_MISERY.icon,\n                content: <Fragment>\n\t\t\t\t\t<Trans id=\"whm.lily-blood.suggestion.content\">\n\t\t\t\t\t\tUse <ActionLink {...ACTIONS.AFFLATUS_MISERY}/> to avoid wasting blood lily growth.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>,\n                severity: this._bloodLiliesWasted > WASTED_BLOOD_LILIES_MAX_MEDIUM ? SEVERITY.MAJOR : SEVERITY.MEDIUM,\n                why: <Fragment>\n\t\t\t\t\t<Trans id=\"whm.lily-blood.suggestion.why\">\n\t\t\t\t\t\t<Plural value={this._bloodLiliesWasted} one=\"# blood lily\" other=\"# blood lilies\"/> did not bloom due to early lily use.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>,\n            }));\n        }\n    }\n}\nLilies.handle = 'lilies';\nLilies.dependencies = [\n    'suggestions',\n];\n","import { __decorate, __metadata } from \"tslib\";\nimport React, { Fragment } from 'react';\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport Module, { dependency } from 'parser/core/Module';\nimport Checklist, { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport Suggestions, { SEVERITY, Suggestion } from 'parser/core/modules/Suggestions';\nconst DPS_COOLDOWNS_TRACKED = [ACTIONS.ASSIZE, ACTIONS.PRESENCE_OF_MIND];\nconst DPS_TARGET_PERCENT = 75;\nconst OTHER_COOLDOWNS_TRACKED = [ACTIONS.ASYLUM, ACTIONS.DIVINE_BENISON, ACTIONS.PLENARY_INDULGENCE, ACTIONS.TEMPERANCE];\nconst OTHER_ALLOWED_MISSES = {\n    [ACTIONS.ASYLUM.id]: {\n        minor: 2,\n        medium: 3,\n        major: Infinity,\n        showHeld: false,\n        content: <Fragment>\n\t\t\t<Trans id=\"whm.ogcds.suggestions.asylum.content\">Use <ActionLink {...ACTIONS.ASYLUM}/> frequently in an encounter whenever party members will be close enough to stand in the bubble. For instances where members are frequently spread too far, Asylum can still be used for tank healing.</Trans>\n\t\t</Fragment>,\n    },\n    [ACTIONS.DIVINE_BENISON.id]: {\n        minor: 8,\n        medium: 12,\n        major: 0,\n        showHeld: true,\n        content: <Fragment>\n\t\t\t<Trans id=\"whm.ogcds.suggestions.divine_benison.content\">Weave <ActionLink {...ACTIONS.DIVINE_BENISON}/> as often as possible to minimize single target healing needed. However, it is not worth clipping to apply a benison. Do not hold Divine Benison for tank busters. Since Dia's duration is 30s, try to weave Divine Benison with every Dia that you don't have two more important weaves to execute.</Trans>\n\t\t</Fragment>,\n    },\n    [ACTIONS.PLENARY_INDULGENCE.id]: {\n        minor: 1,\n        medium: 0,\n        major: 0,\n        showHeld: false,\n        content: <Fragment>\n\t\t\t<Trans id=\"whm.ogcds.suggestions.plenary_indulgence.content\">Use <ActionLink {...ACTIONS.PLENARY_INDULGENCE}/> when casting GCD AOE heals when the extra potency will reduce the amount of additional heals needed. Avoiding clipping to apply this, and only consider clipping if the additional healing will save subsequent a GCD heal cast.</Trans>\n\t\t</Fragment>,\n    },\n    [ACTIONS.TEMPERANCE.id]: {\n        minor: 2,\n        medium: 3,\n        major: 0,\n        showHeld: false,\n        content: <Fragment>\n\t\t\t<Trans id=\"whm.ogcds.suggestions.temperance.content\">Use <ActionLink {...ACTIONS.TEMPERANCE}/> often to mitigate incoming raid damage and boost GCD healing potency. Avoid clipping to apply it.</Trans>\n\t\t</Fragment>,\n    },\n};\nexport default class OGCDs extends Module {\n    constructor() {\n        super(...arguments);\n        this.cooldownUsage = {};\n        this.castFilter = [];\n        this.spellCooldowns = {};\n    }\n    init() {\n        this.initSpellCooldowns();\n        this.initCastFilter();\n        this.initCooldownUsage();\n        this.addHook('cast', { by: 'player', abilityId: this.castFilter }, this.onCast);\n        this.addHook('complete', this.onComplete);\n    }\n    initSpellCooldowns() {\n        this.spellCooldowns = [...DPS_COOLDOWNS_TRACKED, ...OTHER_COOLDOWNS_TRACKED].reduce((obj, action) => {\n            obj[action.id] = action.cooldown * 1000;\n            return obj;\n        }, this.spellCooldowns);\n    }\n    initCastFilter() {\n        this.castFilter = [...DPS_COOLDOWNS_TRACKED, ...OTHER_COOLDOWNS_TRACKED].map(act => act.id);\n    }\n    initCooldownUsage() {\n        this.cooldownUsage = [...DPS_COOLDOWNS_TRACKED, ...OTHER_COOLDOWNS_TRACKED].reduce((obj, action) => {\n            obj[action.id] = {\n                held: 0,\n                lastUsed: 0,\n                uses: 0,\n            };\n            return obj;\n        }, this.cooldownUsage);\n    }\n    onCast(event) {\n        const id = event.ability.guid;\n        this.cooldownUsage[id].uses++;\n        if (this.cooldownUsage[id].lastUsed === 0) {\n            this.cooldownUsage[id].lastUsed = this.parser.fight.start_time;\n        }\n        const held = event.timestamp - this.cooldownUsage[id].lastUsed - this.spellCooldowns[id];\n        if (held > 0) {\n            this.cooldownUsage[id].held += held;\n        }\n        this.cooldownUsage[id].lastUsed = event.timestamp;\n    }\n    onComplete() {\n        const requirements = DPS_COOLDOWNS_TRACKED.map(action => new Requirement({\n            name: <ActionLink {...action}/>,\n            value: this.cooldownUsage[action.id].uses,\n            target: Math.ceil(this.parser.fightDuration / (action.cooldown * 1000)),\n        }));\n        this.checklist.add(new Rule({\n            name: <Trans id=\"whm.ogcds.checklist.name\">Use your offensive OGCDs</Trans>,\n            description: <Trans id=\"whm.ogcds.content\">\n\t\t\t\tUse these skills as often as possible during an encounter to maximize DPS. However, avoiding clipping to use them.\n\t\t\t\tAssize may be able to be held to efficiently heal and deal damage if you can do so without losing a use in the fight,\n\t\t\t\tbut be cautious of creating alignment and clipping issues.\n\t\t\t</Trans>,\n            target: DPS_TARGET_PERCENT,\n            requirements,\n        }));\n        OTHER_COOLDOWNS_TRACKED.forEach(action => {\n            const maxUses = Math.ceil(this.parser.fightDuration / (action.cooldown * 1000));\n            const uses = this.cooldownUsage[action.id].uses;\n            const held = this.cooldownUsage[action.id].held;\n            const showHeld = OTHER_ALLOWED_MISSES[action.id].showHeld;\n            const missed = maxUses - uses;\n            const severities = OTHER_ALLOWED_MISSES[action.id];\n            if (missed > OTHER_ALLOWED_MISSES[action.id].minor) {\n                let severity = SEVERITY.MINOR;\n                if (severities.major === Infinity && uses === 0) {\n                    severity = SEVERITY.MAJOR;\n                }\n                else if (severities.major !== 0 && missed >= severities.major) {\n                    severity = SEVERITY.MAJOR;\n                }\n                else if (severities.medium !== 0 && missed >= severities.medium) {\n                    severity = SEVERITY.MEDIUM;\n                }\n                const why = <Fragment>\n\t\t\t\t\t<Trans id=\"whm.ogcds.suggestions.why\">\n\t\t\t\t\t\tYou missed about {missed} out of a possible {maxUses} casts.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>;\n                const whyHeld = <Fragment>\n\t\t\t\t\t<Trans id=\"whm.ogcds.suggestions.whyHeld\">\n\t\t\t\t\t\tYou missed about {missed} out of a possible {maxUses} casts because you held this cooldown for a total of {this.parser.formatDuration(held)}.\n\t\t\t\t\t</Trans>\n\t\t\t\t</Fragment>;\n                this.suggestions.add(new Suggestion({\n                    icon: action.icon,\n                    content: OTHER_ALLOWED_MISSES[action.id].content,\n                    why: showHeld ? whyHeld : why,\n                    severity,\n                }));\n            }\n        });\n    }\n}\nOGCDs.handle = 'oGCDs';\nOGCDs.title = t('whm.ogcds.title') `Off Global Cooldowns`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist)\n], OGCDs.prototype, \"checklist\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], OGCDs.prototype, \"suggestions\", void 0);\n","import STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredRule, TARGET, Requirement } from 'parser/core/modules/Checklist';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nconst SUCCESS_TARGET = 35;\nconst WARN_TARGET = 50;\nexport default class Overheal extends Module {\n    constructor(...args) {\n        super(...args);\n        this.healOverTimeStatuses = [STATUSES.REGEN.id, STATUSES.MEDICA_II.id];\n        this._healingDirect = 0;\n        this._overhealDirect = 0;\n        this._healingOverTime = 0;\n        this._overhealOverTime = 0;\n        this.addHook('heal', { by: 'player' }, this._onHeal);\n        this.addHook('complete', this._onComplete);\n    }\n    _onHeal(event) {\n        const guid = event.ability.guid;\n        if (this.healOverTimeStatuses.includes(guid)) {\n            this._healingOverTime += event.amount;\n            this._overhealOverTime += event.overheal || 0;\n        }\n        else {\n            this._healingDirect += event.amount;\n            this._overhealDirect += event.overheal || 0;\n        }\n    }\n    _onComplete() {\n        this.checklist.add(new TieredRule({\n            name: <Trans id=\"whm.overheal.rule.name\">Avoid overheal</Trans>,\n            description: <Trans id=\"whm.overheal.rule.description\"> Avoid wasting heals by healing for more than required to fill a target's HP bar. While some overheal is inevitable, overheal only serves to generate more enmity, for no gain. Being efficient with healing additionally helps with your MP management. </Trans>,\n            tiers: { [100 - SUCCESS_TARGET]: TARGET.SUCCESS, [100 - WARN_TARGET]: TARGET.WARN },\n            requirements: [\n                new InvertedRequirement({\n                    name: <Trans id=\"whm.overheal.requirement.nonhot\"> Overheal (non-HoT) </Trans>,\n                    percent: 100 * this._healingDirect / (this._healingDirect + this._overhealDirect),\n                }),\n                new InvertedRequirement({\n                    name: <Trans id=\"whm.overheal.requirement.hot\"> Overheal (HoT) </Trans>,\n                    percent: 100 * this._healingOverTime / (this._healingOverTime + this._overhealOverTime),\n                }),\n                new InvertedRequirement({\n                    name: <Trans id=\"whm.overheal.requirement.all\"> Overheal (all sources)</Trans>,\n                    percent: 100 * (this._healingOverTime + this._healingDirect) / (this._healingDirect + this._overhealDirect + this._healingOverTime + this._overhealOverTime),\n                }),\n            ],\n        }));\n    }\n}\nOverheal.handle = 'overheal';\nOverheal.dependencies = [\n    'checklist',\n];\n//yeh, I'm not doing this in core, but I really want to show overheal as overheal, since that's what the community understands\nexport class InvertedRequirement extends Requirement {\n    constructor(options) {\n        super(options);\n    }\n    get percentInverted() {\n        return 100 - this.percent;\n    }\n    get content() {\n        if (this._percent !== null || this.value === null) {\n            return `${this.percentInverted.toFixed(2)}%`;\n        }\n        return `${this.value.toFixed(0)}/${this.target.toFixed(0)}`; //avoid weird floating point shit\n    }\n}\n","import CoreSpeedmod from 'parser/core/modules/Speedmod';\nimport STATUSES from 'data/STATUSES';\nexport default class Speedmod extends CoreSpeedmod {\n    /* NOTE: Use this to force modules to run before Speedmod. ie: normalise to generate Huton events so Speedmod can pick them up natively\n    static dependencies = [\n        ...CoreSpeedmod.dependencies,\n        'forms',\n    ]\n    */\n    constructor(...args) {\n        super(...args);\n        this.SPEED_BUFF_STATUS_IDS.push(STATUSES.PRESENCE_OF_MIND.id);\n    }\n}\n","import React from 'react';\nimport { t, Trans, Plural } from '@lingui/macro';\nimport { BuffWindowModule } from 'parser/core/modules/BuffWindow';\nimport { getDataBy } from 'data/getDataBy';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nimport { ActionLink } from 'components/ui/DbLink';\nconst MISSED_SWIFTCASTS_SEVERITIES = {\n    1: SEVERITY.MAJOR,\n};\nexport default class Swiftcast extends BuffWindowModule {\n    constructor() {\n        super(...arguments);\n        this.buffAction = ACTIONS.SWIFTCAST;\n        this.buffStatus = STATUSES.SWIFTCAST;\n        this.rotationTableHeader = <Trans id=\"whm.swiftcast.title\">Swiftcast Actions</Trans>;\n    }\n    // override to ignore non-GCD casts\n    onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (!action || action.autoAttack || !action.castTime) {\n            return;\n        }\n        if (this.activeBuffWindow) {\n            this.activeBuffWindow.rotation.push(event);\n        }\n    }\n    // override since we're not really useing any of the other BuffWindow tracking features\n    onComplete() {\n        const missedSwifts = this.buffWindows.reduce((sum, buffWindow) => {\n            return sum + buffWindow.rotation.length ? 0 : 1;\n        }, 0);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SWIFTCAST.icon,\n            content: <Trans id=\"whm.swiftcast.missed.suggestion.content\">Cast a spell with <ActionLink {...ACTIONS.SWIFTCAST}/> before it expires. This allows you to instantly cast spells with a cast time, such as <ActionLink {...ACTIONS.RAISE}/> for a quick revive, or <ActionLink {...ACTIONS.GLARE}/> for weaving.</Trans>,\n            tiers: MISSED_SWIFTCASTS_SEVERITIES,\n            value: missedSwifts,\n            why: <Trans id=\"whm.swiftcast.missed.suggestion.why\">\n\t\t\t\t{missedSwifts} <Plural value={missedSwifts} one=\"Swiftcast was\" other=\"Swiftcasts were\"/> wasted because you did not cast a spell before the buff expired.\n\t\t\t</Trans>,\n        }));\n    }\n}\nSwiftcast.displayOrder = DISPLAY_ORDER.SWIFTCAST;\nSwiftcast.handle = 'swiftcast';\nSwiftcast.title = t('whm.swiftcast.title') `Swiftcast Actions`;\n","export default {\n    SWIFTCAST: 99,\n};\n","import DoTs from './DoTs';\nimport Lilies from './Lilies';\nimport oGCDs from './oGCDs';\nimport Overheal from './Overheal';\nimport Speedmod from './Speedmod';\nimport Swiftcast from './Swiftcast';\nexport default [\n    DoTs,\n    Lilies,\n    oGCDs,\n    Overheal,\n    Speedmod,\n    Swiftcast,\n];\n"],"sourceRoot":""}
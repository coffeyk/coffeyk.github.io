{"version":3,"sources":["webpack:///./src/parser/core/modules/Suggestions/Suggestion.js","webpack:///./src/parser/core/modules/Suggestions/Component.js","webpack:///./src/parser/core/modules/Suggestions/Suggestions.js","webpack:///./src/parser/core/modules/Suggestions/index.js","webpack:///./src/parser/core/modules/Checklist/Rule.js","webpack:///./src/parser/core/modules/Checklist/Component.js","webpack:///./src/parser/core/modules/Checklist/Checklist.js","webpack:///./src/parser/core/modules/Checklist/Requirement.js","webpack:///./src/parser/core/modules/Checklist/index.js","webpack:///./src/components/ui/Rotation.tsx","webpack:///./src/mathjsCustom.js","webpack:///./src/parser/core/modules/CooldownDowntime.tsx","webpack:///./src/components/ui/Rotation.module.css?31d9","webpack:///./src/parser/core/modules/Suggestions/Suggestions.module.css?3c09","webpack:///./src/parser/core/modules/Checklist/Checklist.module.css?cfc9","webpack:///./src/parser/core/modules/Downtime.js"],"names":["SEVERITY","MORBID","MAJOR","MEDIUM","MINOR","IGNORE","undefined","Suggestion","constructor","options","this","icon","content","why","severity","Object","keys","forEach","key","TieredSuggestion","super","tiers","value","matcher","matchClosestLower","SEVERITY_LABEL_PROPS","id","color","Suggestions","React","Component","arguments","onToggleShowMinor","_","data","settingsStore","context","setShowMinorSuggestions","checked","render","showMinor","showMinorSuggestions","suggestions","props","filter","suggestion","hasMinor","some","Checkbox","toggle","label","defaultChecked","onChange","className","styles","checkbox","items","map","index","item","src","alt","extra","Label","horizontal","length","contextType","StoreContext","__decorate","observer","Module","_suggestions","add","push","console","error","output","sort","a","b","handle","displayOrder","DISPLAY_ORDER","SUGGESTIONS","displayMode","DISPLAY_MODE","FULL","title","TARGET","SUCCESS","WARN","FAIL","DEFAULT_TARGET","Rule","name","description","requirements","target","DEFAULT","percent","percents","requirement","math","mean","TieredRule","RULE_STYLES","text","autoExpand","Checklist","rules","expanded","panels","rule","ruleStyles","tier","Math","min","Icon","toFixed","Progress","progress","size","Accordion","exclusive","defaultActiveIndex","styled","fluid","_rules","sortedRules","CHECKLIST","Requirement","_percent","overrideDisplay","Rotation","events","container","event","action","getDataBy","ACTIONS","ability","guid","autoAttack","linkClassName","link","ogcd","onGcd","iconSize","gcdSize","ogcdSize","Link","ITEM_ID_OFFSET","ItemLink","ActionLink","cn","showName","create","meanDependencies","modeDependencies","stdDependencies","CooldownDowntime","usages","Map","resets","checklistName","checklistDescription","checklistTarget","defaultAllowedAverageDowntime","defaultFirstUseOffset","countUsage","init","trackedIds","trackedCds","group","cooldowns","reduce","acc","cur","concat","resetIds","resetBy","actions","addEventHook","by","abilityId","onTrackedCast","onResetCast","onComplete","set","getTrackedGroup","get","find","cdRequirements","cdGroup","expected","calculateMaxUsages","actual","requirementDisplay","val","ix","getAction","debug","JSON","stringify","checklist","gRep","cooldown","maxCharges","charges","step","allowedAverageDowntime","gResets","resetTime","refundAmount","timeLost","firstUseOffset","count","expectedFirstUseTime","parser","fight","start_time","actualFirstUseTime","currentTime","formatTimestamp","timestamp","end_time","rs","previousTime","shift","downtime","isDowntime","window","getDowntimeWindows","end","start","formatDuration","dependency","__metadata","Data","prototype","Downtime","module","exports","_internalDowntime","currentTimestamp","downtimePeriods","unableToAct","getDowntimes","invuln","getInvulns","finalDowntimes","dt","last","when","getDowntime","uptime","max","minimumDowntimeLength","aggregator","minimumWindowSize","dependencies"],"mappings":"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","file":"assets/1.95dce540.js","sourcesContent":["import { matchClosestLower } from 'utilities';\nexport const SEVERITY = {\n    // NOTE: Don't use MORBID, It's for deaths. I _will_ block the PRs on this.\n    MORBID: 0,\n    MAJOR: 1,\n    MEDIUM: 2,\n    MINOR: 3,\n    // The matchClosest fall back to undefined, so let's use that for ignore too\n    IGNORE: undefined,\n};\nexport default class Suggestion {\n    constructor(options) {\n        this.icon = ''; // TODO: default image\n        this.content = '';\n        this.why = '';\n        this.severity = SEVERITY.MEDIUM;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n}\nexport class TieredSuggestion extends Suggestion {\n    constructor(options) {\n        super({\n            tiers: {},\n            value: 0,\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get severity() {\n        return this.matcher(this.tiers, this.value);\n    }\n    // noop setter so it doesn't die from the base class\n    set severity(value) { }\n}\n","import { __decorate } from \"tslib\";\nimport { Trans } from '@lingui/react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Checkbox, Label } from 'semantic-ui-react';\n// Direct path import 'cus it'll be a dep loop otherwise\nimport { SEVERITY } from 'parser/core/modules/Suggestions/Suggestion';\nimport { SettingsStore } from 'store/settings';\nimport styles from './Suggestions.module.css';\nimport { StoreContext } from 'store';\nconst SEVERITY_LABEL_PROPS = {\n    [SEVERITY.MORBID]: { content: <Trans id=\"core.suggestions.severity.morbid\">Morbid</Trans>, color: 'black', icon: 'times' },\n    [SEVERITY.MAJOR]: { content: <Trans id=\"core.suggestions.severity.major\">Major</Trans>, color: 'red', icon: 'arrow up' },\n    [SEVERITY.MEDIUM]: { content: <Trans id=\"core.suggestions.severity.medium\">Medium</Trans>, color: 'orange' },\n    [SEVERITY.MINOR]: { content: <Trans id=\"core.suggestions.severity.minor\">Minor</Trans>, color: 'blue', icon: 'arrow down' },\n};\nlet Suggestions = class Suggestions extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.onToggleShowMinor = (_, data) => {\n            const { settingsStore } = this.context;\n            settingsStore.setShowMinorSuggestions(data.checked);\n        };\n    }\n    render() {\n        const showMinor = this.context.settingsStore.showMinorSuggestions;\n        const suggestions = this.props.suggestions.filter(suggestion => showMinor || suggestion.severity !== SEVERITY.MINOR);\n        const hasMinor = this.props.suggestions.some(suggestion => suggestion.severity === SEVERITY.MINOR);\n        return <>\n\t\t\t{hasMinor && <Checkbox toggle label={<label><Trans id=\"core.suggestion.show-minor\">Show minor</Trans></label>} defaultChecked={showMinor} onChange={this.onToggleShowMinor} className={styles.checkbox}/>}\n\t\t\t<div className={styles.items}>\n\t\t\t\t{suggestions.map((suggestion, index) => <div key={index} className={styles.item}>\n\t\t\t\t\t<img src={suggestion.icon} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{suggestion.content}\n\t\t\t\t\t\t<div className={styles.extra}>\n\t\t\t\t\t\t\t<Label horizontal {...SEVERITY_LABEL_PROPS[suggestion.severity]}/>\n\t\t\t\t\t\t\t{suggestion.why}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>)}\n\t\t\t\t{suggestions.length === 0 && <div className={styles.item}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<strong><Trans id=\"core.suggestion.nothing\">There's nothing here!</Trans></strong><br />\n\t\t\t\t\t\t{hasMinor && <Trans id=\"core.suggestion.nothing-but-minor\">You can check over the minor suggestions by flicking the \"Show minor\" switch in the top right.</Trans>}\n\t\t\t\t\t</div>\n\t\t\t\t</div>}\n\t\t\t</div>\n\t\t</>;\n    }\n};\nSuggestions.propTypes = {\n    settingsStore: PropTypes.instanceOf(SettingsStore),\n    suggestions: PropTypes.arrayOf(PropTypes.shape({\n        icon: PropTypes.string.isRequired,\n        content: PropTypes.node.isRequired,\n        why: PropTypes.node.isRequired,\n        severity: PropTypes.number.isRequired,\n    })).isRequired,\n};\nSuggestions.contextType = StoreContext;\nSuggestions = __decorate([\n    observer\n], Suggestions);\nexport default Suggestions;\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Suggestion, { SEVERITY } from './Suggestion';\nimport SuggestionsComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Suggestions extends Module {\n    constructor() {\n        super(...arguments);\n        this._suggestions = [];\n    }\n    add(suggestion) {\n        if (!(suggestion instanceof Suggestion)) {\n            console.error('TODO: Proper error message for passing a non-suggestion to the suggestion add handler');\n            return;\n        }\n        this._suggestions.push(suggestion);\n    }\n    output() {\n        // Only show the suggestions module if it's had things sent to it\n        if (this._suggestions.length === 0) {\n            return false;\n        }\n        // Sort suggestions with most important at the top, and remove ignored\n        const suggestions = this._suggestions\n            .filter(suggestion => suggestion.severity !== SEVERITY.IGNORE)\n            .sort((a, b) => a.severity - b.severity);\n        // Rendering is in a specialised component so it's got some state to work with\n        return <SuggestionsComponent suggestions={suggestions}/>;\n    }\n}\nSuggestions.handle = 'suggestions';\nSuggestions.displayOrder = DISPLAY_ORDER.SUGGESTIONS;\nSuggestions.displayMode = DISPLAY_MODE.FULL;\nSuggestions.title = t('core.suggestions.title') `Suggestions`;\n","export { default } from './Suggestions';\nexport { default as Suggestion } from './Suggestion';\nexport * from './Suggestion';\n","import math from 'mathjsCustom';\nimport { matchClosestLower } from 'utilities';\nimport { DISPLAY_ORDER } from 'parser/core/Module';\nexport const TARGET = {\n    SUCCESS: 2,\n    WARN: 1,\n    FAIL: undefined,\n};\nconst DEFAULT_TARGET = 95;\nexport default class Rule {\n    constructor(options) {\n        this.name = '';\n        this.description = null;\n        this.requirements = [];\n        this.target = DEFAULT_TARGET;\n        this.displayOrder = DISPLAY_ORDER.DEFAULT;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get tier() {\n        return matchClosestLower({ [this.target]: TARGET.SUCCESS }, this.percent);\n    }\n    get percent() {\n        // WoWA has a bunch of different modes for this stuff, I'm just going to use mean for now. Because I'm mean. Hue.\n        // TODO: different requirement modes\n        const percents = this.requirements.map(requirement => requirement.percent);\n        return percents.length ? math.mean(percents) : 0;\n    }\n}\nexport class TieredRule extends Rule {\n    constructor(options) {\n        super({\n            tiers: {},\n            matcher: matchClosestLower,\n            ...options,\n        });\n    }\n    get tier() {\n        return this.matcher(this.tiers, this.percent);\n    }\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Accordion, Icon, Progress } from 'semantic-ui-react';\nimport { TARGET } from 'parser/core/modules/Checklist/Rule';\nimport styles from './Checklist.module.css';\nconst RULE_STYLES = {\n    [TARGET.SUCCESS]: { text: 'text-success', color: 'green', icon: 'checkmark', autoExpand: false },\n    [TARGET.WARN]: { text: 'text-warning', color: 'yellow', icon: 'warning sign', autoExpand: true },\n    [TARGET.FAIL]: { text: 'text-error', color: 'red', icon: 'remove', autoExpand: true },\n};\nclass Checklist extends Component {\n    render() {\n        const { rules } = this.props;\n        // If there's no rules, just stop now\n        if (!rules.length) {\n            return false;\n        }\n        const expanded = [];\n        const panels = rules.map((rule, index) => {\n            const ruleStyles = RULE_STYLES[rule.tier];\n            // We cap the percent @ 100 in production mode - calculations can always be a bit janky\n            let percent = rule.percent;\n            if (process.env.NODE_ENV === 'production') {\n                percent = Math.min(percent, 100);\n            }\n            if (ruleStyles.autoExpand) {\n                expanded.push(index);\n            }\n            return {\n                // This should be a handle of some sort\n                key: index,\n                title: {\n                    className: styles.title,\n                    content: <>\n\t\t\t\t\t\t<Icon name={ruleStyles.icon} className={ruleStyles.text}/>\n\t\t\t\t\t\t{rule.name}\n\t\t\t\t\t\t<div className={styles.percent + ' ' + ruleStyles.text}>\n\t\t\t\t\t\t\t{percent.toFixed(1)}%\n\t\t\t\t\t\t\t<Progress percent={percent} className={styles.progress} size=\"small\" color={ruleStyles.color}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>,\n                },\n                content: {\n                    content: <>\n\t\t\t\t\t\t{rule.description && <div className={styles.description}>\n\t\t\t\t\t\t\t<Icon name=\"info\" size=\"large\"/>\n\t\t\t\t\t\t\t<p>{rule.description}</p>\n\t\t\t\t\t\t</div>}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{rule.requirements.map((requirement, index) => <li key={index}>\n\t\t\t\t\t\t\t\t\t{requirement.name}: {requirement.content}\n\t\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>,\n                },\n            };\n        });\n        return <Accordion exclusive={false} panels={panels} defaultActiveIndex={expanded} styled fluid/>;\n    }\n}\nChecklist.propTypes = {\n    rules: PropTypes.arrayOf(PropTypes.shape({\n        percent: PropTypes.number.isRequired,\n        tier: PropTypes.oneOf(Object.values(TARGET)),\n        name: PropTypes.node.isRequired,\n        requirements: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.node.isRequired,\n            content: PropTypes.string.isRequired,\n        })),\n    })),\n};\nexport default (Checklist);\n","import { t } from '@lingui/macro';\nimport React from 'react';\nimport Rule from './Rule';\nimport ChecklistComponent from './Component';\nimport Module, { DISPLAY_MODE } from 'parser/core/Module';\nimport DISPLAY_ORDER from '../DISPLAY_ORDER';\nexport default class Checklist extends Module {\n    constructor() {\n        super(...arguments);\n        this._rules = [];\n    }\n    add(rule) {\n        if (!(rule instanceof Rule)) {\n            console.error('TODO: This error message');\n            return;\n        }\n        this._rules.push(rule);\n    }\n    output() {\n        const sortedRules = [...this._rules];\n        sortedRules.sort((a, b) => a.displayOrder - b.displayOrder);\n        return <ChecklistComponent rules={sortedRules}/>;\n    }\n}\nChecklist.handle = 'checklist';\nChecklist.title = t('core.checklist.title') `Checklist`;\nChecklist.displayOrder = DISPLAY_ORDER.CHECKLIST;\nChecklist.displayMode = DISPLAY_MODE.FULL;\n","export default class Requirement {\n    constructor(options) {\n        this.name = '';\n        this._percent = null;\n        this.value = null;\n        this.target = 100;\n        this.overrideDisplay = null;\n        Object.keys(options || {}).forEach(key => {\n            this[key] = options[key];\n        });\n    }\n    get content() {\n        if (this.overrideDisplay !== null) {\n            return this.overrideDisplay;\n        }\n        if (this._percent !== null || this.value === null) {\n            return `${this.percent.toFixed(2)}%`;\n        }\n        return `${this.value.toFixed(0)}/${this.target.toFixed(0)}`; //avoid weird floating point shit\n    }\n    get percent() {\n        if (this._percent === null) {\n            if (this.value === null) {\n                return 0;\n            }\n            return 100 * (((typeof this.value === 'function') ? this.value() : this.value) || 0) / this.target;\n        }\n        return ((typeof this._percent === 'function') ? this._percent() : this._percent) || 0;\n    }\n    set percent(value) {\n        this._percent = value;\n    }\n}\n","export { default } from './Checklist';\nexport { default as Rule, TieredRule, TARGET } from './Rule';\nexport { default as Requirement } from './Requirement';\n","import cn from 'classnames';\nimport { ActionLink, ItemLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS, { ITEM_ID_OFFSET } from 'data/ACTIONS';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport styles from './Rotation.module.css';\nexport default class Rotation extends Component {\n    render() {\n        const { events } = this.props;\n        return <div className={styles.container}>\n\t\t\t{events.map((event, index) => {\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            // Don't bother showing the icon for autos\n            if (!action || action.autoAttack) {\n                return;\n            }\n            // Stuff like the duty action doesn't have an icon mapping yet.\n            // TODO: Sort this out if it's a problem\n            if (!action.icon) {\n                console.error(event, 'event ability has no icon');\n                return false;\n            }\n            const linkClassName = [\n                styles.link,\n                { [styles.ogcd]: !action.onGcd },\n            ];\n            const iconSize = action.onGcd ? styles.gcdSize : styles.ogcdSize;\n            const isItem = action.id >= ITEM_ID_OFFSET;\n            const Link = isItem ? ItemLink : ActionLink;\n            return <div key={index} className={cn(...linkClassName)}>\n\t\t\t\t\t<Link showName={false} iconSize={iconSize} {...action}/>\n\t\t\t\t</div>;\n        })}\n\t\t</div>;\n    }\n}\nRotation.propTypes = {\n    events: PropTypes.arrayOf(PropTypes.shape({\n        ability: PropTypes.shape({\n            guid: PropTypes.number.isRequired,\n        }).isRequired,\n    })).isRequired,\n};\n","import { create, meanDependencies, modeDependencies, stdDependencies, } from 'mathjs/number';\nexport default create({\n    meanDependencies,\n    modeDependencies,\n    stdDependencies,\n});\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Module, { dependency } from 'parser/core/Module';\nimport { Requirement, Rule } from 'parser/core/modules/Checklist';\nimport React from 'react';\nimport Checklist from './Checklist';\nimport { Data } from './Data';\nimport Downtime from './Downtime';\nexport class CooldownDowntime extends Module {\n    constructor() {\n        super(...arguments);\n        this.usages = new Map();\n        this.resets = new Map();\n        this.checklistName = <Trans id=\"core.cooldownDowntime.use-ogcd-cds\">Use your OGCDs</Trans>;\n        this.checklistDescription = <Trans id=\"core.cooldownDowntime.ogcd-cd-metric\">Always make sure to use your OGCDs\n\t\twhen they are available, but do not clip your GCD to use them.</Trans>;\n        this.checklistTarget = 95;\n        this.defaultAllowedAverageDowntime = 1250;\n        this.defaultFirstUseOffset = 0;\n    }\n    /**\n     * Implementing modules MAY filter out some usages as 'fake' usages\n     * of a cooldown.\n     *\n     * The primary example of this would be NIN mudras, where any mudra\n     * may start a usage, but further mudras while the Mudra buff or any\n     * during the Kassatsu buff should not be counted as usages, even\n     * though all 3 mudra skills are part of the group.\n     *\n     * @param event The cast that may or may not be counted.\n     * @returns True if the event should be counted or false if the event\n     * should not be counted as a usage of the cooldown.\n     */\n    countUsage(event) {\n        return true;\n    }\n    init() {\n        const trackedIds = this.trackedCds.map(group => group.cooldowns)\n            .reduce((acc, cur) => acc.concat(cur))\n            .map(action => action.id);\n        const resetIds = this.trackedCds\n            .map(group => group.resetBy?.actions ?? [])\n            .reduce((acc, cur) => acc.concat(cur))\n            .map(action => action.id);\n        this.addEventHook('cast', { by: 'player', abilityId: trackedIds }, this.onTrackedCast);\n        this.addEventHook('cast', { by: 'player', abilityId: resetIds }, this.onResetCast);\n        this.addEventHook('complete', this.onComplete);\n        this.trackedCds.forEach(group => {\n            this.usages.set(group, []);\n            this.resets.set(group, []);\n        });\n    }\n    onTrackedCast(event) {\n        if (!this.countUsage(event)) {\n            return;\n        }\n        const group = this.getTrackedGroup(event.ability.guid);\n        if (group === undefined) {\n            return;\n        }\n        (this.usages.get(group) || []).push(event);\n    }\n    getTrackedGroup(abilityId) {\n        return this.trackedCds.find(group => group.cooldowns.find(action => action.id === abilityId) !== undefined);\n    }\n    onResetCast(event) {\n        this.trackedCds.forEach(group => {\n            if (group.resetBy?.actions.find(action => action.id === event.ability.guid)) {\n                (this.resets.get(group) || []).push(event);\n            }\n        });\n    }\n    onComplete() {\n        const cdRequirements = [];\n        for (const cdGroup of this.trackedCds) {\n            const expected = this.calculateMaxUsages(cdGroup);\n            const actual = (this.usages.get(cdGroup) || []).length || 0;\n            const percent = actual / expected * 100;\n            const requirementDisplay = cdGroup.cooldowns.map((val, ix) => <>\n\t\t\t\t{(ix > 0 ? ', ' : '')}\n\t\t\t\t<ActionLink {...this.data.getAction(val.id)}/>\n\t\t\t</>);\n            this.debug(JSON.stringify(requirementDisplay));\n            cdRequirements.push(new Requirement({\n                name: requirementDisplay,\n                percent,\n                overrideDisplay: `${actual} / ${expected} (${percent.toFixed(2)}%)`,\n            }));\n        }\n        this.checklist.add(new Rule({\n            name: this.checklistName,\n            description: this.checklistDescription,\n            requirements: cdRequirements,\n            target: this.checklistTarget,\n        }));\n    }\n    calculateMaxUsages(group) {\n        const gRep = group.cooldowns[0];\n        if (gRep.cooldown === undefined) {\n            return 0;\n        }\n        const maxCharges = gRep.charges || 1;\n        // Skill with charges get their allowed downtime from the charge build up time,\n        // so ignore the value on the group object\n        const step = gRep.cooldown * 1000 + ((maxCharges > 1) ? 0 : (group.allowedAverageDowntime || this.defaultAllowedAverageDowntime));\n        const gResets = this.resets.get(group) || [];\n        const resetTime = (group.resetBy && group.resetBy.refundAmount) ? group.resetBy.refundAmount : 0;\n        let timeLost = 0; // TODO: this variable is for logging only and does not actually affect the final count\n        this.debug(`Checking downtime for group ${gRep.name} with default first use ${group.firstUseOffset} and step ${step} and ${maxCharges} charges`);\n        let charges = maxCharges;\n        let count = 0;\n        const expectedFirstUseTime = this.parser.fight.start_time + (group.firstUseOffset || this.defaultFirstUseOffset);\n        const actualFirstUseTime = (this.usages.get(group) || [])[0];\n        let currentTime = expectedFirstUseTime;\n        if (actualFirstUseTime) {\n            // Start at the earlier of the actual first use or the expected first use\n            this.debug(`Actual first use of skill ${gRep.name} at ${this.parser.formatTimestamp(actualFirstUseTime.timestamp)}`);\n            currentTime = Math.min(actualFirstUseTime.timestamp, expectedFirstUseTime);\n        }\n        while (currentTime < this.parser.fight.end_time) {\n            // spend accumulated charges\n            count += charges;\n            this.debug(`Expected ${charges} usages at ${this.parser.formatTimestamp(currentTime)}. Count: ${count}`);\n            charges = 0;\n            // build a new charge at the next charge time\n            currentTime += step;\n            charges += 1;\n            // apply resets that are found\n            while (gResets.length > 0 && gResets[0].timestamp < currentTime) {\n                const rs = gResets[0];\n                const previousTime = currentTime;\n                if (currentTime - resetTime < rs.timestamp) {\n                    if (charges < maxCharges) {\n                        // if not at max charges, the \"extra\" reset time counts toward\n                        // the next charge wihtout being lost\n                        currentTime -= resetTime;\n                    }\n                    else {\n                        timeLost += rs.timestamp - (currentTime - resetTime);\n                        currentTime = rs.timestamp;\n                    }\n                }\n                else {\n                    currentTime -= resetTime;\n                }\n                this.debug(`Reset (${rs.ability.name}) used at ${this.parser.formatTimestamp(rs.timestamp)}. Changing next charge time from ${this.parser.formatTimestamp(previousTime)} to ${this.parser.formatTimestamp(currentTime)}`);\n                gResets.shift();\n            }\n            while (charges < maxCharges && this.downtime.isDowntime(currentTime)) {\n                this.debug(`Saving charge during downtime at ${this.parser.formatTimestamp(currentTime)}. ${charges} charges stored`);\n                const window = this.downtime.getDowntimeWindows(currentTime)[0];\n                if (window.end < currentTime + step) {\n                    count += charges;\n                    this.debug(`Delayed charge spend at ${this.parser.formatTimestamp(window.end)}. ${charges} charges spent. No charge time lost. Count: ${count}`);\n                    charges = 0;\n                }\n                currentTime += step;\n                charges += 1;\n            }\n            // full charges were built up during a downtime.  Move to the end of the downtime to spend charges.\n            if (this.downtime.isDowntime(currentTime)) {\n                const window = this.downtime.getDowntimeWindows(currentTime)[0];\n                this.debug(`Downtime detected at ${this.parser.formatTimestamp(currentTime)} in window from ${this.parser.formatTimestamp(window.start)} to ${this.parser.formatTimestamp(window.end)}`);\n                currentTime = window.end;\n                // TODO: time after window end before usage.  should it just be first use offset? depends on what else was delayed and state in rotation\n            }\n        }\n        this.debug(`Total count for group ${gRep.name} is ${count}. Total reset time lost is ${this.parser.formatDuration(timeLost)}.`);\n        return count;\n    }\n}\nCooldownDowntime.handle = 'cooldownDowntime';\nCooldownDowntime.title = t('core.cooldownDowntime.title') `Cooldown Downtime`;\nCooldownDowntime.debug = false;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Data)\n], CooldownDowntime.prototype, \"data\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Downtime)\n], CooldownDowntime.prototype, \"downtime\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Checklist\n    /**\n     * Implementing modules MUST provide a list of tracked cooldowns\n     */\n    )\n], CooldownDowntime.prototype, \"checklist\", void 0);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gcdSize\":\"40px\",\"ogcdSize\":\"30px\",\"container\":\"Rotation-module_container__32KS2\",\"link\":\"Rotation-module_link__2T3fu\",\"ogcd\":\"Rotation-module_ogcd__3oBO8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gutter\":\"20px\",\"checkbox\":\"Suggestions-module_checkbox__1Z22N\",\"items\":\"Suggestions-module_items__3sCkP\",\"item\":\"Suggestions-module_item__1yy1-\",\"extra\":\"Suggestions-module_extra__3WN2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lg\":\"(min-width: 992px)\",\"title\":\"Checklist-module_title__2ro7x\",\"percent\":\"Checklist-module_percent__EKBdj\",\"progress\":\"Checklist-module_progress__28lgp\",\"description\":\"Checklist-module_description__3Bf5O\"};","import Module from 'parser/core/Module';\nexport default class Downtime extends Module {\n    _internalDowntime(start = 0, end = this.parser.currentTimestamp) {\n        // Get all the downtime from both unableToAct and invuln, and sort it\n        const downtimePeriods = [\n            ...this.unableToAct.getDowntimes(start, end),\n            ...this.invuln.getInvulns('all', start, end, 'untargetable'),\n        ].sort((a, b) => a.start - b.start);\n        // If there's nothing, just stop now\n        if (!downtimePeriods.length) {\n            return [];\n        }\n        // Merge the downtimes that overlap\n        const finalDowntimes = [downtimePeriods.shift()];\n        downtimePeriods.forEach(dt => {\n            const last = finalDowntimes[finalDowntimes.length - 1];\n            if (dt.start <= last.end) {\n                if (dt.end > last.end) {\n                    last.end = dt.end;\n                }\n            }\n            else {\n                finalDowntimes.push(dt);\n            }\n        });\n        return finalDowntimes;\n    }\n    isDowntime(when = this.parser.currentTimestamp) {\n        return this._internalDowntime(when, when).length > 0;\n    }\n    getDowntime(start = 0, end = this.parser.currentTimestamp) {\n        // Return the final number\n        return this._internalDowntime(start, end).reduce((uptime, invuln) => uptime + Math.min(invuln.end, end) - Math.max(invuln.start, start), 0);\n    }\n    getDowntimes(start = 0, end = this.parser.currentTimestamp, minimumDowntimeLength = -1) {\n        return this._internalDowntime(start, end).reduce((aggregator, invuln) => {\n            if (Math.min(invuln.end, end) - Math.max(invuln.start, start) > Math.min(minimumDowntimeLength, 0)) {\n                aggregator.push(Math.min(invuln.end, end) - Math.max(invuln.start, start));\n            }\n            return aggregator;\n        }, []);\n    }\n    getDowntimeWindows(start = 0, end = this.parser.currentTimestamp, minimumWindowSize = -1) {\n        return this._internalDowntime(start, end).reduce((aggregator, invuln) => {\n            if (Math.min(invuln.end, end) - Math.max(invuln.start, start) > Math.min(minimumWindowSize, 0)) {\n                aggregator.push({ start: Math.max(invuln.start, start), end: Math.min(invuln.end, end) });\n            }\n            return aggregator;\n        }, []);\n    }\n}\nDowntime.handle = 'downtime';\nDowntime.dependencies = [\n    'invuln',\n    'unableToAct',\n];\n"],"sourceRoot":""}
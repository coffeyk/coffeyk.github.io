{"version":3,"sources":["webpack:///./src/components/ui/RotationTable.tsx","webpack:///./src/parser/core/modules/Cooldowns.js","webpack:///./src/parser/core/modules/Weaving.js","webpack:///./src/parser/core/modules/AoEUsages.tsx","webpack:///./src/parser/jobs/smn/modules/Cooldowns.js","webpack:///./src/parser/jobs/smn/modules/DISPLAY_ORDER.js","webpack:///./src/parser/jobs/smn/modules/DWT.js","webpack:///./src/parser/jobs/smn/modules/Pets.js","webpack:///./src/parser/jobs/smn/modules/Gauge.js","webpack:///./src/parser/jobs/smn/modules/Demis.js","webpack:///./src/parser/jobs/smn/modules/DoTs.js","webpack:///./src/parser/jobs/smn/modules/GeneralCDDowntime.ts","webpack:///./src/parser/jobs/smn/modules/MissingDoTs.js","webpack:///./src/parser/jobs/smn/modules/MultiHitSkills.js","webpack:///./src/parser/jobs/smn/modules/Ruin2.js","webpack:///./src/parser/jobs/smn/modules/Ruin4.tsx","webpack:///./src/parser/jobs/smn/modules/Weaving.ts","webpack:///./src/parser/jobs/smn/modules/index.js"],"names":["RotationTable","React","Component","render","targets","notes","data","onGoto","headerTitle","this","props","compact","unstackable","celled","Header","Row","HeaderCell","collapsing","id","map","target","i","key","textAlign","header","note","Body","entry","start","targetAccessorResolver","accessor","targetsData","actual","expected","notesAccessorResolver","notesMap","TargetCell","Cell","positive","undefined","negative","end","rotation","style","marginRight","formatDuration","circular","size","icon","onClick","targetEntry","events","noteEntry","Cooldowns","Module","constructor","super","_cooldownGroups","_currentAction","_cooldowns","_groups","actions","_buildGroups","cooldownOrder","addHook","by","_onBeginCast","_onCast","_onComplete","groups","order","length","action","getAction","_buildGroup","content","name","group","merge","forEach","nestedGroups","opts","ItemGroup","showNested","timeline","addGroup","event","ability","guid","cooldown","startCooldown","cooldownGroup","startCooldownGroup","finishingCast","Object","keys","actionId","_addToTimeline","parseInt","cd","current","history","push","onGcd","use","shared","addItem","Item","type","timestamp","parser","fight","start_time","src","alt","getCooldown","originActionId","filter","sharedCooldown","currentFightDuration","currentTimestamp","resetCooldown","invulnTime","reduceCooldown","reduction","setInvulnTime","previousEndTimestamp","previousCooldown","isFirst","downtime","getDowntime","getCooldownRemaining","getTimeOnCooldown","considerInvulnTime","extension","reduce","time","status","getAdjustedTimeOnCooldown","duration","maximumDuration","handle","dependencies","DEFAULT_MAX_WEAVES","MAX_WEAVE_TIERS","0","1","2.5","WEAVING_SEVERITY","SEVERITY","MEDIUM","5","MAJOR","Weaving","_weaves","_ongoingCastEvent","_leadingGcdEvent","_trailingGcdEvent","_badWeaves","autoAttack","isOgcd","_saveIfBad","badWeaves","suggestions","add","TieredSuggestion","href","scrollTo","message","title","why","tiers","value","leadingGcdEvent","gcdTimeDiff","invuln","getUntargetableUptime","weave","trailingGcdEvent","weaves","isBadWeave","maxWeaves","weaveCount","isUntargetable","castTime","forEvent","closest","matchClosestLower","speedmod","get","gcdLength","gcd","getEstimate","output","panels","item","formatTimestamp","exclusive","styled","fluid","AoEUsages","arguments","severity","MINOR","4","7","suggestionContent","badUsages","Map","init","abilityId","trackedAbilities","a","aoeAbility","onAbility","onComplete","adjustMinTargets","minTargets","tracked","find","successfulHit","hits","set","totalBadUsages","Array","from","values","acc","cur","suggestionIcon","has","stAbilities","s","__decorate","dependency","__metadata","Suggestions","prototype","CoreCooldowns","ACTIONS","ENERGY_DRAIN","ENERGY_SIPHON","FESTER","PAINFLARE","BANE","DREADWYRM_TRANCE","FIREBIRD_TRANCE","DEATHFLARE","SUMMON_BAHAMUT","ENKINDLE_BAHAMUT","ENKINDLE_PHOENIX","SUMMON","SUMMON_II","SUMMON_III","ASSAULT_I_AERIAL_SLASH","ASSAULT_I_EARTHEN_ARMOR","ASSAULT_I_CRIMSON_CYCLONE","ASSAULT_II_SLIIPSTREAM","ASSAULT_II_MOUNTAIN_BUSTER","ASSAULT_II_FLAMING_CRUSH","ENKINDLE_AERIAL_BLAST","ENKINDLE_EARTHEN_FURY","ENKINDLE_INFERNO","SMN_AETHERPACT","TRI_DISASTER","CORRECT_GCDS","RUIN_III","RUIN_IV","OUTBURST","DWT_CAST_TIME_MOD","DWT_LENGTH","BAD_GCD_SEVERITY","2","6","DWT","_active","_dwt","_history","_ctIndex","_missedDeathflares","_onDeathflareDamage","to","died","_startDwt","getDataBy","_stopAndSave","casts","_onApplyDwt","_onRemoveDwt","some","cast","badGcds","dwt","includes","Suggestion","rushing","gauge","isRushing","dfHits","endTime","reset","activeAt","numGcds","noDeathflare","className","Rotation","Accordion","displayOrder","DISPLAY_ORDER","NO_PET_ID","PET_RESYNC_BUFFER_MS","SUMMON_ACTIONS","PETS","GARUDA_EGI","TITAN_EGI","IFRIT_EGI","DEMI_BAHAMUT","DEMI_PHOENIX","CHART_COLOURS","IFRIT_AOE_CAPABLE_ACTIONS","FLAMING_CRUSH","INFERNO","TITAN_WARN_PERCENT","GARUDA_MIN_TARGETS","WIND_BLADE_RECAST","SLIPSTREAM_TICKS","SLIPSTREAM_TICK_SPEED","SLIPSTREAM_SEVERITY","DEMI_SUMMON_LENGTH","NO_PET_SEVERITY","GARUDA_ST_SEVERITY","10","33","Pets","_lastPet","_currentPet","_slipstreams","_badWindBlades","_ifritMultiHits","_petUptime","_onInit","_onPetDamage","_onChangePet","_onDeath","normalise","petCache","toString","pet","sourceID","report","friendlyPets","petOwner","sourceIsFriendly","player","setPet","petId","isDemiPet","addTimestampHook","_onDemiExpire","WIND_BLADE","SLIPSTREAM","ticks","STATUSES","GALE_ENFORCER","missedTicks","tickCount","possibleTicks","Math","min","floor","end_time","garudaStPercent","toFixed","titanUptimePercent","getPetUptimePercent","noPetUptimePercent","FURTHER_RUIN","ENKINDLE","color","columns","getPetName","statistics","PieChartStatistic","headings","fightDuration","fabricateEvent","getCurrentPet","AETHER_ACTIONS","MAX_AETHERFLOW","MIN_AETHERFLOW_SPEND_LENGTH","DEMIS","Gauge","_aetherflow","_rushingAetherflow","_lostAetherflow","_rushing","demiSummoned","pets","isRushingAetherflow","fightTimeRemaining","brokenLog","trigger","cooldowns","DEMI_ACTIONS","PLAYER_DEMI_ACTIONS","DEMI_CHECKED_ACTIONS","WYRMWAVE","AKH_MORN","SCARLET_FLAME","REVELATION","FOUNTAIN_OF_FIRE","BRAND_OF_PURGATORY","GHOST_TIMEFRAME","GHOST_CHANCE","NONE","LIKELY","ABSOLUTE","GHOST_CLASSNAME","Demis","_current","_onPlayerCast","_onPetCast","_onSummonPet","timeSinceSummon","ghostChance","checked","counts","obj","ghostIndex","lastPetAction","carry","byPlayerPet","sort","b","index","curCounts","Number","renderHeaderCount","Message","chance","ALLOWED_CLIP_END_TIME","STATUS_DURATION","BIO_III","MIASMA_III","CLIPPING_SEVERITY","1000","10000","30000","DoTs","_lastApplication","_clip","_application","_onDotApply","statusId","applicationKey","targetID","targetInstance","lastApplication","clip","getInvulnerableUptime","max","description","patch","before","checklist","Rule","requirements","Requirement","percent","getDotUptimePercent","maxClip","enemies","getStatusUptime","totalBioClip","totalMiasmaClip","Table","border","padding","DEFAULT_ALLOWED_DOWNTIME","TRANCE_ALLOWED_DOWNTIME","GeneralCDDowntime","CooldownDowntime","defaultAllowedAverageDowntime","trackedCds","allowedAverageDowntime","MISSING_DOT_SEVERITY","SMN_DOT_STATUSES","MissingDotTracker","potency","potPerDot","badCastCounts","addBadCast","missing","totalPotencyLost","totalBadCasts","POTENCY_PER_DOT_500_TO_505","SMN_RUIN_II","POTENCY_PER_DOT_508_TO_NOW","MissingDoTs","_badDotReqCasts","_missingDotWindows","_currentMissingDotWindow","POTENCY_PER_DOT","_onDotReqCast","badCasts","skill","numBadCasts","getEntity","statusesMissing","hasStatus","window","show","MultiHit","BAD_CAST_SEVERITY","Ruin2","_weaved","_moveOnly","_worthless","_lastOgcd","_lastGcd","_ogcdUsed","_pos","lastGcdActionId","movedSinceLastGcd","combatants","selected","resources","abs","x","y","totalCount","SEVERITY_STACK_COUNT","FURTHER_RUIN_PLAYER_ACTIONS","FURTHER_RUIN_PET_ACTIONS","AERIAL_SLASH","CRIMSON_CYCLONE","MOUNTAIN_BUSTER","MAX_FURTHER_RUIN_COUNT","EXPECTED_BAHAMUT_SUMMON_STACKS","END_OF_FIGHT_LEEWAY","Ruin4","currentStackCount","bahamutMissingStackCount","earthenArmorCount","overage","playerSkillCount","petSkillCount","onRuin4","onSummonBahamut","onPlayerEarthenArmor","onPlayerOtherEgiAssault","onPetCast","onDeath","numberLost","Invulnerability","PERMITTED_PHOENIX_WEAVES","CoreWeaving","CastTime"],"mappings":"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","file":"assets/jobs-smn.51895d7c.js","sourcesContent":["import { Trans } from '@lingui/react';\nimport Rotation from 'components/ui/Rotation';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { formatDuration } from 'utilities';\nexport class RotationTable extends React.Component {\n    render() {\n        const { targets, notes, data, onGoto, headerTitle, } = this.props;\n        return <Table compact unstackable celled>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell collapsing>\n\t\t\t\t\t\t<strong><Trans id=\"core.ui.rotation-table.header.time\">Time</Trans></strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(targets || []).map((target, i) => <Table.HeaderCell key={`target_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{target.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t\t<Table.HeaderCell>\n\t\t\t\t\t\t<strong>{(headerTitle) ? headerTitle : <Trans id=\"core.ui.rotation-table.header.rotation\">Rotation</Trans>}</strong>\n\t\t\t\t\t</Table.HeaderCell>\n\t\t\t\t\t{(notes || []).map((note, i) => <Table.HeaderCell key={`note_header_${i}`} textAlign=\"center\" collapsing>\n\t\t\t\t\t\t\t\t<strong>{note.header}</strong>\n\t\t\t\t\t\t\t</Table.HeaderCell>)}\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{data.map((entry) => <RotationTable.Row key={entry.start} onGoto={onGoto} targets={targets || []} notes={notes || []} {...entry}/>)}\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nRotationTable.targetAccessorResolver = (entry, target) => {\n    if (typeof target.accessor === 'string' && entry.targetsData != null) {\n        return entry.targetsData[target.accessor];\n    }\n    else if (typeof target.accessor === 'function') {\n        return target.accessor(entry);\n    }\n    else {\n        return {\n            actual: 0,\n            expected: 0,\n        };\n    }\n};\nRotationTable.notesAccessorResolver = (entry, note) => {\n    if (typeof note.accessor === 'string' && entry.notesMap != null) {\n        return entry.notesMap[note.accessor];\n    }\n    else if (typeof note.accessor === 'function') {\n        return note.accessor(entry);\n    }\n    else {\n        return null;\n    }\n};\nRotationTable.TargetCell = ({ actual, expected }) => <Table.Cell textAlign=\"center\" positive={expected === undefined ? false : actual >= expected} negative={expected === undefined ? false : actual < expected}>\n\t\t\t{actual}/{expected === undefined ? '-' : expected}\n\t\t</Table.Cell>;\nRotationTable.Row = ({ onGoto, targets, notes, notesMap, start, end, targetsData, rotation }) => <Table.Row>\n\t\t\t<Table.Cell textAlign=\"center\">\n\t\t\t\t<span style={{ marginRight: 5 }}>{formatDuration(start / 1000)}</span>\n\t\t\t\t{typeof onGoto === 'function' && <Button circular compact size=\"mini\" icon=\"time\" onClick={() => onGoto(start, end)}/>}\n\t\t\t</Table.Cell>\n\t\t\t{targets\n    .map(target => RotationTable.targetAccessorResolver({ start, end, targetsData, rotation }, target))\n    .map((targetEntry, i) => <RotationTable.TargetCell key={`target_${i}`} {...targetEntry}/>)}\n\t\t\t<Table.Cell>\n\t\t\t\t<Rotation events={rotation}/>\n\t\t\t</Table.Cell>\n\t\t\t{notes\n    .map(note => RotationTable.notesAccessorResolver({ start, end, targetsData, notesMap, rotation }, note))\n    .map((noteEntry, i) => <Table.Cell key={`notes_${i}`} textAlign=\"center\">\n\t\t\t\t\t\t\t{noteEntry}\n\t\t\t\t\t\t</Table.Cell>)}\n\t\t</Table.Row>;\n","import _ from 'lodash';\nimport Module from 'parser/core/Module';\nimport { ItemGroup, Item } from './Timeline';\nimport React from 'react';\n// Track the cooldowns on actions and shit\nexport default class Cooldowns extends Module {\n    constructor(...args) {\n        super(...args);\n        this._cooldownGroups = {};\n        this._currentAction = null;\n        this._cooldowns = {};\n        this._groups = {};\n        this._cooldownGroups = _.groupBy(this.data.actions, 'cooldownGroup');\n        // Pre-build groups for actions explicitly set by subclasses\n        this._buildGroups(this.constructor.cooldownOrder);\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _buildGroups(groups) {\n        // If there's no groups, noop\n        if (!groups) {\n            return;\n        }\n        const ids = groups.map((data, i) => {\n            const order = -(groups.length - i);\n            // If it's just an action id, build a group for it and stop\n            if (typeof data === 'number') {\n                const action = this.data.getAction(data);\n                this._buildGroup({\n                    id: data,\n                    content: action && action.name,\n                    order,\n                });\n                return data;\n            }\n            // Build the base group\n            const group = this._buildGroup({\n                id: data.name,\n                content: data.name,\n                order,\n            });\n            if (data.merge) {\n                // If it's a merge group, we only need to register our group for each of the IDs\n                data.actions.forEach(id => {\n                    this._groups[id] = group;\n                });\n            }\n            else {\n                // Otherwise, build nested groups for each action\n                group.nestedGroups = this._buildGroups(data.actions);\n            }\n            return data.name;\n        });\n        return ids;\n    }\n    _buildGroup(opts) {\n        const group = new ItemGroup({ showNested: false, ...opts });\n        this.timeline.addGroup(group);\n        this._groups[opts.id] = group;\n        return group;\n    }\n    // cooldown starts at the beginning of the casttime\n    // (though 99% of CD based abilities have no cast time)\n    // TODO: Should I be tracking pet CDs too? I mean, contagion/radiant are a thing.\n    _onBeginCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        this._currentAction = action;\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        if (!action || action.cooldown == null) {\n            return;\n        }\n        const finishingCast = this._currentAction && this._currentAction.id === action.id;\n        this._currentAction = null;\n        if (finishingCast) {\n            return;\n        }\n        this.startCooldown(action.id);\n        if (!_.isNil(action.cooldownGroup)) {\n            this.startCooldownGroup(action.id, action.cooldownGroup);\n        }\n    }\n    _onComplete() {\n        Object.keys(this._cooldowns).forEach(actionId => {\n            this._addToTimeline(parseInt(actionId, 10));\n        });\n    }\n    _addToTimeline(actionId) {\n        const cd = this._cooldowns[actionId];\n        if (!cd) {\n            return false;\n        }\n        // Clean out any 'current' cooldowns into the history\n        if (cd.current) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        const action = this.data.getAction(actionId);\n        // If the action is on the GCD, GlobalCooldown will be managing its own group\n        if (!action || action.onGcd) {\n            return false;\n        }\n        // Ensure we've got a group for this item\n        if (!this._groups[actionId]) {\n            this._buildGroup({\n                id: actionId,\n                content: action.name,\n                order: actionId,\n            });\n        }\n        // Add CD info to the timeline\n        cd.history\n            .forEach(use => {\n            if (!use.shared) {\n                this._groups[actionId].addItem(new Item({\n                    type: 'background',\n                    start: use.timestamp - this.parser.fight.start_time,\n                    length: use.length,\n                    content: <img src={action.icon} alt={action.name}/>,\n                }));\n            }\n        });\n        return true;\n    }\n    getCooldown(actionId) {\n        return this._cooldowns[actionId] || {\n            current: null,\n            history: [],\n        };\n    }\n    startCooldownGroup(originActionId, cooldownGroup) {\n        const sharedCooldownActions = _.get(this._cooldownGroups, cooldownGroup, []);\n        sharedCooldownActions\n            .map(action => action.id)\n            .filter(id => id !== originActionId)\n            .forEach(id => this.startCooldown(id, true));\n    }\n    startCooldown(actionId, sharedCooldown = false) {\n        // TODO: handle shared CDs\n        const action = this.data.getAction(actionId);\n        if (!action) {\n            return;\n        }\n        // Get the current cooldown status, falling back to a new cooldown\n        const cd = this.getCooldown(actionId);\n        // If there's a current object, move it into the history\n        // TODO: handle errors on CD overlap\n        if (cd.current) {\n            const currentFightDuration = this.parser.currentTimestamp - this.parser.fight.start_time;\n            if (cd.current.timestamp < this.parser.fight.start_time && cd.current.length > currentFightDuration) {\n                // Pre-pull usage, reset the cooldown to prevent overlap on timeline since we don't know exactly when cooldown was used pre-pull\n                this.resetCooldown(actionId);\n            }\n            else {\n                cd.history.push(cd.current);\n            }\n        }\n        cd.current = {\n            timestamp: this.parser.currentTimestamp,\n            length: action.cooldown * 1000,\n            shared: sharedCooldown,\n            invulnTime: 0,\n        };\n        // Save the info back out (to ensure propagation if we've got a new info)\n        this._cooldowns[actionId] = cd;\n    }\n    reduceCooldown(actionId, reduction) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        // Check if current isn't current\n        if (cd.current && cd.current.timestamp + cd.current.length < currentTimestamp) {\n            cd.history.push(cd.current);\n            cd.current = null;\n        }\n        // TODO: Do I need to warn if they're reducing cooldown on something _with_ no cooldown?\n        if (cd.current === null) {\n            return;\n        }\n        // Reduce the CD\n        cd.current.length -= reduction * 1000;\n        // If the reduction would have made it come off CD earlier than now, reset it - the extra time reduction should be lost.\n        if (cd.current.timestamp + cd.current.length < currentTimestamp) {\n            this.resetCooldown(actionId);\n        }\n    }\n    setInvulnTime(actionId) {\n        const cd = this.getCooldown(actionId);\n        let previousEndTimestamp = this.parser.fight.start_time;\n        let previousCooldown = {};\n        let isFirst = true;\n        for (const cooldown of cd.history) {\n            if (isFirst) {\n                previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n                isFirst = false;\n                previousCooldown = cooldown;\n            }\n            //We invuln time is the time the boss was invuln from when the CD came off CD and when it was next executed\n            previousCooldown.invulnTime = this.downtime.getDowntime(previousEndTimestamp, cooldown.timestamp);\n            previousEndTimestamp = (cooldown.timestamp + cooldown.length);\n            previousCooldown = cooldown;\n        }\n    }\n    resetCooldown(actionId) {\n        const cd = this.getCooldown(actionId);\n        // If there's nothing running, we can just stop\n        // TODO: need to warn?\n        if (cd.current === null) {\n            return;\n        }\n        // Fix up the length\n        cd.current.length = this.parser.currentTimestamp - cd.current.timestamp;\n        // Move the CD into the history\n        cd.history.push(cd.current);\n        cd.current = null;\n    }\n    getCooldownRemaining(actionId) {\n        const current = this.getCooldown(actionId).current;\n        if (!current) {\n            return 0;\n        }\n        return current.length - (this.parser.currentTimestamp - current.timestamp);\n    }\n    // TODO: Should this be here?\n    getTimeOnCooldown(actionId, considerInvulnTime = false, extension = 0) {\n        const cd = this.getCooldown(actionId);\n        const currentTimestamp = this.parser.currentTimestamp;\n        if (considerInvulnTime) {\n            this.setInvulnTime(actionId);\n        }\n        else {\n            cd.history.map(cooldown => {\n                cooldown.invulnTime = 0;\n            });\n        }\n        return cd.history.reduce((time, status) => time + this.getAdjustedTimeOnCooldown(status, currentTimestamp, extension), cd.current ? this.getAdjustedTimeOnCooldown(cd.current, currentTimestamp, extension) : 0);\n    }\n    getAdjustedTimeOnCooldown(cooldown, currentTimestamp, extension) {\n        // Doesn't count time on CD outside the bounds of the current fight, it'll throw calcs off\n        // Add to the length of the cooldown any invuln time for the boss\n        // Additionally account for any extension the caller allowed to the CD Length\n        const duration = currentTimestamp - cooldown.timestamp;\n        const maximumDuration = cooldown.length + cooldown.invulnTime + extension;\n        return _.clamp(duration, 0, maximumDuration);\n    }\n    get used() {\n        return Object.keys(this._cooldowns);\n    }\n}\nCooldowns.handle = 'cooldowns';\nCooldowns.dependencies = [\n    'data',\n    'downtime',\n    'timeline',\n];\n// Array used to sort cooldowns in the timeline. Elements should be either IDs for\n// top-level groups, or objects of the format {name: string, actions: array} for\n// nested groups. Actions not specified here will be sorted by their ID below.\n// Check the NIN and SMN modules for examples.\nCooldowns.cooldownOrder = [];\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport Rotation from 'components/ui/Rotation';\nimport NormalisedMessage from 'components/ui/NormalisedMessage';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { matchClosestLower } from 'utilities';\n// BRD weaves, ninjustsu, etc. should be handled by subclasses w/ isBadWeave overrides\nconst DEFAULT_MAX_WEAVES = 2; // Default castTime is 0\nconst MAX_WEAVE_TIERS = {\n    0: 2,\n    1: 1,\n    2.5: 0,\n};\nconst WEAVING_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nexport default class Weaving extends Module {\n    constructor(...args) {\n        super(...args);\n        this._weaves = [];\n        this._ongoingCastEvent = null;\n        this._leadingGcdEvent = null;\n        this._trailingGcdEvent = null;\n        this._badWeaves = [];\n        this.addHook('begincast', { by: 'player' }, this._onBeginCast);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    _onBeginCast(event) {\n        this._ongoingCastEvent = event;\n    }\n    _onCast(event) {\n        const action = this.data.getAction(event.ability.guid);\n        // If the action is an auto, just ignore it\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // If it's not a GCD, just bump the weave count\n        if (this.isOgcd(action)) {\n            this._weaves.push(event);\n            return;\n        }\n        if (this._ongoingCastEvent && this._ongoingCastEvent.ability.guid === action.id) {\n            // This event is the end of a GCD cast\n            this._trailingGcdEvent = {\n                ...event,\n                // Override the timestamp of the GCD with when its cast began\n                timestamp: this._ongoingCastEvent.timestamp,\n            };\n        }\n        else {\n            // This event was an instant GCD (or log missed the cast starting)\n            this._trailingGcdEvent = event;\n        }\n        // Always reset the ongoing cast\n        this._ongoingCastEvent = null;\n        // Throw the current state onto the history\n        this._saveIfBad();\n        // Reset\n        this._leadingGcdEvent = this._trailingGcdEvent;\n        this._weaves = [];\n    }\n    _onComplete() {\n        // If there's been at least one gcd, run a cleanup on any remnant data\n        if (this._leadingGcdEvent) {\n            this._saveIfBad();\n        }\n        // Few triples is medium, any more is major\n        const badWeaves = this._badWeaves;\n        this.suggestions.add(new TieredSuggestion({\n            // WVR Focused synth lmao\n            icon: 'https://xivapi.com/i/001000/001785.png',\n            content: <Trans id=\"core.weaving.content\">\n\t\t\t\tAvoid weaving more actions than you have time for in a single GCD window. Doing so will delay your next GCD, reducing possible uptime. Check the <a href=\"javascript:void(0);\" onClick={() => this.parser.scrollTo(this.constructor.handle)}><NormalisedMessage message={this.constructor.title}/></a> module below for more detailed analysis.\n\t\t\t</Trans>,\n            why: <Plural id=\"core.weaving.why\" value={badWeaves.length} _1=\"# instance of incorrect weaving\" other=\"# instances of incorrect weaving\"/>,\n            tiers: WEAVING_SEVERITY,\n            value: badWeaves.length,\n        }));\n    }\n    _saveIfBad() {\n        const leadingGcdEvent = this._leadingGcdEvent || { timestamp: this.parser.fight.start_time };\n        const gcdTimeDiff = this._trailingGcdEvent.timestamp -\n            leadingGcdEvent.timestamp -\n            this.invuln.getUntargetableUptime('all', leadingGcdEvent.timestamp, this._trailingGcdEvent.timestamp);\n        const weave = {\n            leadingGcdEvent,\n            trailingGcdEvent: this._trailingGcdEvent,\n            gcdTimeDiff,\n            weaves: this._weaves,\n        };\n        if (weave.weaves.length === 0) {\n            return;\n        }\n        if (this.isBadWeave(weave)) {\n            this._badWeaves.push(weave);\n        }\n    }\n    isOgcd(action) {\n        return !action.onGcd\n            && !action.autoAttack;\n    }\n    // Basic weave check. For job-specific weave concerns, subclass Weaving and override this method. Make sure it's included under the same module key to override the base implementation.\n    isBadWeave(weave, maxWeaves) {\n        // Calc. the no. of weaves - we're ignoring any made while the boss is untargetable\n        const weaveCount = weave.weaves.filter(event => !this.invuln.isUntargetable('all', event.timestamp)).length;\n        // Just using maxWeaves to allow potential subclasses to utilise standard functionality with custom max\n        if (!maxWeaves) {\n            // If there's no leading ability, it's the first GCD. Allow the 'default' cast time's amount\n            if (!weave.leadingGcdEvent.ability) {\n                maxWeaves = DEFAULT_MAX_WEAVES;\n            }\n            else {\n                const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                const closest = matchClosestLower(MAX_WEAVE_TIERS, castTime);\n                maxWeaves = closest !== undefined ? closest : DEFAULT_MAX_WEAVES;\n            }\n        }\n        // It's possible that they did a bunch of weaves during downtime or similar - that's fine.\n        const speedmod = this.speedmod.get(this.parser.timestamp);\n        const gcdLength = this.gcd.getEstimate() * speedmod;\n        return weave.gcdTimeDiff > gcdLength && weaveCount > maxWeaves;\n    }\n    output() {\n        const badWeaves = this._badWeaves;\n        if (badWeaves.length === 0) {\n            return false;\n        }\n        const panels = badWeaves.map(item => ({\n            key: item.leadingGcdEvent.timestamp,\n            title: {\n                content: <>\n\t\t\t\t\t<strong>{this.parser.formatTimestamp(item.leadingGcdEvent.timestamp)}</strong>\n\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t<Plural id=\"core.weaving.panel-count\" value={item.weaves.length} _1=\"# weave\" other=\"# weaves\"/>\n\t\t\t\t\t&nbsp;(\n\t\t\t\t\t{this.parser.formatDuration(item.gcdTimeDiff)}\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<Trans id=\"core.weaving.between-gcds\">between GCDs</Trans>\n\t\t\t\t\t)\n\t\t\t\t</>,\n            },\n            content: {\n                content: <Rotation events={[\n                    ...(item.leadingGcdEvent.ability ? [item.leadingGcdEvent] : []),\n                    ...item.weaves,\n                ]}/>,\n            },\n        }));\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nWeaving.handle = 'weaving';\nWeaving.dependencies = [\n    'castTime',\n    'data',\n    'gcd',\n    'invuln',\n    'speedmod',\n    'suggestions',\n];\nWeaving.title = t('core.weaving.title') `Weaving Issues`;\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Module, { dependency } from 'parser/core/Module';\nimport Suggestions, { SEVERITY, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport React from 'react';\nimport { Table } from 'semantic-ui-react';\n/**\n * This module checks for usages of AoE skills that have single target alternatives,\n * such as BLMs Xenoglossy or NINs Hellfrog Medium, to ensure they hit the minimum\n * number of targets.  It should not be used to check skills that can hit AoE but do\n * not have alternatives, such as DRGs Dragonfire Dive or SMNs Deathflare, as it is\n * correct to use those skills on single targets.\n *\n * For the AoE combos of melee DPS and Tanks, define a trackedAbility with the first\n * abilities of the AoE and single target combos.  This is to provide leeway to finishing\n * AoE combos when the number of targets may drop below the minimum during the combo.\n */\nexport class AoEUsages extends Module {\n    constructor() {\n        super(...arguments);\n        /**\n         * Implementing modules MAY override the severity tiers for incorrect AoE usages.\n         */\n        this.severity = {\n            1: SEVERITY.MINOR,\n            4: SEVERITY.MEDIUM,\n            7: SEVERITY.MAJOR,\n        };\n        this.suggestionContent = <Trans id=\"core.aoeusages.suggestion.content\">\n\t\tAvoid using AoE abilities when they would do less damage than an alternative single-target ability that shares a resource cost or cooldown.\n\t\tIf the AoE skill cannot hit enough targets, the single-target ability will do more total damage and should be used instead.\n\t</Trans>;\n        this.badUsages = new Map();\n    }\n    init() {\n        this.addHook('aoedamage', { by: 'player', abilityId: this.trackedAbilities.map(a => a.aoeAbility.id) }, this.onAbility);\n        this.addHook('complete', this.onComplete);\n    }\n    /**\n     * Implementing modules that have special logic where the number of minimum\n     * targets for a skill is not constant may override this as needed.\n     * @param event The event for which the number of minimum targets is being adjusted.\n     * @param minTargets The default number of minimum targets for the ability as defined in trackedAbilities.\n     */\n    adjustMinTargets(event, minTargets) {\n        return minTargets;\n    }\n    onAbility(event) {\n        const tracked = this.trackedAbilities.find(a => a.aoeAbility.id === event.ability.guid);\n        if (tracked === undefined) {\n            return;\n        }\n        const minTargets = this.adjustMinTargets(event, tracked.minTargets);\n        if (event.successfulHit && event.hits.length < minTargets) {\n            this.badUsages.set(event.ability.guid, (this.badUsages.get(event.ability.guid) || 0) + 1);\n        }\n    }\n    onComplete() {\n        const totalBadUsages = Array.from(this.badUsages.values()).reduce((acc, cur) => acc + cur, 0);\n        this.suggestions.add(new TieredSuggestion({\n            icon: this.suggestionIcon,\n            content: this.suggestionContent,\n            tiers: this.severity,\n            value: totalBadUsages,\n            why: <Trans id=\"core.aoeusages.suggestion.why\">\n\t\t\t\tAoE abilities were used against too few targets <Plural value={totalBadUsages} one=\"# time\" other=\"# times\"/>.\n\t\t\t</Trans>,\n        }));\n    }\n    output() {\n        // if no bad usages were found, do not output anything\n        if (this.badUsages.size === 0) {\n            return;\n        }\n        // if any bad usages were found, tell them which ones, how many times,\n        // and tell them what they should have used instead\n        return <>\n\t\t<Table collapsing unstackable>\n\t\t\t<Table.Header>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.aoe-ability\">AoE Ability Used</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.st-alternative\">Single Target Alternative</Trans></Table.HeaderCell>\n\t\t\t\t\t<Table.HeaderCell><Trans id=\"core.aoeusages.number-bad-usages\">Number of Usages Against Too Few Targets</Trans></Table.HeaderCell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Header>\n\t\t\t<Table.Body>\n\t\t\t\t{this.trackedAbilities\n            .filter(a => this.badUsages.has(a.aoeAbility.id))\n            .map(a => {\n            return <Table.Row key={a.aoeAbility.id}>\n\t\t\t\t\t\t<Table.Cell><ActionLink {...a.aoeAbility}/></Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{a.stAbilities.map(s => <ActionLink {...s}/>)}</Table.Cell>\n\t\t\t\t\t\t<Table.Cell>{this.badUsages.get(a.aoeAbility.id)}</Table.Cell>\n\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t</Table.Body>\n\t\t</Table>\n\t\t</>;\n    }\n}\nAoEUsages.handle = 'aoeusages';\nAoEUsages.title = t('core.aoeusages.title') `Incorrect AoE Ability Usage`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions\n    /**\n     * Implementing modules MUST define the icon to be used for the suggestion.\n     */\n    )\n], AoEUsages.prototype, \"suggestions\", void 0);\n","import CoreCooldowns from 'parser/core/modules/Cooldowns';\nimport ACTIONS from 'data/ACTIONS';\nexport default class Cooldowns extends CoreCooldowns {\n}\nCooldowns.cooldownOrder = [\n    {\n        name: 'Energy Drain/Siphon',\n        merge: true,\n        actions: [\n            ACTIONS.ENERGY_DRAIN.id,\n            ACTIONS.ENERGY_SIPHON.id,\n        ],\n    },\n    ACTIONS.FESTER.id,\n    ACTIONS.PAINFLARE.id,\n    ACTIONS.BANE.id,\n    {\n        name: 'Trance',\n        merge: true,\n        actions: [\n            ACTIONS.DREADWYRM_TRANCE.id,\n            ACTIONS.FIREBIRD_TRANCE.id,\n        ],\n    },\n    ACTIONS.DEATHFLARE.id,\n    ACTIONS.SUMMON_BAHAMUT.id,\n    ACTIONS.ENKINDLE_BAHAMUT.id,\n    ACTIONS.ENKINDLE_PHOENIX.id,\n    {\n        name: 'Summon',\n        merge: true,\n        actions: [\n            ACTIONS.SUMMON.id,\n            ACTIONS.SUMMON_II.id,\n            ACTIONS.SUMMON_III.id,\n        ],\n    },\n    {\n        name: 'Assault I',\n        merge: true,\n        actions: [\n            ACTIONS.ASSAULT_I_AERIAL_SLASH.id,\n            ACTIONS.ASSAULT_I_EARTHEN_ARMOR.id,\n            ACTIONS.ASSAULT_I_CRIMSON_CYCLONE.id,\n        ],\n    },\n    {\n        name: 'Assault II',\n        merge: true,\n        actions: [\n            ACTIONS.ASSAULT_II_SLIIPSTREAM.id,\n            ACTIONS.ASSAULT_II_MOUNTAIN_BUSTER.id,\n            ACTIONS.ASSAULT_II_FLAMING_CRUSH.id,\n        ],\n    },\n    {\n        name: 'Enkindle',\n        merge: true,\n        actions: [\n            ACTIONS.ENKINDLE_AERIAL_BLAST.id,\n            ACTIONS.ENKINDLE_EARTHEN_FURY.id,\n            ACTIONS.ENKINDLE_INFERNO.id,\n        ],\n    },\n    ACTIONS.SMN_AETHERPACT.id,\n    ACTIONS.TRI_DISASTER.id,\n];\n","export default {\n    AETHERFLOW: 47,\n    // some DoT thing that's pinned that I haven't written yet\n    RUIN_IV: 51,\n    DWT: 52,\n    BAHAMUT: 53,\n    PHOENIX: 54,\n    PETS: 55,\n};\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { Accordion } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Rotation from 'components/ui/Rotation';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport Module from 'parser/core/Module';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst CORRECT_GCDS = [\n    ACTIONS.RUIN_III.id,\n    ACTIONS.RUIN_IV.id,\n    ACTIONS.OUTBURST.id,\n    ACTIONS.ASSAULT_I_AERIAL_SLASH.id,\n    ACTIONS.ASSAULT_I_EARTHEN_ARMOR.id,\n    ACTIONS.ASSAULT_I_CRIMSON_CYCLONE.id,\n    ACTIONS.ASSAULT_II_SLIIPSTREAM.id,\n    ACTIONS.ASSAULT_II_MOUNTAIN_BUSTER.id,\n    ACTIONS.ASSAULT_II_FLAMING_CRUSH.id,\n];\nconst DWT_CAST_TIME_MOD = -2.5;\nexport const DWT_LENGTH = 15000;\n// Suggestion severity\nconst BAD_GCD_SEVERITY = {\n    1: SEVERITY.MINOR,\n    2: SEVERITY.MEDIUM,\n    6: SEVERITY.MAJOR,\n};\nexport default class DWT extends Module {\n    constructor(...args) {\n        super(...args);\n        this._active = false;\n        this._dwt = {};\n        this._history = [];\n        this._ctIndex = null;\n        this._missedDeathflares = 0;\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('aoedamage', {\n            by: 'player',\n            abilityId: ACTIONS.DEATHFLARE.id,\n        }, this._onDeathflareDamage);\n        this.addHook('death', { to: 'player' }, () => {\n            if (!this._active) {\n                return;\n            }\n            this._dwt.died = true;\n        });\n        this.addHook('complete', this._onComplete);\n    }\n    _onCast(event) {\n        const actionId = event.ability.guid;\n        // If it's a DWT cast, start tracking\n        if (actionId === ACTIONS.DREADWYRM_TRANCE.id) {\n            this._startDwt(event.timestamp);\n        }\n        // Only going to save casts during DWT\n        const action = getDataBy(ACTIONS, 'id', actionId);\n        if (!this._active || !action || action.autoAttack) {\n            return;\n        }\n        if (event.timestamp - this._dwt.start > DWT_LENGTH) {\n            this._stopAndSave(0);\n        }\n        else {\n            // Save the event to the DWT casts\n            this._dwt.casts.push(event);\n        }\n    }\n    _onDeathflareDamage(event) {\n        this._stopAndSave(event.hits.length, event.timestamp);\n    }\n    _onApplyDwt(event) {\n        // If we're not active at this point, they started the fight with DWT up. Clean up the mess.\n        if (this._active) {\n            return;\n        }\n        this._startDwt(event.timestamp);\n    }\n    _onRemoveDwt() {\n        // Only save if there's no DF - the aoedamage will handle DWTs w/ DF (hopefully all of them lmao)\n        if (!this._dwt.casts.some(cast => cast.ability.guid === ACTIONS.DEATHFLARE.id)) {\n            this._stopAndSave(0);\n        }\n    }\n    _onComplete() {\n        // Clean up any existing casts\n        if (this._active) {\n            this._stopAndSave(0);\n        }\n        // Run some analytics for suggestions\n        let badGcds = 0;\n        this._history.forEach(dwt => {\n            badGcds += dwt.casts\n                .filter(cast => {\n                const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n                return action && action.onGcd && !CORRECT_GCDS.includes(action.id);\n            })\n                .length;\n        });\n        // Suggestions\n        if (badGcds) {\n            this.suggestions.add(new TieredSuggestion({\n                icon: ACTIONS.DREADWYRM_TRANCE.icon,\n                content: <Trans id=\"smn.dwt.suggestions.bad-gcds.content\">\n\t\t\t\t\tGCDs used during Dreadwyrm Trance should be limited to <ActionLink {...ACTIONS.RUIN_III}/> in single target or <ActionLink {...ACTIONS.OUTBURST}/> in AoE situations.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"smn.dwt.suggestions.bad-gcds.why\">\n\t\t\t\t\t{badGcds} incorrect GCDs used during DWT.\n\t\t\t\t</Trans>,\n                tiers: BAD_GCD_SEVERITY,\n                value: badGcds,\n            }));\n        }\n        if (this._missedDeathflares) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.DEATHFLARE.icon,\n                content: <Trans id=\"smn.dwt.suggestions.missed-deathflares.content\">\n\t\t\t\t\tMake sure you always end <ActionLink {...ACTIONS.DREADWYRM_TRANCE}/> with a <ActionLink {...ACTIONS.DEATHFLARE}/>. Failing to do so is a huge damage loss.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"smn.dwt.suggestions.missed-deathflares.why\">\n\t\t\t\t\t{this._missedDeathflares} DWTs with no Deathflare.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n    _startDwt(start) {\n        this._active = true;\n        this._dwt = {\n            start,\n            end: null,\n            rushing: this.gauge.isRushing(),\n            died: false,\n            casts: [],\n        };\n        this._ctIndex = this.castTime.set('all', DWT_CAST_TIME_MOD);\n    }\n    _stopAndSave(dfHits, endTime = this.parser.currentTimestamp) {\n        // Make sure we've not already stopped this one\n        if (!this._active) {\n            return;\n        }\n        this._active = false;\n        this._dwt.end = endTime;\n        this._history.push(this._dwt);\n        this.castTime.reset(this._ctIndex);\n        // ...don't miss deathflare k\n        // Don't flag if they died, the death suggestion is morbid enough.\n        if (dfHits === 0 && !this._dwt.died) {\n            this._missedDeathflares++;\n        }\n    }\n    activeAt(time) {\n        // If it's during the current one, easy way out\n        if (this._active && this._dwt.start <= time) {\n            return true;\n        }\n        return this._history.some(dwt => dwt.start <= time && dwt.end >= time);\n    }\n    output() {\n        const panels = this._history.map(dwt => {\n            const numGcds = dwt.casts.filter(cast => {\n                const action = getDataBy(ACTIONS, 'id', cast.ability.guid);\n                return action && action.onGcd;\n            }).length;\n            const noDeathflare = dwt.casts.filter(cast => cast.ability.guid === ACTIONS.DEATHFLARE.id).length === 0;\n            return {\n                key: dwt.start,\n                title: {\n                    content: <>\n\t\t\t\t\t\t{this.parser.formatTimestamp(dwt.start)}\n\t\t\t\t\t\t&nbsp;-&nbsp;{numGcds} GCDs\n\t\t\t\t\t\t{dwt.rushing && <>\n\t\t\t\t\t\t\t&nbsp;<Trans id=\"smn.dwt.rushing\" render=\"span\" className=\"text-info\">(rushing)</Trans>\n\t\t\t\t\t\t</>}\n\t\t\t\t\t\t{noDeathflare && !dwt.died && <>\n\t\t\t\t\t\t\t&nbsp;<Trans id=\"smn.dwt.no-deathflare\" render=\"span\" className=\"text-error\">(no Deathflare)</Trans>\n\t\t\t\t\t\t</>}\n\t\t\t\t\t\t{dwt.died && <>\n\t\t\t\t\t\t\t&nbsp;<Trans id=\"smn.dwt.died\" render=\"span\" className=\"text-error\">(died)</Trans>\n\t\t\t\t\t\t</>}\n\t\t\t\t\t</>,\n                },\n                content: {\n                    content: <Rotation events={dwt.casts}/>,\n                },\n            };\n        });\n        return <Accordion exclusive={false} panels={panels} styled fluid/>;\n    }\n}\nDWT.handle = 'dwt';\nDWT.dependencies = [\n    // Ensure AoE runs cleanup before us\n    'aoe',\n    'castTime',\n    'gauge',\n    'suggestions',\n];\nDWT.title = t('smn.dwt.title') `Dreadwyrm Trance`;\nDWT.displayOrder = DISPLAY_ORDER.DWT;\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport PETS from 'data/PETS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { PieChartStatistic } from 'parser/core/modules/Statistics';\nimport { Suggestion, TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport DISPLAY_ORDER from './DISPLAY_ORDER';\nconst NO_PET_ID = -1;\nconst PET_RESYNC_BUFFER_MS = 3000;\nconst SUMMON_ACTIONS = {\n    [ACTIONS.SUMMON.id]: PETS.GARUDA_EGI.id,\n    [ACTIONS.SUMMON_II.id]: PETS.TITAN_EGI.id,\n    [ACTIONS.SUMMON_III.id]: PETS.IFRIT_EGI.id,\n    [ACTIONS.SUMMON_BAHAMUT.id]: PETS.DEMI_BAHAMUT.id,\n    [ACTIONS.FIREBIRD_TRANCE.id]: PETS.DEMI_PHOENIX.id,\n};\nconst CHART_COLOURS = {\n    [NO_PET_ID]: '#888',\n    [PETS.GARUDA_EGI.id]: '#9c0',\n    [PETS.TITAN_EGI.id]: '#ffbf23',\n    [PETS.IFRIT_EGI.id]: '#d60808',\n    [PETS.DEMI_BAHAMUT.id]: '#218cd6',\n    [PETS.DEMI_PHOENIX.id]: '#ff6a00',\n};\nconst IFRIT_AOE_CAPABLE_ACTIONS = [\n    ACTIONS.FLAMING_CRUSH.id,\n    ACTIONS.INFERNO.id,\n];\nconst TITAN_WARN_PERCENT = 5;\nconst GARUDA_MIN_TARGETS = 3;\nconst WIND_BLADE_RECAST = 3000;\nconst SLIPSTREAM_TICKS = 4; //3 from duration + 1 on cast\nconst SLIPSTREAM_TICK_SPEED = 3000;\nconst SLIPSTREAM_SEVERITY = {\n    1: SEVERITY.MINOR,\n    [SLIPSTREAM_TICKS]: SEVERITY.MEDIUM,\n    [2 * SLIPSTREAM_TICKS]: SEVERITY.MAJOR,\n};\n// Durations should probably be ACTIONS data\nexport const DEMI_SUMMON_LENGTH = 20000;\n// noPetUptime severity, in %\nconst NO_PET_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\n// Garuda-Egi single target severity, in %\n// To avoid triggering a message from the occasional single hit on the\n// last enemy in a group, the minimum warning level is set to 10%.\nconst GARUDA_ST_SEVERITY = {\n    10: SEVERITY.MINOR,\n    33: SEVERITY.MEDIUM,\n};\nexport default class Pets extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastPet = { id: NO_PET_ID };\n        this._currentPet = null;\n        this._history = [];\n        this._slipstreams = [];\n        this._badWindBlades = 0;\n        this._ifritMultiHits = 0;\n        this._petUptime = new Map();\n        this.addHook('init', this._onInit);\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('aoedamage', { by: 'pet' }, this._onPetDamage);\n        this.addHook('summonpet', this._onChangePet);\n        // Hook changed from on pet death to on player death due to pet changes in Shadowbringers\n        // Pets now won't die unless their caster dies, so FFLogs API no longer emitting pet death events\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    normalise(events) {\n        const petCache = {};\n        // Try to spot an event that'd signal what pet they've started with\n        for (let i = 0; i < events.length; i++) {\n            const event = events[i];\n            // If there's no ability for the event, just skip it\n            if (!event.ability) {\n                continue;\n            }\n            const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n            if (!action) {\n                continue;\n            }\n            // I mean this shouldn't happen but people are stupid.\n            // If there's a summon cast before any pet action, they didn't start with a pet.\n            if (action.id && Object.keys(SUMMON_ACTIONS).includes(action.id.toString())) {\n                break;\n            }\n            const pet = petCache[event.sourceID]\n                || this.parser.report.friendlyPets.find(pet => pet.id === event.sourceID)\n                || { petOwner: -1 };\n            // Ignore events we don't care about\n            if (event.type !== 'cast' ||\n                !event.sourceIsFriendly ||\n                pet.petOwner !== this.parser.player.id ||\n                !action.pet) {\n                continue;\n            }\n            // We've found the first pet cast - that'll be our starting pet\n            this._lastPet = { id: action.pet };\n            break;\n        }\n        return events;\n    }\n    _onInit() {\n        // Just holding off the setPet until now so no events being created during normalise\n        this.setPet(this._lastPet.id);\n    }\n    _onCast(event) {\n        const petId = SUMMON_ACTIONS[event.ability.guid];\n        if (!petId) {\n            return;\n        }\n        // If it's a demi, we need to handle the timer\n        if (this.isDemiPet(petId)) {\n            this.addTimestampHook(event.timestamp + DEMI_SUMMON_LENGTH, this._onDemiExpire);\n        }\n        this.setPet(petId);\n    }\n    _onDemiExpire() {\n        this.setPet(this._lastPet.id);\n    }\n    _onPetDamage(event) {\n        const abilityId = event.ability.guid;\n        // If the action is being cast by a pet that isn't the current pet, tracking has desynced - attempt to resync\n        // This usually happens if the player somehow had a demi out before the start of the log.\n        // Explicitly _prevent_ resync if there was a switch in the last 3s - actions from the previous pet may still be applying\n        const action = getDataBy(ACTIONS, 'id', abilityId);\n        if (action &&\n            action.pet &&\n            action.pet !== this._currentPet.id &&\n            event.timestamp - this._currentPet.timestamp > PET_RESYNC_BUFFER_MS) {\n            this.setPet(action.pet);\n        }\n        if (abilityId === ACTIONS.WIND_BLADE.id &&\n            event.hits.length < GARUDA_MIN_TARGETS) {\n            this._badWindBlades++;\n        }\n        else if (abilityId === ACTIONS.SLIPSTREAM.id) {\n            this._slipstreams.push({\n                cast: event,\n                ticks: [],\n            });\n        }\n        else if (abilityId === STATUSES.GALE_ENFORCER.id) {\n            // if a Gale Enforcer tick happens without a recorded Slipstream, synthesize one here\n            if (!this._slipstreams.length) {\n                this._slipstreams.push({\n                    cast: event,\n                    ticks: [],\n                });\n            }\n            this._slipstreams[this._slipstreams.length - 1].ticks.push(event);\n        }\n        else if (IFRIT_AOE_CAPABLE_ACTIONS.includes(abilityId) &&\n            event.hits.length >= GARUDA_MIN_TARGETS) {\n            this._ifritMultiHits++;\n        }\n    }\n    _onChangePet(event) {\n        if (this._currentPet) {\n            this._lastPet = this._currentPet;\n        }\n        this._currentPet = {\n            id: event.petId,\n            timestamp: event.timestamp,\n        };\n        if (this._lastPet) {\n            const id = this._lastPet.id;\n            const start = this._lastPet.timestamp;\n            const end = event.timestamp;\n            this._history.push({ id, start, end });\n            const value = (this._petUptime.get(id) || 0) + end - start;\n            this._petUptime.set(id, value);\n        }\n    }\n    _onDeath() {\n        this.setPet(NO_PET_ID);\n    }\n    _onComplete(event) {\n        // Finalise the history\n        let id = NO_PET_ID;\n        let start = this.parser.fight.start_time;\n        if (this._currentPet) {\n            id = this._currentPet.id;\n            start = this._currentPet.timestamp;\n        }\n        const end = event.timestamp;\n        this._history.push({ id, start, end });\n        const value = (this._petUptime.get(id) || 0) + end - start;\n        this._petUptime.set(id, value);\n        // Check ticks of Slipstream to detect cases where it was used against adds that died\n        // or where a new pet (including demis) was summoned before the end of the duration\n        const missedTicks = this._slipstreams.reduce((acc, cur) => {\n            const tickCount = cur.ticks.length;\n            const possibleTicks = Math.min(SLIPSTREAM_TICKS, Math.floor((this.parser.fight.end_time - cur.cast.timestamp) / SLIPSTREAM_TICK_SPEED));\n            return acc + (possibleTicks - Math.min(possibleTicks, tickCount));\n        }, 0);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SLIPSTREAM.icon,\n            tiers: SLIPSTREAM_SEVERITY,\n            value: missedTicks,\n            content: <Trans id=\"smn.pets.suggestions.slipstream-ticks.content\">\n\t\t\t\tEnsure you use <ActionLink {...ACTIONS.SLIPSTREAM}/> such that it can deal damage for its entire duration.\n\t\t\t\tSummoning another pet or recasting Slipstream will prevent any remaining ticks of a cast.\n\t\t\t</Trans>,\n            why: <Trans id=\"smn.pets.suggestions.slipstream-ticks.why\">\n\t\t\t\t<Plural value={missedTicks} one=\"# missed tick\" other=\"# missed ticks\"/> of Slipstream.\n\t\t\t</Trans>,\n        }));\n        // Ensure Garuda is being used in AoE\n        const garudaStPercent = Math.min(100, (((this._badWindBlades * WIND_BLADE_RECAST) / this._petUptime.get(PETS.GARUDA_EGI.id)) * 100));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SUMMON.icon,\n            tiers: GARUDA_ST_SEVERITY,\n            value: garudaStPercent,\n            content: <Trans id=\"smn.pets.suggestions.garuda-st.content\">\n\t\t\t\tGaruda-Egi should only be used for AoE.  Use Ifrit-Egi instead when only a single target is available, as it will deal more damage.\n\t\t\t</Trans>,\n            why: <Trans id=\"smn.pets.suggestions.garuda-st.why\">\n\t\t\t\tGaruda-Egi was attacking a single target {garudaStPercent.toFixed(0)}% of the time it was active.\n\t\t\t</Trans>,\n        }));\n        // Since Ifrit's EA2 and Enkindle hit AoE, we can sometimes tell that\n        // it was used in an AoE situation, but we can't tell any more often than\n        // when those particular skills are used.  Therefore, just list this as Medium\n        // rather than trying to determine a percentage like we did with Garuda.\n        if (this._ifritMultiHits > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.SUMMON_III.icon,\n                severity: SEVERITY.MEDIUM,\n                content: <Trans id=\"smn.pets.suggestions.ifrit-aoe.content\">\n\t\t\t\t\tIfrit-Egi should only be used for single target.  Use Garuda-Egi instead when multiple targets are available, as it will deal more damage.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"smn.pets.suggestions.ifrit-aoe.why\">\n\t\t\t\t\tIfrit-Egi hit multiple targets with <Plural value={this._ifritMultiHits} one=\"# use\" other=\"# uses\"/> of <ActionLink {...ACTIONS.FLAMING_CRUSH}/> or <ActionLink {...ACTIONS.INFERNO}/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // We'll let them get away with a tiny bit of Chucken Nugget, but... not too much.\n        const titanUptimePercent = this.getPetUptimePercent(PETS.TITAN_EGI.id);\n        if (titanUptimePercent > TITAN_WARN_PERCENT) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.SUMMON_II.icon,\n                severity: SEVERITY.MAJOR,\n                content: <Trans id=\"smn.pets.suggestions.titan.content\">\n\t\t\t\t\tTitan-Egi generally should not be used in party content. Switch to Ifrit-Egi or Garuda-Egi instead.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"smn.pets.suggestions.titan.why\">\n\t\t\t\t\t{titanUptimePercent}% Titan-Egi uptime.\n\t\t\t\t</Trans>,\n            }));\n        }\n        // Pets are important, k?\n        const noPetUptimePercent = this.getPetUptimePercent(NO_PET_ID);\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SUMMON.icon,\n            tiers: NO_PET_SEVERITY,\n            value: noPetUptimePercent,\n            content: <Trans id=\"smn.pets.suggestions.no-pet.content\">\n\t\t\t\tPets provide a <em>lot</em> of SMN's passive damage, and are essential for <StatusLink {...STATUSES.FURTHER_RUIN}/> procs and <ActionLink {...ACTIONS.ENKINDLE}/>. Make sure you have a pet summoned at all times, and keep them out of boss AoEs.\n\t\t\t</Trans>,\n            why: <Trans id=\"smn.pets.suggestions.no-pet.why\">\n\t\t\t\tNo pet summoned for {noPetUptimePercent}% of the fight (&lt;1% is recommended).\n\t\t\t</Trans>,\n        }));\n        // Statistic\n        const uptimeKeys = Array.from(this._petUptime.keys());\n        const data = uptimeKeys.map(id => {\n            const value = this._petUptime.get(id);\n            return {\n                value,\n                color: CHART_COLOURS[id],\n                columns: [\n                    this.getPetName(id),\n                    this.parser.formatDuration(value),\n                    this.getPetUptimePercent(id) + '%',\n                ],\n            };\n        });\n        this.statistics.add(new PieChartStatistic({\n            headings: ['Pet', 'Uptime', '%'],\n            data,\n        }));\n    }\n    getPetUptimePercent(petId) {\n        const percent = (this._petUptime.get(petId) || 0) / this.parser.fightDuration;\n        return (percent * 100).toFixed(2);\n    }\n    setPet(petId, timestamp) {\n        this.parser.fabricateEvent({\n            type: 'summonpet',\n            timestamp: timestamp || this.parser.currentTimestamp,\n            petId: petId,\n        });\n    }\n    getCurrentPet() {\n        if (!this._currentPet) {\n            return null;\n        }\n        return getDataBy(PETS, 'id', this._currentPet.id);\n    }\n    getPetName(petId) {\n        if (petId === NO_PET_ID) {\n            return 'No pet';\n        }\n        return getDataBy(PETS, 'id', petId).name;\n    }\n    isDemiPet(petId) {\n        return petId === PETS.DEMI_BAHAMUT.id || petId === PETS.DEMI_PHOENIX.id;\n    }\n}\nPets.handle = 'pets';\nPets.title = t('smn.pets.title') `Pets`;\nPets.dependencies = [\n    'statistics',\n    'suggestions',\n];\nPets.displayOrder = DISPLAY_ORDER.PETS;\n","import { Plural, Trans } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport PETS from 'data/PETS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Suggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport { DWT_LENGTH } from './DWT';\nimport { getDataBy } from 'data';\nimport { DEMI_SUMMON_LENGTH } from './Pets';\nconst AETHER_ACTIONS = [\n    ACTIONS.FESTER.id,\n    ACTIONS.PAINFLARE.id,\n];\nconst MAX_AETHERFLOW = 2;\n// 5s cooldown of Fester + 2.5s of GCD slop time in case Fester couldn't be used same GCD as Energy Drain/Siphon\nconst MIN_AETHERFLOW_SPEND_LENGTH = 7500;\nexport const DEMIS = [\n    PETS.DEMI_BAHAMUT.id,\n    PETS.DEMI_PHOENIX.id,\n];\n// Neither act nor fflogs track gauge very well, so let's do it ourselves\nexport default class Gauge extends Module {\n    constructor(...args) {\n        super(...args);\n        // -----\n        // Properties\n        // -----\n        this._aetherflow = 0;\n        this._rushingAetherflow = false;\n        // Track lost stacks\n        this._lostAetherflow = 0;\n        // First DWT should be rushed. Also used for end-of-fight rush\n        this._rushing = true;\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('removebuff', {\n            by: 'player',\n            abilityId: STATUSES.DREADWYRM_TRANCE.id,\n        }, this._onRemoveDwt);\n        this.addHook('death', { to: 'player' }, this._onDeath);\n        this.addHook('complete', this._onComplete);\n    }\n    // -----\n    // API\n    // -----\n    demiSummoned() {\n        const pet = this.pets.getCurrentPet();\n        return pet && DEMIS.includes(pet.id);\n    }\n    isRushing() {\n        return this._rushing;\n    }\n    isRushingAetherflow() {\n        return this._rushingAetherflow;\n    }\n    // -----\n    // Event handling\n    // -----\n    _onCast(event) {\n        const abilityId = event.ability.guid;\n        const fightTimeRemaining = this.parser.fight.end_time - event.timestamp;\n        if (abilityId === ACTIONS.ENERGY_DRAIN.id || abilityId === ACTIONS.ENERGY_SIPHON.id) {\n            // Energy Drain/Siphon restores up to 2 flow stacks\n            // flow can never be > 2, so any remaining on cast is lost\n            this._lostAetherflow += this._aetherflow;\n            this._aetherflow = MAX_AETHERFLOW;\n            this._rushingAetherflow = MIN_AETHERFLOW_SPEND_LENGTH >= fightTimeRemaining;\n        }\n        if (AETHER_ACTIONS.includes(abilityId)) {\n            if (this._aetherflow > 0) {\n                this._aetherflow--;\n            }\n            else {\n                const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n                this.brokenLog.trigger(this, 'aetherflow action at 0', (<Trans id=\"smn.gauge.aetherflow-action-at-0\">\n\t\t\t\t\t\tA cast of <ActionLink {...action}/> was recorded with an expected 0 Aetherflow stacks available.\n\t\t\t\t\t</Trans>));\n            }\n        }\n        if (abilityId === ACTIONS.DREADWYRM_TRANCE.id) {\n            // DWT resets 3D\n            this.cooldowns.resetCooldown(ACTIONS.TRI_DISASTER.id);\n            this._rushing = (DWT_LENGTH + DEMI_SUMMON_LENGTH) >= fightTimeRemaining;\n        }\n    }\n    _onRemoveDwt(event) {\n        // If they've got bahamut ready, but won't have enough time in the fight to effectively use him, they're rushing.\n        const fightTimeRemaining = this.parser.fight.end_time - event.timestamp;\n        if (fightTimeRemaining < DEMI_SUMMON_LENGTH) {\n            this._rushing = true;\n        }\n    }\n    _onDeath() {\n        // Death just flat out resets everything. Rip.\n        // Not counting the loss towards the rest of the gauge loss, that'll just double up on the suggestions\n        this._aetherflow = 0;\n    }\n    _onComplete() {\n        // Suggestions for lost stacks\n        if (this._lostAetherflow) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.ENERGY_DRAIN.icon,\n                content: <Trans id=\"smn.gauge.suggestions.lost-aetherflow.content\">\n\t\t\t\t\tEnsure you gain a full 2 stacks of Aetherflow per cast. Every lost stack is a significant potency loss.\n\t\t\t\t</Trans>,\n                severity: SEVERITY.MAJOR,\n                why: <Trans id=\"smn.gauge.suggestions.lost-aetherflow.why\">\n\t\t\t\t\t<Plural value={this._lostAetherflow} one=\"# stack\" other=\"# stacks\"/>\n\t\t\t\t\tof Aetherflow lost.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nGauge.handle = 'gauge';\nGauge.dependencies = [\n    'brokenLog',\n    'cooldowns',\n    'pets',\n    'suggestions',\n];\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React, { Fragment } from 'react';\nimport { Accordion, Message } from 'semantic-ui-react';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport PETS from 'data/PETS';\nimport Module from 'parser/core/Module';\nimport { DEMIS } from './Gauge';\nimport { DEMI_SUMMON_LENGTH } from './Pets';\nconst DEMI_ACTIONS = Object.values(ACTIONS)\n    .filter(action => action.pet && DEMIS.includes(action.pet))\n    .map(action => action.id);\nconst PLAYER_DEMI_ACTIONS = [\n    ACTIONS.ENKINDLE_BAHAMUT.id,\n    ACTIONS.ENKINDLE_PHOENIX.id,\n];\nconst DEMI_CHECKED_ACTIONS = {\n    [PETS.DEMI_BAHAMUT.id]: {\n        [ACTIONS.WYRMWAVE.id]: {\n            name: 'WW',\n            order: 0,\n            expected: 8,\n        },\n        [ACTIONS.AKH_MORN.id]: {\n            name: 'AM',\n            order: 1,\n            expected: 2,\n        },\n    },\n    [PETS.DEMI_PHOENIX.id]: {\n        [ACTIONS.SCARLET_FLAME.id]: {\n            name: 'SF',\n            order: 0,\n            expected: 8,\n        },\n        [ACTIONS.REVELATION.id]: {\n            name: 'R',\n            order: 1,\n            expected: 2,\n        },\n        [ACTIONS.FOUNTAIN_OF_FIRE.id]: {\n            name: 'FoF',\n            order: 2,\n            expected: 4,\n        },\n        [ACTIONS.BRAND_OF_PURGATORY.id]: {\n            name: 'BoP',\n            order: 3,\n            expected: 4,\n        },\n    },\n};\nconst GHOST_TIMEFRAME = 500;\nconst GHOST_CHANCE = {\n    NONE: 0,\n    LIKELY: 1,\n    ABSOLUTE: 2,\n};\nconst GHOST_CLASSNAME = {\n    [GHOST_CHANCE.LIKELY]: 'text-warning',\n    [GHOST_CHANCE.ABSOLUTE]: 'text-error',\n};\nexport default class Demis extends Module {\n    constructor(...args) {\n        super(...args);\n        this._current = null;\n        this._history = [];\n        this.addHook('cast', { by: 'player' }, this._onPlayerCast);\n        this.addHook('cast', {\n            by: 'pet',\n            abilityId: DEMI_ACTIONS,\n        }, this._onPetCast);\n        this.addHook('summonpet', this._onSummonPet);\n        this.addHook('complete', this._onComplete);\n    }\n    _onPlayerCast(event) {\n        // Ignore autos\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (!action || action.autoAttack) {\n            return;\n        }\n        // Track player actions during demi\n        if (this.gauge.demiSummoned() &&\n            (action.onGcd || PLAYER_DEMI_ACTIONS.includes(event.ability.guid))) {\n            this._current.casts.push(event);\n        }\n    }\n    _onPetCast(event) {\n        // If we've _somehow_ not got a _current, fake one\n        if (!this._current) {\n            this._current = {\n                pet: this.pets.getCurrentPet(),\n                timestamp: event.timestamp,\n                rushing: this.gauge.isRushing(),\n                casts: [],\n            };\n        }\n        const timeSinceSummon = event.timestamp - this._current.timestamp;\n        const ghostChance = timeSinceSummon >= DEMI_SUMMON_LENGTH ? GHOST_CHANCE.ABSOLUTE : timeSinceSummon < DEMI_SUMMON_LENGTH - GHOST_TIMEFRAME ? GHOST_CHANCE.NONE : GHOST_CHANCE.LIKELY;\n        this._current.casts.push({\n            ...event,\n            ghostChance,\n        });\n    }\n    _onSummonPet(event) {\n        if (!DEMIS.includes(event.petId)) {\n            return;\n        }\n        // Save any existing tracking to history\n        if (this._current) {\n            this._history.push(this._current);\n        }\n        // Set up fresh tracking\n        this._current = {\n            pet: getDataBy(PETS, 'id', event.petId),\n            timestamp: event.timestamp,\n            rushing: this.gauge.isRushing(),\n            casts: [],\n        };\n    }\n    _onComplete() {\n        // Clean out any current tracking\n        if (this._current) {\n            this._history.push(this._current);\n        }\n    }\n    output() {\n        const panels = this._history.map(s => {\n            const checked = DEMI_CHECKED_ACTIONS[s.pet.id];\n            const counts = {};\n            s.casts.forEach(cast => {\n                const obj = counts[cast.ability.guid] = counts[cast.ability.guid] || {};\n                const ghostIndex = cast.ghostChance || GHOST_CHANCE.NONE;\n                obj[ghostIndex] = (obj[ghostIndex] || 0) + 1;\n            });\n            const lastPetAction = s.casts.reduce((carry, cast, i) => this.parser.byPlayerPet(cast) ? i : carry, null);\n            return {\n                key: s.timestamp,\n                title: {\n                    content: <>\n\t\t\t\t\t\t{this.parser.formatTimestamp(s.timestamp)}\n\t\t\t\t\t\t&nbsp;-&nbsp;\n\t\t\t\t\t\t{Object.keys(checked)\n                        .sort((a, b) => checked[a].order - checked[b].order)\n                        .map((id, index) => {\n                        const curCounts = counts[Number(id)];\n                        return <>\n\t\t\t\t\t\t\t\t\t{index > 0 && ', '}\n\t\t\t\t\t\t\t\t\t<span className={(curCounts && curCounts[GHOST_CHANCE.NONE] >= checked[id].expected) ? 'text-success' : ''}>\n\t\t\t\t\t\t\t\t\t\t{this.renderHeaderCount(curCounts)}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{' ' + checked[id].name}\n\t\t\t\t\t\t\t\t</>;\n                    })}\n\t\t\t\t\t\t{s.rushing && <span className=\"text-info\">&nbsp;(rushing)</span>}\n\t\t\t\t\t</>,\n                },\n                content: {\n                    content: <ul>\n\t\t\t\t\t\t{s.casts.map((cast, i) => i <= lastPetAction && <li key={cast.timestamp + '-' + cast.ability.guid} className={GHOST_CLASSNAME[cast.ghostChance]}>\n\t\t\t\t\t\t\t<strong>{this.parser.formatDuration(cast.timestamp - s.timestamp, 2)}:</strong>&nbsp;\n\t\t\t\t\t\t\t{cast.ability.name}\n\t\t\t\t\t\t</li>)}\n\t\t\t\t\t</ul>,\n                },\n            };\n        });\n        return <>\n\t\t\t<Message>\n\t\t\t\t<Trans id=\"smn.demi.ghost-disclaimer\">Demi-summon actions can &quot;ghost&quot; - the action resolves, and appears to do damage, however no damage is actually applied to the target. <strong className=\"text-warning\">Yellow</strong> highlighting has been applied to actions that likely ghosted, and <strong className=\"text-error\">Red</strong> to those that ghosted without a doubt.<br />\n\t\t\t\tYou should be aiming for:<br />\n\t\t\t\t8 Wyrmwave and 2 Akh Morn in each Summon Bahamut<br />\n\t\t\t\t8 Scarlet Flame, 2 Revelation, 4 Fountain Of Fire, and 4 Brand of Purgatory in each Firebird Trance.</Trans>\n\t\t\t</Message>\n\t\t\t<Accordion exclusive={false} panels={panels} styled fluid/>\n\t\t</>;\n    }\n    renderHeaderCount(counts) {\n        if (!counts) {\n            return '0';\n        }\n        return [\n            GHOST_CHANCE.NONE,\n            GHOST_CHANCE.LIKELY,\n            GHOST_CHANCE.ABSOLUTE,\n        ].map((chance, i) => counts[chance] && <Fragment key={chance}>\n\t\t\t{i > 0 && '/'}\n\t\t\t<span className={GHOST_CLASSNAME[chance]}>{counts[chance]}</span>\n\t\t</Fragment>);\n    }\n}\nDemis.handle = 'demis';\nDemis.title = t('smn.demis.title') `Demi-summons`;\nDemis.dependencies = [\n    'gauge',\n    'pets',\n];\n","import { t } from '@lingui/macro';\nimport { Trans } from '@lingui/react';\nimport React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { ActionLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { Rule, Requirement } from 'parser/core/modules/Checklist';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\n// At the start of the fight, the standard opener currently clips\n// the first tri-disaster so that the second one can benefit from\n// raid buffs.  Assume that it must happen before 20s in.\nconst ALLOWED_CLIP_END_TIME = 20000;\n// Can never be too careful :blobsweat:\nconst STATUS_DURATION = {\n    [STATUSES.BIO_III.id]: 30000,\n    [STATUSES.MIASMA_III.id]: 30000,\n};\n// In ms\nconst CLIPPING_SEVERITY = {\n    1000: SEVERITY.MINOR,\n    10000: SEVERITY.MEDIUM,\n    30000: SEVERITY.MAJOR,\n};\nexport default class DoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._lastApplication = {};\n        this._clip = {\n            [STATUSES.BIO_III.id]: 0,\n            [STATUSES.MIASMA_III.id]: 0,\n        };\n        this._application = {\n            [STATUSES.BIO_III.id]: [],\n            [STATUSES.MIASMA_III.id]: [],\n        };\n        const filter = {\n            by: 'player',\n            abilityId: [STATUSES.BIO_III.id, STATUSES.MIASMA_III.id],\n        };\n        this.addHook(['applydebuff', 'refreshdebuff'], filter, this._onDotApply);\n        this.addHook('complete', this._onComplete);\n    }\n    _onDotApply(event) {\n        const statusId = event.ability.guid;\n        // Make sure we're tracking for this target\n        const applicationKey = `${event.targetID}|${event.targetInstance}`;\n        const lastApplication = this._lastApplication[applicationKey] = this._lastApplication[applicationKey] || {};\n        // If it's not been applied yet, or we're rushing, set it and skip out\n        if (!lastApplication[statusId] ||\n            this.gauge.isRushing() ||\n            (event.timestamp - this.parser.fight.start_time) < ALLOWED_CLIP_END_TIME) {\n            lastApplication[statusId] = event.timestamp;\n            //save the application for later use in the output\n            this._application[statusId].push({ event: event, clip: null });\n            return;\n        }\n        // Base clip calc\n        let clip = STATUS_DURATION[statusId] - (event.timestamp - lastApplication[statusId]);\n        // Remove any untargetable time from the clip - often want to hardcast after an invuln phase, but refresh w/ 3D shortly after.\n        clip -= this.invuln.getUntargetableUptime('all', event.timestamp - STATUS_DURATION[statusId], event.timestamp);\n        // Also remove invuln time in the future that casting later would just push dots into\n        // TODO: This relies on a full set of invuln data ahead of time. Can this be trusted?\n        clip -= this.invuln.getInvulnerableUptime('all', event.timestamp, event.timestamp + STATUS_DURATION[statusId] + clip);\n        clip = Math.max(0, clip);\n        // Capping clip at 0 - less than that is downtime, which is handled by the checklist requirement\n        this._clip[statusId] += clip;\n        //save the application for later use in the output\n        this._application[statusId].push({ event: event, clip: clip });\n        lastApplication[statusId] = event.timestamp;\n    }\n    _onComplete() {\n        // Checklist rule for dot uptime\n        let description = <></>;\n        if (this.parser.patch.before('5.08')) {\n            description = <Trans id=\"smn.dots.checklist.description_505\">\n\t\t\t\tAs a Summoner, DoTs are significant portion of your sustained damage, and are required for optimal damage from your Ruin spells and <ActionLink {...ACTIONS.FESTER}/>, your primary stack spender. Aim to keep them up at all times.\n\t\t\t</Trans>;\n        }\n        else {\n            description = <Trans id=\"smn.dots.checklist.description\">\n\t\t\t\tAs a Summoner, DoTs are significant portion of your sustained damage, and are required for optimal damage from <ActionLink {...ACTIONS.FESTER}/>, your primary stack spender. Aim to keep them up at all times.\n\t\t\t</Trans>;\n        }\n        this.checklist.add(new Rule({\n            name: <Trans id=\"smn.dots.checklist.name\">Keep your DoTs up</Trans>,\n            description: description,\n            requirements: [\n                new Requirement({\n                    name: <Trans id=\"smn.dots.checklist.requirement.bio-iii.name\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.BIO_III}/> uptime\n\t\t\t\t\t</Trans>,\n                    percent: () => this.getDotUptimePercent(STATUSES.BIO_III.id),\n                }),\n                new Requirement({\n                    name: <Trans id=\"smn.dots.checklist.requirement.miasma-iii.name\">\n\t\t\t\t\t\t<ActionLink {...ACTIONS.MIASMA_III}/> uptime\n\t\t\t\t\t</Trans>,\n                    percent: () => this.getDotUptimePercent(STATUSES.MIASMA_III.id),\n                }),\n            ],\n        }));\n        // Suggestion for DoT clipping\n        const maxClip = Math.max(...Object.values(this._clip));\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.TRI_DISASTER.icon,\n            content: <Trans id=\"smn.dots.suggestions.clipping.content\">\n\t\t\t\tAvoid refreshing DoTs significantly before their expiration, except when rushing during your opener or the end of the fight. Unnecessary refreshes risk overwriting buff snapshots, and increase the frequency you'll need to hardcast your DoTs.\n\t\t\t</Trans>,\n            why: <Trans id=\"smn.dots.suggestions.clipping.why\">\n\t\t\t\t{this.parser.formatDuration(this._clip[STATUSES.BIO_III.id])} of {STATUSES.BIO_III.name} and {this.parser.formatDuration(this._clip[STATUSES.MIASMA_III.id])} of {STATUSES.MIASMA_III.name} lost to early refreshes.\n\t\t\t</Trans>,\n            tiers: CLIPPING_SEVERITY,\n            value: maxClip,\n        }));\n    }\n    getDotUptimePercent(statusId) {\n        const statusUptime = this.enemies.getStatusUptime(statusId);\n        const fightDuration = this.parser.fightDuration - this.invuln.getInvulnerableUptime();\n        return (statusUptime / fightDuration) * 100;\n    }\n    output() {\n        let totalBioClip = 0;\n        let totalMiasmaClip = 0;\n        return <Table collapsing unstackable style={{ border: 'none' }}>\n\t\t\t<Table.Body>\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.Cell style={{ padding: '0 1em 0 0' }}>\n\t\t\t\t\t\t<Table collapsing unstackable>\n\t\t\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><ActionLink {...ACTIONS.MIASMA_III}/> <Trans id=\"smn.dots.applied\">Applied</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"smn.dots.clip\">Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"smn.dots.total-clip\">Total Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t\t</Table.Header>\n\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t{this._application[STATUSES.MIASMA_III.id].map((event) => {\n            totalMiasmaClip += event.clip;\n            return <Table.Row key={event.event.timestamp}>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{this.parser.formatTimestamp(event.event.timestamp)}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{event.clip !== null ? this.parser.formatDuration(event.clip) : '-'}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{totalMiasmaClip ? this.parser.formatDuration(totalMiasmaClip) : '-'}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t<Table.Cell style={{ padding: '0 0 0 1em' }}>\n\t\t\t\t\t\t<Table collapsing unstackable>\n\t\t\t\t\t\t\t<Table.Header>\n\t\t\t\t\t\t\t\t<Table.Row>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><ActionLink {...ACTIONS.BIO_III}/> <Trans id=\"smn.dots.applied\">Applied</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"smn.dots.clip\">Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t\t<Table.HeaderCell><Trans id=\"smn.dots.total-clip\">Total Clip</Trans></Table.HeaderCell>\n\t\t\t\t\t\t\t\t</Table.Row>\n\t\t\t\t\t\t\t</Table.Header>\n\t\t\t\t\t\t\t<Table.Body>\n\t\t\t\t\t\t\t\t{this._application[STATUSES.BIO_III.id].map((event) => {\n            totalBioClip += event.clip;\n            return <Table.Row key={event.event.timestamp}>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{this.parser.formatTimestamp(event.event.timestamp)}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{event.clip !== null ? this.parser.formatDuration(event.clip) : '-'}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t\t<Table.Cell>{totalBioClip ? this.parser.formatDuration(totalBioClip) : '-'}</Table.Cell>\n\t\t\t\t\t\t\t\t\t\t</Table.Row>;\n        })}\n\t\t\t\t\t\t\t</Table.Body>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</Table.Cell>\n\t\t\t\t</Table.Row>\n\t\t\t</Table.Body>\n\t\t</Table>;\n    }\n}\nDoTs.handle = 'dots';\nDoTs.title = t('smn.dots.title') `DoTs`;\nDoTs.dependencies = [\n    'checklist',\n    'enemies',\n    'gauge',\n    'invuln',\n    'suggestions',\n];\n","import ACTIONS from 'data/ACTIONS';\nimport { CooldownDowntime } from 'parser/core/modules/CooldownDowntime';\nconst DEFAULT_ALLOWED_DOWNTIME = 4000;\n// Although the trance cooldown is 55s, it is better in many cases\n// to hold for a 60s alignment, so some downtime per use must be allowed.\nconst TRANCE_ALLOWED_DOWNTIME = 5000;\nexport default class GeneralCDDowntime extends CooldownDowntime {\n    constructor() {\n        super(...arguments);\n        this.defaultAllowedAverageDowntime = DEFAULT_ALLOWED_DOWNTIME;\n        this.trackedCds = [\n            {\n                cooldowns: [ACTIONS.DREADWYRM_TRANCE, ACTIONS.FIREBIRD_TRANCE],\n                allowedAverageDowntime: TRANCE_ALLOWED_DOWNTIME,\n            },\n            { cooldowns: [\n                    ACTIONS.ENERGY_DRAIN,\n                    ACTIONS.ENERGY_SIPHON,\n                ] },\n            { cooldowns: [\n                    ACTIONS.ASSAULT_I_AERIAL_SLASH,\n                    ACTIONS.ASSAULT_I_EARTHEN_ARMOR,\n                    ACTIONS.ASSAULT_I_CRIMSON_CYCLONE,\n                ] },\n            { cooldowns: [\n                    ACTIONS.ASSAULT_II_SLIIPSTREAM,\n                    ACTIONS.ASSAULT_II_MOUNTAIN_BUSTER,\n                    ACTIONS.ASSAULT_II_FLAMING_CRUSH,\n                ] },\n            { cooldowns: [\n                    ACTIONS.ENKINDLE_AERIAL_BLAST,\n                    ACTIONS.ENKINDLE_EARTHEN_FURY,\n                    ACTIONS.ENKINDLE_INFERNO,\n                ] },\n            { cooldowns: [ACTIONS.SMN_AETHERPACT] },\n        ];\n    }\n}\n","import { t } from '@lingui/macro';\nimport { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport { RotationTable } from 'components/ui/RotationTable';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\n// In potency\nconst MISSING_DOT_SEVERITY = {\n    1: SEVERITY.MEDIUM,\n    1000: SEVERITY.MAJOR,\n};\n// Statuses that need to be up for Fester, Bane, and Ruins to do the most\nconst SMN_DOT_STATUSES = [\n    STATUSES.BIO_III.id,\n    STATUSES.MIASMA_III.id,\n];\nclass MissingDotTracker {\n    constructor(potency) {\n        this.potPerDot = 0;\n        this.badCastCounts = [0, 0];\n        this.potPerDot = potency;\n    }\n    addBadCast(missing) {\n        this.badCastCounts[missing - 1]++;\n    }\n    totalPotencyLost() {\n        return this.potPerDot * (this.badCastCounts[0] + 2 * this.badCastCounts[1]);\n    }\n    totalBadCasts() {\n        return (this.badCastCounts[0] + this.badCastCounts[1]);\n    }\n}\nconst POTENCY_PER_DOT_500_TO_505 = {\n    [ACTIONS.FESTER.id]: 100,\n    [ACTIONS.SMN_RUIN_II.id]: 40,\n    [ACTIONS.RUIN_III.id]: 50,\n    [ACTIONS.RUIN_IV.id]: 70,\n};\nconst POTENCY_PER_DOT_508_TO_NOW = {\n    [ACTIONS.FESTER.id]: 100,\n};\nexport default class MissingDoTs extends Module {\n    constructor(...args) {\n        super(...args);\n        this._badDotReqCasts = {};\n        this._missingDotWindows = [];\n        this._currentMissingDotWindow = {\n            timestamp: 0,\n            casts: [],\n        };\n        let POTENCY_PER_DOT = [];\n        if (this.parser.patch.before('5.08')) {\n            POTENCY_PER_DOT = POTENCY_PER_DOT_500_TO_505;\n        }\n        else {\n            POTENCY_PER_DOT = POTENCY_PER_DOT_508_TO_NOW;\n        }\n        this.addHook('complete', this._onComplete);\n        this.addHook('cast', {\n            by: 'player',\n            abilityId: Object.keys(POTENCY_PER_DOT).map(Number),\n        }, this._onDotReqCast);\n        Object.keys(POTENCY_PER_DOT).forEach(id => this._badDotReqCasts[id] = new MissingDotTracker(POTENCY_PER_DOT[id]));\n    }\n    _onComplete() {\n        // Suggestion for fester/ruin casts without both dots\n        // TODO: add exception for initial cast (and possibly first cast after return) where Ruins are being cast before Tri-D\n        const badCasts = Object.values(this._badDotReqCasts);\n        const totalPotencyLost = badCasts.reduce((acc, skill) => acc + skill.totalPotencyLost(), 0);\n        const numBadCasts = badCasts.reduce((acc, skill) => acc + skill.totalBadCasts(), 0);\n        let content = <></>;\n        if (this.parser.patch.before('5.08')) {\n            content = <Trans id=\"smn.dots.suggestions.missing_dot_cast.content_505\">\n\t\t\t\tTo get the most potency out of your <ActionLink {...ACTIONS.FESTER}/>s and Ruin spells, ensure both <StatusLink {...STATUSES.BIO_III}/> and <StatusLink {...STATUSES.MIASMA_III}/> are applied to your target. Avoid casting Fester directly after DoT application, as the status takes a short period to apply.\n\t\t\t</Trans>;\n        }\n        else {\n            content = <Trans id=\"smn.dots.suggestions.missing_dot_cast.content\">\n\t\t\t\tTo get the most potency out of your <ActionLink {...ACTIONS.FESTER}/>s, ensure both <StatusLink {...STATUSES.BIO_III}/> and <StatusLink {...STATUSES.MIASMA_III}/> are applied to your target.\n\t\t\t</Trans>;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.FESTER.icon,\n            content: content,\n            why: <Trans id=\"smn.dots.suggestions.missing_dot_cast.why\">\n\t\t\t\t{totalPotencyLost} potency lost to\n\t\t\t\t<Plural value={numBadCasts} one=\"# cast\" other=\"# casts\"/>\n\t\t\t\ton targets missing DoTs.\n\t\t\t</Trans>,\n            tiers: MISSING_DOT_SEVERITY,\n            value: totalPotencyLost,\n        }));\n        if (this._currentMissingDotWindow.casts.length > 0) {\n            this._missingDotWindows.push(this._currentMissingDotWindow);\n        }\n    }\n    _onDotReqCast(event) {\n        const actionId = event.ability.guid;\n        const target = this.enemies.getEntity(event.targetID);\n        if (!target) {\n            return;\n        }\n        const statusesMissing = SMN_DOT_STATUSES.length - SMN_DOT_STATUSES.filter(statusId => target.hasStatus(statusId)).length;\n        // Don't need to worry if they got them all up\n        if (statusesMissing === 0) {\n            if (this._currentMissingDotWindow.casts.length > 0) {\n                this._missingDotWindows.push(this._currentMissingDotWindow);\n                this._currentMissingDotWindow = {\n                    timestamp: event.timestamp,\n                    casts: [],\n                };\n            }\n            return;\n        }\n        if (this._currentMissingDotWindow.casts.length === 0) {\n            this._currentMissingDotWindow.timestamp = event.timestamp;\n        }\n        this._currentMissingDotWindow.casts.push(event);\n        // Add to the appropriate key\n        // Just tracking flat count for now. Expand to events if need info (for the timeline, yes pls)\n        this._badDotReqCasts[actionId].addBadCast(statusesMissing);\n    }\n    output() {\n        if (this._missingDotWindows.length === 0) {\n            return false;\n        }\n        return <RotationTable data={this._missingDotWindows\n            .map(window => {\n            return {\n                start: window.timestamp - this.parser.fight.start_time,\n                end: window.timestamp - this.parser.fight.start_time,\n                rotation: window.casts,\n            };\n        })} onGoto={this.timeline.show}/>;\n    }\n}\nMissingDoTs.handle = 'missingdots';\nMissingDoTs.title = t('smn.missingdots.title') `Missing DoTs`;\nMissingDoTs.dependencies = [\n    'enemies',\n    'suggestions',\n    'timeline',\n];\n","import ACTIONS from 'data/ACTIONS';\nimport { AoEUsages } from 'parser/core/modules/AoEUsages';\nexport default class MultiHit extends AoEUsages {\n    constructor() {\n        super(...arguments);\n        this.suggestionIcon = ACTIONS.OUTBURST.icon;\n        this.trackedAbilities = [\n            {\n                aoeAbility: ACTIONS.OUTBURST,\n                stAbilities: [ACTIONS.RUIN_III],\n                minTargets: 3,\n            },\n            {\n                aoeAbility: ACTIONS.PAINFLARE,\n                stAbilities: [ACTIONS.FESTER],\n                minTargets: 3,\n            },\n            {\n                aoeAbility: ACTIONS.ENERGY_SIPHON,\n                stAbilities: [ACTIONS.ENERGY_DRAIN],\n                minTargets: 3,\n            },\n        ];\n    }\n    adjustMinTargets(event /*: AoeEvent*/, minTargets /*: number */) {\n        if (event.ability.guid === ACTIONS.PAINFLARE.id && this.gauge.isRushingAetherflow()) {\n            return 1;\n        }\n        return minTargets;\n    }\n}\nMultiHit.dependencies = [\n    ...AoEUsages.dependencies,\n    'gauge',\n];\n","import { Trans, Plural } from '@lingui/react';\nimport React from 'react';\nimport { getDataBy } from 'data';\nimport ACTIONS from 'data/ACTIONS';\nimport { ActionLink } from 'components/ui/DbLink';\nimport Module from 'parser/core/Module';\nimport { TieredSuggestion, SEVERITY } from 'parser/core/modules/Suggestions';\nimport PETS from 'data/PETS';\n// Severity, in no. casts\nconst BAD_CAST_SEVERITY = {\n    1: SEVERITY.MINOR,\n    5: SEVERITY.MEDIUM,\n    10: SEVERITY.MAJOR,\n};\nexport default class Ruin2 extends Module {\n    constructor(...args) {\n        super(...args);\n        // Events\n        // TODO: Should probably mark bad R2s on the timeline in some capacity\n        this._weaved = [];\n        this._moveOnly = [];\n        this._worthless = [];\n        // Tracking etc\n        this._lastOgcd = null;\n        this._lastGcd = null;\n        this._ogcdUsed = false;\n        this._pos = {};\n        this.addHook('cast', { by: 'player' }, this._onCast);\n        this.addHook('complete', this._onComplete);\n    }\n    // Limiting to player, not worried about pets for this check\n    _onCast(event) {\n        const action = getDataBy(ACTIONS, 'id', event.ability.guid);\n        if (!action) {\n            return;\n        }\n        const lastGcdActionId = this._lastGcd\n            ? this._lastGcd.ability.guid\n            : undefined;\n        if (!action.onGcd) {\n            this._lastOgcd = event;\n            this._ogcdUsed = true;\n            return;\n        }\n        // Calc the time in the GCD that the boss can't be targeted - R2ing before an invuln to prevent an R3 cancel is good\n        const invulnTime = this.invuln.getUntargetableUptime('all', event.timestamp, event.timestamp + this.gcd.getEstimate());\n        if (action.onGcd &&\n            lastGcdActionId === ACTIONS.SMN_RUIN_II.id &&\n            invulnTime === 0) {\n            if (this._ogcdUsed) {\n                // This was at least used for a weave, even though you should have enough other instants to not need R2s in general.\n                this._weaved.push(this._lastGcd);\n            }\n            else if (this.movedSinceLastGcd()) {\n                // Separate count if they at least moved\n                this._moveOnly.push(this._lastGcd);\n            }\n            else {\n                this._worthless.push(this._lastGcd);\n            }\n        }\n        // If this cast is on the gcd, store it for comparison\n        this._lastGcd = event;\n        this._pos = this.combatants.selected.resources;\n        // If this is an R2 cast, track it\n        if (action.id === ACTIONS.SMN_RUIN_II.id) {\n            // Explicitly setting the ogcd tracker to true while bahamut is out,\n            // we don't want to fault people for using R2 for WWs during bahamut.\n            this._ogcdUsed = (this.pets.getCurrentPet() === PETS.DEMI_BAHAMUT.id);\n        }\n    }\n    // TODO: Should this be in some other module?\n    movedSinceLastGcd() {\n        return (Math.abs(this.combatants.selected.resources.x - this._pos.x) > 1 &&\n            Math.abs(this.combatants.selected.resources.y - this._pos.y) > 1);\n    }\n    _onComplete() {\n        const wastedCount = this._worthless.length;\n        const moveOnlyCount = this._moveOnly.length;\n        const weavedCount = this._weaved.length;\n        const totalCount = wastedCount + moveOnlyCount + weavedCount;\n        this.suggestions.add(new TieredSuggestion({\n            icon: ACTIONS.SMN_RUIN_II.icon,\n            tiers: BAD_CAST_SEVERITY,\n            value: totalCount,\n            content: <Trans id=\"smn.ruin-ii.suggestions.avoid.content\">\n\t\t\t\tAvoid casting <ActionLink {...ACTIONS.SMN_RUIN_II}/> if possible.\n\t\t\t\tPrefer using your other instant casts for movement and weaving or Ruin III when movement and weaving are not required.\n\t\t\t</Trans>,\n            why: <Trans id=\"smn.ruin-ii.suggestions.avoid.why\">\n\t\t\t\t{totalCount} Ruin II <Plural value={totalCount} one=\"cast\" other=\"casts\"/> were performed.\n\t\t\t</Trans>,\n        }));\n    }\n}\nRuin2.handle = 'ruin2';\nRuin2.dependencies = [\n    'combatants',\n    'gcd',\n    'invuln',\n    'pets',\n    'suggestions',\n];\n","import { __decorate, __metadata } from \"tslib\";\nimport { t } from '@lingui/macro';\nimport { Plural, Trans } from '@lingui/react';\nimport { ActionLink, StatusLink } from 'components/ui/DbLink';\nimport ACTIONS from 'data/ACTIONS';\nimport STATUSES from 'data/STATUSES';\nimport Module, { dependency } from 'parser/core/Module';\nimport Invulnerability from 'parser/core/modules/Invulnerability';\nimport Suggestions, { SEVERITY, Suggestion, TieredSuggestion } from 'parser/core/modules/Suggestions';\nimport React from 'react';\nconst SEVERITY_STACK_COUNT = {\n    1: SEVERITY.MEDIUM,\n    5: SEVERITY.MAJOR,\n};\nconst FURTHER_RUIN_PLAYER_ACTIONS = [\n    ACTIONS.ASSAULT_I_AERIAL_SLASH.id,\n    ACTIONS.ASSAULT_II_SLIIPSTREAM.id,\n    ACTIONS.ASSAULT_I_CRIMSON_CYCLONE.id,\n    ACTIONS.ASSAULT_II_FLAMING_CRUSH.id,\n    // NOTE: Titan Egi Assualt I Earthen Armor does not generate a Further Ruin stack\n    ACTIONS.ASSAULT_II_MOUNTAIN_BUSTER.id,\n];\nconst FURTHER_RUIN_PET_ACTIONS = [\n    ACTIONS.AERIAL_SLASH.id,\n    ACTIONS.SLIPSTREAM.id,\n    ACTIONS.CRIMSON_CYCLONE.id,\n    ACTIONS.FLAMING_CRUSH.id,\n    // NOTE: Titan Egi Assualt I does not generate a Further Ruin stack\n    ACTIONS.MOUNTAIN_BUSTER.id,\n];\nconst MAX_FURTHER_RUIN_COUNT = 4;\nconst EXPECTED_BAHAMUT_SUMMON_STACKS = 4;\nconst END_OF_FIGHT_LEEWAY = 5000;\nexport default class Ruin4 extends Module {\n    constructor() {\n        super(...arguments);\n        this.currentStackCount = 0;\n        this.bahamutMissingStackCount = 0;\n        this.earthenArmorCount = 0;\n        this.overage = 0;\n        this.playerSkillCount = 0;\n        this.petSkillCount = 0;\n    }\n    init() {\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.RUIN_IV.id }, this.onRuin4);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.SUMMON_BAHAMUT.id }, this.onSummonBahamut);\n        this.addHook('cast', { by: 'player', abilityId: ACTIONS.ASSAULT_I_EARTHEN_ARMOR.id }, this.onPlayerEarthenArmor);\n        this.addHook('cast', { by: 'player', abilityId: FURTHER_RUIN_PLAYER_ACTIONS }, this.onPlayerOtherEgiAssault);\n        this.addHook('cast', { by: 'pet', abilityId: FURTHER_RUIN_PET_ACTIONS }, this.onPetCast);\n        this.addHook('death', { to: 'player' }, this.onDeath);\n        this.addHook('complete', this.onComplete);\n    }\n    onRuin4(event) {\n        if (this.currentStackCount > 0) {\n            this.currentStackCount--;\n        }\n    }\n    onSummonBahamut(event) {\n        if (this.currentStackCount < EXPECTED_BAHAMUT_SUMMON_STACKS) {\n            this.bahamutMissingStackCount++;\n        }\n    }\n    onPlayerEarthenArmor(event) {\n        this.earthenArmorCount++;\n    }\n    onPlayerOtherEgiAssault(event) {\n        // Do not flag for player skills used right at the end of the fight when the\n        // pet may not have time to use the skill.\n        const fightTimeRemaining = this.parser.fight.end_time - event.timestamp;\n        if (fightTimeRemaining > END_OF_FIGHT_LEEWAY) {\n            this.playerSkillCount++;\n        }\n    }\n    onPetCast(event) {\n        if (this.invuln.getInvulnerableUptime('all', event.timestamp)) {\n            return;\n        }\n        this.petSkillCount++;\n        if (this.currentStackCount >= MAX_FURTHER_RUIN_COUNT) {\n            this.overage++;\n        }\n        else {\n            this.currentStackCount++;\n        }\n    }\n    onDeath() {\n        this.currentStackCount = 0;\n    }\n    onComplete() {\n        if (this.bahamutMissingStackCount > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: ACTIONS.SUMMON_BAHAMUT.icon,\n                severity: SEVERITY.MINOR,\n                content: <Trans id=\"smn.ruin-iv.bahamut.content\">\n\t\t\t\t\tEnsure you have 4 stacks of <StatusLink {...STATUSES.FURTHER_RUIN}/> when summoning Bahamut.\n\t\t\t\t\tAll 4 stacks will be needed to get the maximum value from Bahamut.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"smn.ruin-iv.bahamut.why\">\n\t\t\t\t\tBahamut was summoned without enough stacks <Plural value={this.bahamutMissingStackCount} one=\"# time\" other=\"# times\"/>.\n\t\t\t\t</Trans>,\n            }));\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: STATUSES.FURTHER_RUIN.icon,\n            content: <Trans id=\"smn.ruin-iv.overage.content\">\n\t\t\t\tDo not use Egi Assault skills when already at the maximum number of <StatusLink {...STATUSES.FURTHER_RUIN}/> stacks.\n\t\t\t</Trans>,\n            tiers: SEVERITY_STACK_COUNT,\n            value: this.overage,\n            why: <Trans id=\"smn.ruin-iv.overage.why\">\n\t\t\t\t{this.overage} Further Ruin <Plural value={this.overage} one=\"stack was\" other=\"stacks were\"/> lost.\n\t\t\t</Trans>,\n        }));\n        let numberLost = this.earthenArmorCount;\n        if (this.playerSkillCount > this.petSkillCount) {\n            numberLost += this.playerSkillCount - this.petSkillCount;\n        }\n        this.suggestions.add(new TieredSuggestion({\n            icon: STATUSES.FURTHER_RUIN.icon,\n            content: <Trans id=\"smn.ruin-iv.lost.content\">\n\t\t\t\tUse Egi Assault skills in a way that will generate stacks of <StatusLink {...STATUSES.FURTHER_RUIN}/>.\n\t\t\t\tEgi Assaults will not generate a stack if used against targets that die or become invincible or if a new\n\t\t\t\tpet is summoned before the assault is executed.  Titan-Egi's <ActionLink {...ACTIONS.ASSAULT_I_EARTHEN_ARMOR}/>\n\t\t\t\tdoes not generate a Further Ruin stack.\n\t\t\t</Trans>,\n            tiers: SEVERITY_STACK_COUNT,\n            value: numberLost,\n            why: <Trans id=\"smn.ruin-iv.lost.why\">\n\t\t\t\t{numberLost} Further Ruin <Plural value={numberLost} one=\"stack was\" other=\"stacks were\"/> not generated.\n\t\t\t</Trans>,\n        }));\n        if (this.currentStackCount > 0) {\n            this.suggestions.add(new Suggestion({\n                icon: STATUSES.FURTHER_RUIN.icon,\n                severity: SEVERITY.MINOR,\n                content: <Trans id=\"smn.ruin-iv.leftover.content\">\n\t\t\t\t\tYou should use all stacks of <StatusLink {...STATUSES.FURTHER_RUIN}/> before the end of the fight.\n\t\t\t\t</Trans>,\n                why: <Trans id=\"smn.ruin-iv.leftover.why\">\n\t\t\t\t\t{this.currentStackCount} Further Ruin <Plural value={this.currentStackCount} one=\"stack was\" other=\"stacks were\"/> left unused at the end of the fight.\n\t\t\t\t</Trans>,\n            }));\n        }\n    }\n}\nRuin4.handle = 'ruin4';\nRuin4.title = t('smn.ruin-iv.title') `Ruin IV`;\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Suggestions)\n], Ruin4.prototype, \"suggestions\", void 0);\n__decorate([\n    dependency,\n    __metadata(\"design:type\", Invulnerability)\n], Ruin4.prototype, \"invuln\", void 0);\n","import { __decorate, __metadata } from \"tslib\";\nimport ACTIONS from 'data/ACTIONS';\nimport { dependency } from 'parser/core/Module';\nimport CastTime from 'parser/core/modules/CastTime';\nimport CoreWeaving from 'parser/core/modules/Weaving';\nconst PERMITTED_PHOENIX_WEAVES = 3;\nexport class Weaving extends CoreWeaving {\n    isBadWeave(weave, maxWeaves) {\n        // Permit triple weaves with Firebid Trance because Phoenix will not\n        // trigger a Scarlet Flame for the first skill if it is the last weave\n        // in a GCD and cannot always be used as the first weave.\n        // Only a single extra weave will be allowed and only if it is the middle\n        // weave after an instant cast skill.  (If it is the first weave, the triple\n        // is not needed. If it is the third weave, the gain from triple weaving\n        // does not occur.)\n        const hasPhoenixSummon = weave.weaves\n            .some(event => event.ability.guid === ACTIONS.FIREBIRD_TRANCE.id);\n        if (hasPhoenixSummon && weave.weaves.length === PERMITTED_PHOENIX_WEAVES) {\n            // Need to make sure we don't allow a triple weave after a hardcast\n            if (!maxWeaves) {\n                const gcd = weave.leadingGcdEvent;\n                if (!gcd || !gcd.ability) {\n                    maxWeaves = 2;\n                }\n                else {\n                    const castTime = this.castTime.forEvent(weave.leadingGcdEvent);\n                    maxWeaves = castTime === 0 ? 2 : 0;\n                }\n            }\n            return weave.weaves.length !== PERMITTED_PHOENIX_WEAVES ||\n                weave.weaves[1].ability.guid !== ACTIONS.FIREBIRD_TRANCE.id ||\n                maxWeaves !== 2;\n        }\n        return super.isBadWeave(weave, maxWeaves);\n    }\n}\n__decorate([\n    dependency,\n    __metadata(\"design:type\", CastTime)\n], Weaving.prototype, \"castTime\", void 0);\n","import Cooldowns from './Cooldowns';\nimport Demis from './Demis';\nimport DoTs from './DoTs';\nimport DWT from './DWT';\nimport Gauge from './Gauge';\nimport GeneralCDDowntime from './GeneralCDDowntime';\nimport MissingDoTs from './MissingDoTs';\nimport MultiHit from './MultiHitSkills';\nimport Pets from './Pets';\nimport Ruin2 from './Ruin2';\nimport Ruin4 from './Ruin4';\nimport { Weaving } from './Weaving';\nexport default [\n    Cooldowns,\n    Demis,\n    DoTs,\n    DWT,\n    Gauge,\n    GeneralCDDowntime,\n    MissingDoTs,\n    MultiHit,\n    Pets,\n    Ruin2,\n    Ruin4,\n    Weaving,\n];\n"],"sourceRoot":""}